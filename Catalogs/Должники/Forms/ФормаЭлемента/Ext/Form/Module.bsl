&НаКлиенте
Перем фспОткр,шпиОткр,банкротОткр;


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Архивный = Ложь;
	
	КоллективнаяРабота = ПараметрыСеанса.Пользователь.КоллективнаяРабота;
	Пользователь = ПараметрыСеанса.Пользователь;
	
	//ГруппаКонтакты
	УстановитьОтборСписка(Контакты);
	УстановитьОтборСписка(Обещания);
	//ГруппаДоговоры
	УстановитьОтборСписка(Договоры, "Владелец");
	
	
	УстановитьОтборСписка(ЗаявлениеОПравеПреемственности, "Владелец");
	
	УстановитьОтборСписка(ЗаявлениеВПФР, "Владелец");

	
	УстановитьОтборСписка(ЗаявлениеОВозбужденииИП, "Владелец");
	УстановитьОтборСписка(ЗаявлениеНаВыдачуСудебногоПриказа, "Владелец");
	УстановитьОтборСписка(ЗаявленияЗаменаСтороныИП, "Владелец");
	
	УстановитьОтборСписка(СМССообщения, "Владелец");
	
	УстановитьОтборСписка(СтатаусДоговор, "Владелец");
	
	
	
	УстановитьОтборСписка(ОбращениеОХодеИП, "Владелец");
	
	
	УстановитьОтборСписка(ПочтаШПИ, "Владелец");
	
	УстановитьОтборСписка(Банкрот, "Владелец");
	
	
	УстановитьОтборСписка(ДелопроизводствоТБ, "Владелец");
	
	
	
	
	
	//группаКонтактнаяИнформация
	УстановитьОтборСписка(Адреса, "Владелец");
	
	УстановитьОтборСписка(ДопДанные, "Владелец");
	
	
	УстановитьОтборСписка(Телефоны, "Владелец");
		
	
	// Установить отбор для регистров
	ДоговорыДолжника = ОбщийМодульИнформация.ПолучитьДоговорыДолжника(Объект.Ссылка);
	УстановитьОтборСписка(ДанныеДоговоров, "Договор", ВидСравненияКомпоновкиДанных.ВСписке, ДоговорыДолжника);
	УстановитьОтборСписка(Платежи);
	//ГруппаПривязки
	УстановитьОтборСписка(ПривязкаСотрудник);
	УстановитьОтборСписка(ПривязкаОтветственный);
	УстановитьОтборСписка(ПривязкаОтдел);
	
	Элементы.НадписьАрхив.Видимость = Архивный;
	
	НадписьДоговоры = ОбщийМодульИнформация.ПолучитьДанныеДоговоров(Объект.Ссылка, ТекущаяДата());
	НадписьПривязка = ОбщийМодульИнформация.ПолучитьДанныеПривязки(Объект.Ссылка, ТекущаяДата(), Архивный);
	
	
	
	ТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	
	
	  Если   ТекПользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) ИЛИ ТекПользователь.Роли.Содержит(Метаданные.Роли.Директор)  Тогда
		    Элементы.ГруппаПривязкаСотрудник.Доступность=Истина;
	  КонецЕсли;
	  
	  АрхивВидимость=Ложь;
	  
      ссылкаОтдел=Справочники.Отделы.НайтиПоНаименованию("Архив");   
	  отдел=Привязка.ПолучитьОтдел(Объект.Ссылка, ТекущаяДата());
	  Если ссылкаОтдел=отдел  Тогда
		  
		 АрхивВидимость=Истина;  
	  	
	  
	  КонецЕсли; 
	  
	//Получить_ТЗ_Из_ДинамическогоСписка("ПочтаШПИ");  
	
	//Получить_ТЗ_Из_ДинамическогоСписка("Банкрот"); 
	  
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписка(ДинамическийСписок, ИмяПоля = "Должник", ВидСравнения = Неопределено, ПравоеЗначение = Неопределено)
	Если ПравоеЗначение = Неопределено Тогда
		ПравоеЗначение = Объект.Ссылка;
	КонецЕсли;
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	ЭлементОтбора = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаПередача(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Должник", Объект.Ссылка);
		СтруктураЗаполнения.Вставить("РольОтдела", ДополнительныеПараметры.РольОтдела);
		ФормаДляПередачи = ПолучитьФорму("Справочник.Должники.Форма.ФормаДляСозданияПередачи", СтруктураЗаполнения, ЭтаФорма);
		ФормаДляПередачи.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередатьНаВыезд(Команда)
	ДополнительныеПараметры = Новый Структура("РольОтдела", ПредопределенноеЗначение("Перечисление.РольОтдела.Выездной"));
	Оп = Новый ОписаниеОповещения("ПослеОтветаПередача", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(Оп, "Передать должника?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ПередатьУточнение(Команда)
	ДополнительныеПараметры = Новый Структура("РольОтдела", ПредопределенноеЗначение("Перечисление.РольОтдела.Информационный"));
	Оп = Новый ОписаниеОповещения("ПослеОтветаПередача", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(Оп, "Передать должника?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ПрекращениеРаботы(Команда)
	ДополнительныеПараметры = Новый Структура("РольОтдела", ПредопределенноеЗначение("Перечисление.РольОтдела.ПрекращениеРаботы"));
	Оп = Новый ОписаниеОповещения("ПослеОтветаПередача", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(Оп, "Передать должника?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ПередатьСотруднику(Команда)
	Форма = ПолучитьФорму("Документ.ПередачаДолжников.ФормаОбъекта");
	ДанныеФормы = Форма.Объект;
	ПередатьСотрудникуНаСервере(ДанныеФормы); // Заполняем документ на сервере
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект); // копируем наш объект в объект формы и далее открываем ее
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Процедура ПередатьСотрудникуНаСервере(ДанныеФормы)
	ДокументПередачи = Документы.ПередачаДолжников.СоздатьДокумент();
	ДокументПередачи.Автор = ПараметрыСеанса.Пользователь;
	ДокументПередачи.Дата = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Договоры.Ссылка КАК Договор
	               |ИЗ
	               |	Справочник.Договоры КАК Договоры
	               |ГДЕ
	               |	Договоры.Владелец = &Владелец
	               |	И Договоры.Статус <> &Статус";
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоров.Архив);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = ДокументПередачи.Должники.Добавить();
		НовСтр.Должник = Объект.Ссылка;
		НовСтр.Договор = Выборка.Договор;
	КонецЦиклА;
	ДокументПередачи.Менеджер = ПараметрыСеанса.Пользователь;
	
	ЗначениеВДанныеФормы(ДокументПередачи, ДанныеФормы);
КонецПроцедуры

&НаКлиенте
Процедура ТелефоныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//   ---------
	//ФормаКонтакта = ПолучитьФорму("Документ.Контакт.ФормаОбъекта",, ЭтотОбъект);
	//ДанныеФормы = ФормаКонтакта.Объект;
	//ЗаполнитьКонтактНаСервере(ДанныеФормы, ВыбраннаяСтрока); // Заполняем документ на сервере
	//КопироватьДанныеФормы(ДанныеФормы, ФормаКонтакта.Объект); // копируем наш объект в объект формы и далее открываем ее
	//
	//ФормаКонтакта.Открыть();
	// //----------
	
	
	//   попробую ОткрытьФорму(" ....
	
	 	
		 Парам = Новый Структура;
	
		// вставить телефон
		Парам.Вставить("ТелефонПараметр",ВыбраннаяСтрока);
		Парам.Вставить("ДолжникПараметр",Объект.Ссылка);
		Парам.Вставить("АвторПараметр",Пользователь);
		//Парам.Вставить("ДатаПараметр",ТекущаяДатаСеанса());
		Парам.Вставить("СотрудникПараметр",Пользователь);
		//Парам.Вставить("ТипКонтактаПараметр",Справочники.ТипыКонтактов.ЗвонокИсходящий);
		
		ОткрытьФорму("Документ.Контакт.Форма.ФормаДокумента",Парам,ЭтаФорма);
	    Оповестить("Событие1",Парам);


	
КонецПроцедуры




&НаСервере
Функция ЗаполнитьКонтактНаСервере(ДанныеФормы, Телефон = "") 
	
	
	ДокументКонтакт = Документы.Контакт.СоздатьДокумент();
	
	ДокументКонтакт.Автор = Пользователь;
	ДокументКонтакт.Дата = ТекущаяДатаСеанса();
	ДокументКонтакт.Должник = Объект.Ссылка;
	ДокументКонтакт.Сотрудник = Пользователь;
	ДокументКонтакт.ТипКонтакта = Справочники.ТипыКонтактов.ЗвонокИсходящий;
	

	тТелефоны = ДанныеФормы.Телефоны.Выгрузить();
	
	Если тТелефоны.Найти(Телефон, "Телефон") = Неопределено Тогда
		СтрокаТелефоны = тТелефоны.Добавить();
		СтрокаТелефоны.Телефон = Телефон;
	КонецЕсли;
	ДокументКонтакт.Телефоны.Загрузить(тТелефоны);
	
	ЗначениеВДанныеФормы(ДокументКонтакт, ДанныеФормы);
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если КоллективнаяРабота Тогда
		Если ВладелецФормы <> Неопределено Тогда
			МассивВладельцев = ПолучитьВладельцовФормы(Объект.Ссылка);
			Для каждого элементВладелец Из МассивВладельцев Цикл
				Оповестить("ЗакрытДолжник_" + ВладелецФормы.Имя, Объект.Ссылка);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВладельцовФормы(Должник)
	МассивВладельцев = Новый Массив;
	ДатаПоиска = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контакт.Ссылка КАК докКонтакт
	               |ИЗ
	               |	Документ.Контакт КАК Контакт
	               |ГДЕ
	               |	Контакт.Должник = &Должник
	               |	И Контакт.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаПоиска, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаПоиска, ДЕНЬ)";
	Запрос.УстановитьПараметр("ДатаПоиска", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Должник", Должник);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВладельцев.Добавить(Выборка.докКонтакт);
	КонецЦикла;
	
	Возврат МассивВладельцев;
КонецФункции


&НаСервере
Функция ПолучитьСудебныеСтатусы()

	
	
	стрВозвр="";
	
	
					       	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Договоры.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.Договоры КАК Договоры
						|ГДЕ
						|	Договоры.Владелец = &Владелец";
					
					Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						стрВозвр=стрВозвр+ФункцииДляОтчетов.СудебныйСтатусВр(Объект.Ссылка,ВыборкаДетальныеЗаписи.Ссылка,ТекущаяДата());
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
					
		
	  Возврат стрВозвр;

КонецФункции // ()


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	  
	
	  фспОткр=Ложь;
	
	   //ЗаполнитьФССП(Объект.Ссылка);
	   
	   РодительЮрСтатус=ПолучитьРеквизитВыбранногоЗначения(Объект.СудебныйСтатус);
	   
	   стр=Объект.СудебныйСтатус;
	   
	   стрсудст=ПолучитьСудебныеСтатусы();
	   
	   НадписьЮрСтатус="Юр.статус:"+Объект.СудебныйСтатус+Символы.ПС+стрсудст; 
	   
	   СудСтатусТест= "Юр.статус:"+Объект.СудебныйСтатус+" "+Формат(Объект.ДатаСудСтатус,"ДФ=dd.MM.yyyy")+Символы.ПС+стрсудст;
	   
	   Если ПолучитьДатаСудСтатус(стр) Тогда
	  
	  	     Элементы.ДатаСудСтатус.Видимость=Истина;
			 
			 НадписьЮрСтатус="Юр.статус:"+Объект.СудебныйСтатус+" "+Формат(Объект.ДатаСудСтатус,"ДФ=dd.MM.yyyy")+Символы.ПС+ПолучитьСудебныеСтатусы();
			 
			
			 
	  
	  КонецЕсли;
	  
	  Если АрхивВидимость Тогда
	  
		  Элементы.НадписьДоговоры.Видимость=Ложь;
		  Элементы.НадписьАрхив.Видимость=Истина;
		  
	  
	  КонецЕсли;
	  
	   //Получить_ТЗ_Из_ДинамическогоСписка("ПочтаШПИ"); 
	 //  
	 //  Для каждого стр  Из ПочтаШПИ_ТЗ Цикл
	 //  
	 //  	   НаименованиеШПИ=стр.Наименование;
	 //      ЖалобаКАС=стр.ЖалобаКАС;
	 //      ЗаявлениеОВозбужденииИсполнительногоПроизводства=стр.ЗаявлениеОВозбужденииИсполнительногоПроизводства;
	 //      ЗаявлениеОВыдачеСудебногоПриказа=стр.ЗаявлениеОВыдачеСудебногоПриказа;
	 //      ЗаявлениеОЗаменеСтороныВИП=стр.ЗаявлениеОЗаменеСтороныВИП;
	 //      ЗаявлениеОПроцессуальномПравопреемстве=стр.ЗаявлениеОПроцессуальномПравопреемстве;
	 //      ИсковоеЗаявление=стр.ИсковоеЗаявление;
	 //      ОбращениеОХодеИП_ШПИ=стр.ОбращениеОХодеИП;
	 //      ТребованиеОДосрочномПогашении=стр.ТребованиеОДосрочномПогашении;
	 //      УведомлениеОПереуступке=стр.УведомлениеОПереуступке;
	 //      
	 //  
	 //  КонецЦикла;
	 //  
	 //  
	   //Получить_ТЗ_Из_ДинамическогоСписка("Банкрот"); 
	 //  
	 //  
	 //  Для каждого стр  Из Банкрот_ТЗ Цикл
	 //        ФИО_Банкрот=стр.ФИО;
	 //   	 ДатаРождения_Банкрот=стр.ДатаРождения;
	 //   	 МестоРождения_Банкрот=стр.МестоРождения;
	 //   	 Регион_Банкрот=стр.Регион;
	 //   	 ИНН_Банкрот=стр.ИНН;
	 //   	 Адрес_Банкрот=стр.Адрес;
	 //   	 IDDebitor=стр.IDDebitor;
	 //   	 
	 //      
	 //КонецЦикла;	 
	 //
	 //		 
	   
	   
	   
КонецПроцедуры



   

&НаСервере
Процедура Получить_ТЗ_Из_ДинамическогоСписка(стрТЗ)
	
		Схема = Элементы[стрТЗ].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		Настройки = Элементы[стрТЗ].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема,Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если стрТЗ="ПочтаШПИ" Тогда
 			    ПочтаШПИ_ТЗ.Очистить();
        		ПочтаШПИ_ТЗ.Загрузить(Результат);
		КонецЕсли;
		
		
		Если стрТЗ="Банкрот" Тогда
			    ТЧБанкрот.Очистить();
 			    Банкрот_ТЗ.Очистить();
        		Банкрот_ТЗ.Загрузить(Результат);
				
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	БанкротыТЧ.НомерСтроки КАК НомерСтроки,
							|	БанкротыТЧ.НомерСудебногоДела КАК НомерСудебногоДела,
							|	БанкротыТЧ.ДатаВнесенияНомера КАК ДатаВнесенияНомера,
							|	БанкротыТЧ.НаименованиеСуда КАК НаименованиеСуда,
							|	БанкротыТЧ.ТипЗаявления КАК ТипЗаявления
							|ИЗ
							|	Справочник.Банкроты.ТЧ КАК БанкротыТЧ
							|ГДЕ
							|	БанкротыТЧ.Ссылка.Владелец = &Владелец";
						
						Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						     записьТЧ=ТЧБанкрот.Добавить();
							 записьТЧ.НомерСудебногоДела=ВыборкаДетальныеЗаписи.НомерСудебногоДела;
							 записьТЧ.ДатаВнесенияНомера=ВыборкаДетальныеЗаписи.ДатаВнесенияНомера;
							 
							 записьТЧ.НаименованиеСуда=ВыборкаДетальныеЗаписи.НаименованиеСуда;
							 записьТЧ.ТипЗаявления=ВыборкаДетальныеЗаписи.ТипЗаявления;
									
						КонецЦикла;
				
				
		КонецЕсли;
		
	//Возврат Результат;	
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьФССП(СсылкаДолжник)

	  Таб = Новый ТаблицаЗначений;   		   
	  Таб.Колонки.Добавить("exe_production");
      Таб.Колонки.Добавить("details");
	    
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФССП.exe_production КАК exe_production,
		|	ФССП.details КАК details,
		|	ФССП.subject_fssp КАК subject_fssp,
		|	ФССП.department КАК department,
		|	ФССП.bailiff КАК bailiff,
		|	ФССП.ip_end КАК ip_end
		|ИЗ
		|	Справочник.ФССП КАК ФССП
		|ГДЕ
		|	ФССП.Должник = &Должник";
	
	Запрос.УстановитьПараметр("Должник", СсылкаДолжник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		  НовСтрока = ФССП.Добавить();
		   
		  НовСтрока.exe_production=ВыборкаДетальныеЗаписи.exe_production;
		  НовСтрока.details=ВыборкаДетальныеЗаписи.details;
		  НовСтрока.subject_fssp=ВыборкаДетальныеЗаписи.subject_fssp;
		  НовСтрока.department=ВыборкаДетальныеЗаписи.department;
          НовСтрока.bailiff=ВыборкаДетальныеЗаписи.bailiff;
		  НовСтрока.ip_end=ВыборкаДетальныеЗаписи.ip_end;
		  
		  
		  
		
	КонецЦикла;
	
	  	
	   //Объект.ФССП.Загрузить(ТЗ);


	  //Возврат  СтрТЗ;
	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявлениеОПП(Команда)
	// Вставить содержимое обработчика.
	
	// Откроем форму справочника
	 	 	   
	    ФормаЗаявленияОПравеПреемственности= ПолучитьФорму("Справочник.ЗаявленияОПравеПреемственности.ФормаОбъекта",,Объект.Ссылка);
		
		ДанныеФормы = ФормаЗаявленияОПравеПреемственности.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
		ДанныеФормы.АдресРегистрацииДолжника=НайтиАдресРегистр(Объект.Ссылка);
		
		ДанныеФормы.НомерДоговораЦессии=НайтиДогЦессии(Объект.Ссылка);
		
		ДанныеФормы.ДатаДоговораЦессии=НайтиДатаДогЦессии(Объект.Ссылка);
		
		
		
		
		ФормаЗаявленияОПравеПреемственности.Открыть();
		
	
	
	
КонецПроцедуры

&НаСервере
Функция НайтиДатаДогЦессии(долж)

	  допреквДЦ=Справочники.ДополнительныеРеквизиты.НайтиПоНаименованию("Дата цессии");
	  
	  договЦ="";
	  
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеДанные.Реквизит КАК Реквизит,
		|	ДополнительныеДанные.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДополнительныеДанные КАК ДополнительныеДанные
		|ГДЕ
		|	ДополнительныеДанные.Владелец = &Владелец
		|	И ДополнительныеДанные.Реквизит = &Реквизит";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Реквизит", допреквДЦ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		договЦ=ВыборкаДетальныеЗаписи.Наименование;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА



	  
	  Возврат  договЦ;

КонецФункции // ()



&НаСервере
Функция НайтиДогЦессии(долж)

	  допреквДЦ=Справочники.ДополнительныеРеквизиты.НайтиПоНаименованию("Договор цессии");
	  
	  договЦ="";
	  
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеДанные.Реквизит КАК Реквизит,
		|	ДополнительныеДанные.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДополнительныеДанные КАК ДополнительныеДанные
		|ГДЕ
		|	ДополнительныеДанные.Владелец = &Владелец
		|	И ДополнительныеДанные.Реквизит = &Реквизит";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Реквизит", допреквДЦ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		договЦ=ВыборкаДетальныеЗаписи.Наименование;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА



	  
	  Возврат  договЦ;

КонецФункции // ()

	

&НаСервере
Функция НайтиМобильный(долж)
   //   Мобильный
   
     типМ=Справочники.ТипыТелефонов.НайтиПоНаименованию("Мобильный");
	 
	 
	 
	
	

КонецФункции // ()



&НаСервере
Функция НайтиАдресРегистр(долж)

	  типР=Справочники.ТипыАдресов.НайтиПоНаименованию("Регистрации");
	  
	  стрАдр="";
	  
	      	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адреса.Адрес КАК Адрес
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Владелец = &Владелец
		|	И Адреса.Тип = &Тип";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Тип", типР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		стрАдр=ВыборкаДетальныеЗаписи.Адрес;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	  
	  Возврат стрАдр;
	

КонецФункции // ()

	

&НаСервере
Функция НайтиНомДоговоров(долж)

	массивНом=Новый Массив;
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.НомерДоговора КАК НомерДоговора
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		
		массивНом.Добавить(ВыборкаДетальныеЗаписи.НомерДоговора);
		
	КонецЦикла;
	
	
	
	Возврат  массивНом;
	
	
	

КонецФункции // ()



	
	

&НаКлиенте
Процедура ДобавитьЗаявлениеВПФР(Команда)
	// Вставить содержимое обработчика.
	
	  	 	   
	    ФормаЗаявлениеВПФР= ПолучитьФорму("Справочник.ЗаявлениеВПФР.ФормаОбъекта",,Объект.Ссылка);
		
		ДанныеФормы = ФормаЗаявлениеВПФР.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
		ДанныеФормы.АдресРегистрацииДолжника=НайтиАдресРегистр(Объект.Ссылка);
		
		ДанныеФормы.НомерДоговораЦессии=НайтиДогЦессии(Объект.Ссылка);
		
		ДанныеФормы.ДатаДоговораЦессии=НайтиДатаДогЦессии(Объект.Ссылка);
		
		
		
		
		 ФормаЗаявлениеВПФР.Открыть();
		

	
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаявлениеОПП(Команда)
	// Вставить содержимое обработчика.
	
		 //ЗаявлениеОПравеПреемственности. 
		 
	  строкаТаблицы = Элементы.ЗаявлениеОПравеПреемственности.ТекущаяСтрока;
	  имяСправочника="ЗаявленияОПравеПреемственности";
      имяЭлемента="ЗаявлениеОПравеПреемственности";

	  
	  
	  Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		  
	  КонецЕсли;	  
	  
	   Элементы.ЗаявлениеОПравеПреемственности.Обновить();
	  
	
КонецПроцедуры




&НаКлиенте
Процедура ПечатьЗаявленияОПП(Команда)
	// Вставить содержимое обработчика.
	Сообщить("Будет");

КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаявлениеВПФР(Команда)
	// Вставить содержимое обработчика.
	 
	  строкаТаблицы = Элементы.ЗаявлениеВПФР1.ТекущаяСтрока;
	  имяСправочника="ЗаявлениеВПФР";
      имяЭлемента="ЗаявлениеВПФР1";

	  
	  Если строкаТаблицы<>Неопределено Тогда
		     
		    
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			  
			
			 
	  КонецЕсли;	  
	  
	   Элементы.ЗаявлениеВПФР1.Обновить();
	
КонецПроцедуры



&НаКлиенте
Процедура ПечатьЗаявлениеВПФР(Команда)
	// Вставить содержимое обработчика.
	Сообщить("Будет");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявлениеВБанк(Команда)
	// Вставить содержимое обработчика.
	 Сообщить("Будет");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаявлениеВБанк(Команда)
	// Вставить содержимое обработчика.
	Сообщить("Будет");
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявлениеВБанк(Команда)
	// Вставить содержимое обработчика.
	Сообщить("Будет");
КонецПроцедуры


&НаСервере
Функция НайтиНомерДог(дог)

	номер="";
	
	      	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.НомерДоговора КАК НомерДоговора
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", дог);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		 номер=ВыборкаДетальныеЗаписи.НомерДоговора;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	   Возврат номер;

КонецФункции // ()


&НаКлиенте
Процедура ПечатьЗаявлениеНаВыдачуСудебногоПриказа(Команда)
	// Вставить содержимое обработчика.
	
 	
          строкаТаблицы = Элементы.ЗаявлениеНаВыдачуСудебногоПриказа1.ТекущаяСтрока;
		   
		   данСтруктура=ПолучитьЗаявлениеНаВыдачуСудебногоПриказа(строкаТаблицы);

		   ДвоичныеДанные=ПолучитьФайлИзХранЗаявлениеНаВыдачуСудебногоПриказа();

		    страдррег=данСтруктура["АдресРегистрацииДолжника"];

		   
		     Если ДвоичныеДанные<>Неопределено  Тогда
				 
				 Попытка
				 
				 	    имяД=Объект.Фамилия+"_"+Объект.Имя+"_ЗаявНаВыдСудПриказа";
					 
					//Shell = Новый COMОбъект("WScript.Shell");
					//дирМоиД=Shell.SpecialFolders.Item("MyDocuments");
					//ИмяФайла=дирМоиД+"\"+имяД+".docx"; 	
					
								
					ИмяФайла=Строка(КаталогВременныхФайлов())+имяД+".docx";
					
					ВыбранныйФайл = Новый Файл(ИмяФайла);
					Если ВыбранныйФайл.Существует() Тогда
						
						УдалитьФайлы(ВыбранныйФайл);
						
					
					КонецЕсли; 

				 
				 	ДвоичныеДанные.Записать(ИмяФайла);
				  
					  MSWord = новый COMОбъект("Word.Application");
					 //Передаем текущие параметры форм в MSWord
					  MSWord.Documents.Open(ИмяФайла);	
					  MSWordDoc = MSWord.ActiveDocument();
					  
				 				  
					   MSWordDoc.Bookmarks("НаименованиеСуда").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   
					    наимсуда=Строка(данСтруктура["НаименованиеСуда"]);
					   
	                   MSWordDoc.Application.Selection.TypeText(наимсуда);
					   
					   
					   MSWordDoc.Bookmarks("АдресСуда").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(данСтруктура["АдресСуда"]);
					   
					   
					    фио=Объект.Фамилия+" "+Объект.Имя+" "+Объект.Отчество;
					
				        датаРождения=Формат(Объект.ДатаРождения, "ДЛФ=DD");
				      
					   MSWordDoc.Bookmarks("ФИОДолжИДР").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Size = 8;
					   MSWordDoc.Application.Selection.TypeText(фио+Символы.ПС+датаРождения);
					   
					   
					   
					   //Адрес_должника    можно ли отформатировать
					   
					   MSWordDoc.Bookmarks("Адрес_должника").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   //MSWordDoc.Application.Selection.FitTextWidth=20;
					   
					   MSWordDoc.Application.Selection.Range.ParagraphFormat.Alignment =0;
					   
					   //страдррег=данСтруктура["АдресРегистрацииДолжника"];
					   
					   
					   НужнаяСтрока=СтрЗаменить(страдррег,",,"," "); 
					   
	                   MSWordDoc.Application.Selection.TypeText(НужнаяСтрока);
					   
					   
					   //МестоРожденДолж
					   
					   MSWordDoc.Bookmarks("МестоРожденДолж").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Size = 7;
					   MSWordDoc.Application.Selection.Font.Bold =0;
					   MSWordDoc.Application.Selection.TypeText(данСтруктура["МестоРожденияДолж"]);
					   
					   
					   //ФИОДолж
					   
					   MSWordDoc.Bookmarks("ФИОДолж").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(фио);
					   
					   
					   //НомерДИДата
					   
					   
					   
					   номДог=НайтиНомерДог(данСтруктура["НомерКредитногоДоговора"]);
					   
					   номерДИДата=номДог+" от "+Формат(данСтруктура["ДатаКредитногоДоговора"],"ДЛФ=DD");
					   
					   
					   
					   MSWordDoc.Bookmarks("НомерДИДата").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(номерДИДата);
					  
					   
					   
					   //СуммаКркдита
					   
					   MSWordDoc.Bookmarks("СуммаКркдита").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(Строка(данСтруктура["СуммаКредита"])+" рублей");
					   
					   
					   //НомерДоговораИДата

					   MSWordDoc.Bookmarks("НомерДоговораИДата").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(номерДИДата);
					  

					   //ФИОДолжника
					   
					   MSWordDoc.Bookmarks("ФИОДолжника").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(фио);
					   
					   
					   //НомерДогИДата_2
					   
  				       MSWordDoc.Bookmarks("НомерДогИДата_2").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(номерДИДата);
					  

					   //ВсегоЗадолж
					   
					   
					   номдог= данСтруктура["НомерКредитногоДоговора"];
					   
					   всегоЗадолж=НайтиДолгДолжника(Объект.Ссылка,номдог);
					   
					   
					    
				      суммапр= ЧислоПрописью(всегоЗадолж, "Л=ru_RU;ДП=Истина;НП=Истина;", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж");
				  
				      сумчисло=Формат(Строка(всегоЗадолж),"ЧДЦ=2");
				  
				      сумчисло=сумчисло+" ( "+ суммапр+" ) ";

					   

					   MSWordDoc.Bookmarks("ВсегоЗадолж").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(сумчисло);
					   
					   
					   //СуммаЗадПер
					   MSWordDoc.Bookmarks("СуммаЗадПер").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(Формат(Строка(всегоЗадолж),"ЧДЦ=2")+" ");
					   
					   
					   //Госпошлина
					   
					   
					   госп= данСтруктура["СуммаГосПошлины"];
					   
					   MSWordDoc.Bookmarks("Госпошлина").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(Формат(Строка(госп),"ЧДЦ=2")+" рублей.");
					   
					   
					   
					   //ОстатокПросроченЗад
					   
					   прзадпоосндол=НайтиПросроченныйОсновнойДолг(Объект.Ссылка,номдог);
					   
					   
                       суммапр= ЧислоПрописью(прзадпоосндол, "Л=ru_RU;ДП=Истина;НП=Истина;", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж");
				    
					   сумчи=Строка(прзадпоосндол);
					   стрф=Формат(сумчи,"ЧДЦ=2");
					   стрф=ДобавитьНоль(стрф);
			  	       сумчислоПросроченЗад=стрф+" ( "+ суммапр+" ) ";
  					   
					   MSWordDoc.Bookmarks("ОстатокПросроченЗад").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
					   
					   
					   MSWordDoc.Application.Selection.TypeText(сумчислоПросроченЗад);
					  					   
					   					   
					   //ОстатокПоПроц
					   
					   прзадпоосндол=НайтиПросроченныеПроценты(Объект.Ссылка,номдог);
                       суммапр= ЧислоПрописью(прзадпоосндол, "Л=ru_RU;ДП=Истина;НП=Истина;", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж");
				    
					   сумчи=Строка(прзадпоосндол);
					   стрф=Формат(сумчи,"ЧДЦ=2");
					   стрф=ДобавитьНоль(стрф);
			  	       сумчислоОстатокПоПроц=стрф+" ( "+ суммапр+" ) ";

					   
					   MSWordDoc.Bookmarks("ОстатокПоПроц").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(сумчислоОстатокПоПроц);
					   

					   
					   //ОстатокНеустойка
					   
					    прзадпнеуст= НайтиНеустойка(Объект.Ссылка,номдог);
						суммапр= ЧислоПрописью(прзадпнеуст, "Л=ru_RU;ДП=Истина;НП=Истина;", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж");
				    
					   сумчи=Строка(прзадпнеуст);
					   стрф=Формат(сумчи,"ЧДЦ=2");
					   стрф=ДобавитьНоль(стрф);
			  	       сумчислоОстатокНеустойка=стрф+" ( "+ суммапр+" ) ";

					   
					   MSWordDoc.Bookmarks("ОстатокНеустойка").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(сумчислоОстатокНеустойка);
					   
					   
					   
					   
					   
					   //ФИОД_Прошу
					   
					    MSWordDoc.Bookmarks("ФИОД_Прошу").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(фио);
					   
					   
					   //СуммаЗад_Прошу
					   
					   
					   
					  
                       MSWordDoc.Bookmarks("СуммаЗад_Прошу").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   //MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(сумчисло);
					   
					    
					    
					   
					   //НомерДогИдата_Прошу
					   
					   MSWordDoc.Bookmarks("НомерДогИдата_Прошу").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
					   MSWordDoc.Application.Selection.Font.Underline=1;

	                   MSWordDoc.Application.Selection.TypeText(номерДИДата+" ");
					  
					   
					   //ФИО_Прошу_2
					   
					   MSWordDoc.Bookmarks("ФИО_Прошу_2").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(фио+" ");
					   
					   //СуммаПошлина_прошу
					   
					   
					  суммапр= ЧислоПрописью(данСтруктура["СуммаГосПошлины"], "Л=ru_RU;ДП=Истина;НП=Истина;", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж");
				  
				      сумчисло=Строка(данСтруктура["СуммаГосПошлины"]);
				  
				      сумчислоПошлина_прошу=сумчисло+" ( "+ суммапр+" ) ";

					   
					  
					   MSWordDoc.Bookmarks("СуммаПошлина_прошу").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   MSWordDoc.Application.Selection.Font.Bold =1;
	                   MSWordDoc.Application.Selection.TypeText(сумчислоПошлина_прошу);
					   
					   
					   
					   //НомерКредДогИДата_Прилож
					   MSWordDoc.Bookmarks("НомерКредДогИДата_Прилож").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   
					   
	                   MSWordDoc.Application.Selection.TypeText(номерДИДата+"(копия)");
					   
					   
					   
					     текДата=Формат(ТекущаяДата(),"ДЛФ=DD");	  
						   MSWordDoc.Bookmarks("ДатаТекущая").Select();
						   MSWordDoc.Application.Selection.Font.Color = 1;
		                   MSWordDoc.Application.Selection.TypeText(текДата);
						  

					   
					   
					
				        MSWord.Visible=1;
				        MSWord.Activate();

				 
				 Исключение
					 
					  ТекстОшибки = ОписаниеОшибки();
					  
					  Сообщить(ТекстОшибки);
					  Сообщить("Ошибка - ПечатьЗаявлениеНаВыдачуСудебногоПриказа");
					 
				 КонецПопытки;
				 
									
				 
			 КонецЕсли;	  
		  
		    
		  
		  
		  
	
	
	
	
	
КонецПроцедуры
		 

&НаСервере
Функция НайтиНеустойка(долж,номд)

	         	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.Неустойка КАК Неустойка
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номд);
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		суммаДолга=ВыборкаДетальныеЗаписи.Неустойка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	
		//суммаДолга=ВыборкаДетальныеЗаписи.Неустойка;

	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()

&НаСервере
Функция НайтиНеустойкаНаДату(долж,номд,дата_запр)

	         	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.Неустойка КАК Неустойка
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номд);
	Запрос.УстановитьПараметр("МоментВремени", дата_запр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		суммаДолга=ВыборкаДетальныеЗаписи.Неустойка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	
		//суммаДолга=ВыборкаДетальныеЗаписи.Неустойка;

	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()



&НаСервере
Функция НайтиПрочееНаДату(долж,номд,дата_запр)

	         	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.Прочее КАК Прочее
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номд);
	Запрос.УстановитьПараметр("МоментВремени", дата_запр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		суммаДолга=ВыборкаДетальныеЗаписи.Прочее;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	
		//суммаДолга=ВыборкаДетальныеЗаписи.Неустойка;

	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()



&НаСервере
Функция НайтиГосПошлинуНаДату(долж,номд,дата_запр)

	         	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.Госпошлина КАК Госпошлина
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номд);
	Запрос.УстановитьПараметр("МоментВремени", дата_запр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		суммаДолга=ВыборкаДетальныеЗаписи.Госпошлина;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	
		//суммаДолга=ВыборкаДетальныеЗаписи.Неустойка;

	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()





&НаСервере
Функция НайтиПросроченныеПроценты(долж,номд)

	     	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.ПросроченныеПроценты КАК ПросроченныеПроценты
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номд);
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		   суммаДолга=ВыборкаДетальныеЗаписи.ПросроченныеПроценты;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА




	//суммаДолга=ВыборкаДетальныеЗаписи.ПросроченныеПроценты;


	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()

&НаСервере
Функция НайтиПросроченныеПроцентыНаДату(долж,номд,дата_запр)

	     	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.ПросроченныеПроценты КАК ПросроченныеПроценты
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номд);
	Запрос.УстановитьПараметр("МоментВремени", дата_запр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		   суммаДолга=ВыборкаДетальныеЗаписи.ПросроченныеПроценты;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА




	//суммаДолга=ВыборкаДетальныеЗаписи.ПросроченныеПроценты;


	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()




&НаКлиенте
Функция ДобавитьНоль(стр)

	поз=Найти(стр,",");
	
	Если поз=0 Тогда
		 
		поз=Найти(стр,".");
		
		длстр=СтрДлина(стр);
		
		
		Если (длстр-поз)<2 Тогда
		
			   стр=стр+"0";
		
		КонецЕсли;
	
	Иначе
		
		длстр=СтрДлина(стр);
		
		
		Если (длстр-поз)<2 Тогда
		
			   стр=стр+"0";
		
		КонецЕсли;
	 	
	
	КонецЕсли;
	
	 Возврат стр;

КонецФункции // ()



&НаСервере
 Функция НайтиДолгДолжника(долж,дог)

	 
	 //  переработать - найти долг по договору   
	 
	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.ВсегоЗадолженность КАК ВсегоЗадолженность,
		|	ДанныеДоговоровСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", дог);
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА





	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

КонецФункции // ()


&НаСервере
 Функция НайтиДолгВсегоДолжникаНаДату(долж,дог,дата_запрос)

	 
	 //  переработать - найти долг по договору   
	 
	суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.ВсегоЗадолженность КАК ВсегоЗадолженность,
		|	ДанныеДоговоровСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", дог);
	Запрос.УстановитьПараметр("МоментВремени", дата_запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА





	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

КонецФункции // ()

   
   


&НаСервере
Функция НайтиПросроченныйОсновнойДолг(долж,номдог)

	
	 суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.ПросроченныйОсновнойДолг КАК ПросроченныйОсновнойДолг
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номдог);
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		  суммаДолга=ВыборкаДетальныеЗаписи.ПросроченныйОсновнойДолг;

	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА






	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()

&НаСервере
Функция НайтиПросроченныйОсновнойДолгНаДату(долж,номдог,дата_запр)

	
	 суммаДолга=0;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.ПросроченныйОсновнойДолг КАК ПросроченныйОсновнойДолг
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец = &Владелец
		|	И ДанныеДоговоровСрезПоследних.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Договор", номдог);
	Запрос.УстановитьПараметр("МоментВремени", дата_запр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		  суммаДолга=ВыборкаДетальныеЗаписи.ПросроченныйОсновнойДолг;

	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА






	   //суммаДолга=суммаДолга+ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		//суммаДолга=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
	   Возврат суммаДолга;

	

КонецФункции // ()




&НаСервере
Функция ПолучитьФайлИзХранЗаявлениеНаВыдачуСудебногоПриказа()

	    НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("Шаблон заявления о выдаче судебного  приказа, решения",ИСТИНА);
		
		Двоичные=Неопределено;
		 
		 Если НайтиШабл<>Неопределено Тогда
		 
		 	 Если НЕ НайтиШабл.ПУСТАЯ() Тогда  
 
        		Хран=НайтиШабл.ФайлШаблона;
        		Двоичные=Хран.Получить(); 
    			
    		КонецЕсли;
			
		 
		 КонецЕсли; 
    	
			
	  Возврат Двоичные;	
	
	

КонецФункции // ()




&НаСервере
Функция ПолучитьЗаявлениеНаВыдачуСудебногоПриказа(стр)

      данСтруктура=Новый Структура;
	  
	  данныеСтроки=Справочники.ЗаявлениеНаВыдачуСудебногоПриказа.НайтиПоКоду(стр.Код); 
	  
      данСтруктура.Вставить("НаименованиеСуда",данныеСтроки.НаименованиеСуда.Наименование);
	  данСтруктура.Вставить("АдресСуда",данныеСтроки.АдресСуда);
	  данСтруктура.Вставить("НомерКредитногоДоговора",данныеСтроки.НомерКредитногоДоговора);
	  данСтруктура.Вставить("ДатаКредитногоДоговора",данныеСтроки.ДатаКредитногоДоговора);
	  данСтруктура.Вставить("СуммаКредита",данныеСтроки.СуммаКредита);
	  данСтруктура.Вставить("МестоРожденияДолж",данныеСтроки.МестоРожденияДолж);
	  данСтруктура.Вставить("СуммаГосПошлины",данныеСтроки.СуммаГосПошлины);
	  
	  данСтруктура.Вставить("АдресРегистрацииДолжника",данныеСтроки.АдресРегистрацииДолжника);
	  

	  
	  Возврат  данСтруктура;
	  

КонецФункции // ()




&НаКлиенте
Процедура УдалитьЗаявлениеНаВыдачуСудебногоПриказа(Команда)
	// Вставить содержимое обработчика.
	
	
	строкаТаблицы = Элементы.ЗаявлениеНаВыдачуСудебногоПриказа1.ТекущаяСтрока;
	имяСправочника="ЗаявлениеНаВыдачуСудебногоПриказа";
	имяЭлемента="ЗаявлениеНаВыдачуСудебногоПриказа1";
	  
	  Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		    		     
		  
	  КонецЕсли;	  
	  
	   Элементы.ЗаявлениеНаВыдачуСудебногоПриказа1.Обновить();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявлениеНаВыдачуСудебногоПриказа(Команда)
	// Вставить содержимое обработчика.
	
	    
	     	   
	    ФормаЗаявлениеОВозбужденииИП= ПолучитьФорму("Справочник.ЗаявлениеНаВыдачуСудебногоПриказа.ФормаОбъекта",,Объект.Ссылка);
		
		ДанныеФормы = ФормаЗаявлениеОВозбужденииИП.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
		ДанныеФормы.АдресРегистрацииДолжника=НайтиАдресРегистр(Объект.Ссылка);
		
		
		
		
		ФормаЗаявлениеОВозбужденииИП.Открыть();

	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СудебныйСтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	   
	
	  РодительЮрСтатус=ПолучитьРеквизитВыбранногоЗначения(ВыбранноеЗначение);
	  
	  //ДатаСудСтатус
	  
	  Если ПолучитьДатаСудСтатус(ВыбранноеЗначение) Тогда
	  
	  	     Элементы.ДатаСудСтатус.Видимость=Истина;
		 Иначе
			 Элементы.ДатаСудСтатус.Видимость=Ложь;
			 
	  
	  КонецЕсли;
	  
	  
	  
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьДатаСудСтатус(вбз)

	датаЕсть=Ложь;
	
	спр=Справочники.СудебныеСтатусы.НайтиПоНаименованию("Возбуждено ИП");
	
	Если вбз=спр Тогда
		
		  датаЕсть=Истина;
		
	
	КонецЕсли;
	
	Возврат  датаЕсть;

КонецФункции // ()



&НаСервереБезКонтекста
Функция ПолучитьРеквизитВыбранногоЗначения(ВыбранноеЗначение)
    Возврат ВыбранноеЗначение.Родитель;
   
КонецФункции


&НаКлиенте
Процедура ДобавитьЗаявОВИП(Команда)
	// Вставить содержимое обработчика.
	
	
	 	   
	    ФормаЗаявлениеОВозбужденииИП= ПолучитьФорму("Справочник.ЗаявлениеОВозбужденииИП.ФормаОбъекта",,Объект.Ссылка);
		
		ДанныеФормы = ФормаЗаявлениеОВозбужденииИП.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
		//ДанныеФормы.АдресРегистрацииДолжника=НайтиАдресРегистр(Объект.Ссылка);
		//
		//ДанныеФормы.НомерДоговораЦессии=НайтиДогЦессии(Объект.Ссылка);
		//
		//ДанныеФормы.ДатаДоговораЦессии=НайтиДатаДогЦессии(Объект.Ссылка);
		//
		
		
		
		ФормаЗаявлениеОВозбужденииИП.Открыть();

	
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьЗаявОВИП(Команда)
	
	строкаТаблицы = Элементы.ЗаявлениеОВозбужденииИП1.ТекущаяСтрока;
	имяСправочника="ЗаявлениеОВозбужденииИП";
	имяЭлемента="ЗаявлениеОВозбужденииИП1";
	  
	  Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		    		     
		  
	  КонецЕсли;	  
	  
	   Элементы.ЗаявлениеОВозбужденииИП1.Обновить();
	
	
КонецПроцедуры
   


&НаКлиенте
Процедура ОповещениеУдалениеЗаявление(Результат, ДополнительныеПараметры) Экспорт

    Если Результат = КодВозвратаДиалога.Да Тогда 
		
		Если ДополнительныеПараметры.ИмяСправочника="ДоговорыСудебныеСтатусы"  Тогда
			
			  УдалитьИзРегистраДогСудСтатус(ДополнительныеПараметры.СтрокаТаблицы,ДополнительныеПараметры.ИмяСправочника);
		
		КонецЕсли;
		
		УдалитьЗаявлениеНаСервере(ДополнительныеПараметры.СтрокаТаблицы,ДополнительныеПараметры.ИмяСправочника);
		
		Элементы[ДополнительныеПараметры.ИмяЭлемента].Обновить();		    
		
	КонецЕсли;
	

КонецПроцедуры


&НаСервере
Процедура УдалитьЗаявлениеНаСервере(стр,имяспр)

	 
	 СтандартнаяОбработка = Ложь;
	 спр=Справочники[имяспр].НайтиПоКоду(стр.Код); 
	 спр.Получитьобъект().Удалить();
	 
	 
	 // Удалить регистр 
	
  
КонецПроцедуры


&НаСервере
Функция ПолучитьЗаявлениеОВозбужденииИП(стр)
	
	  данСтруктура=Новый Структура;
	  
	  данныеСтроки=Справочники.ЗаявлениеОВозбужденииИП.НайтиПоКоду(стр.Код); 
	  
	  
	  данСтруктура.Вставить("НаименованиеОИСП",данныеСтроки.НаименованиеОИСП);
	  
	  данСтруктура.Вставить("АдресОИСП",данныеСтроки.АдресОИСП);
	  
	  данСтруктура.Вставить("НомерИспЛиста",данныеСтроки.НомерИспЛиста);
	  
	  данСтруктура.Вставить("ДатаИспЛиста",данныеСтроки.ДатаИспЛиста);
	  
	  данСтруктура.Вставить("НаименованиеСуда",данныеСтроки.НаименованиеСуда);
	  
	  данСтруктура.Вставить("НомерДела",данныеСтроки.НомерДелаСуд);
	  
	  данСтруктура.Вставить("АдресДолжникаДляДок",данныеСтроки.АдресДолжникаДляДок);
	  
	  данСтруктура.Вставить("МестоРаботыДолжДляДок",данныеСтроки.МестоРаботыДолжДляДок);
	  
	  данСтруктура.Вставить("ТелефонДолжДляДок",данныеСтроки.ТелефонДолжДляДок);
	  
	  
	  данСтруктура.Вставить("СуммаДолга",данныеСтроки.СуммаДолга);
	  
	  данСтруктура.Вставить("ДатаПодачиЗаявления",данныеСтроки.ДатаПодачиЗаявления);
	  
	  данСтруктура.Вставить("Вид",данныеСтроки.Вид);
	  
	  
	  Возврат данСтруктура;
	  

КонецФункции // ()



&НаКлиенте
Процедура ПечатьЗаявОВИП(Команда)
	// Вставить содержимое обработчика.
	
	//   Форму выбора печати.... Заявление о возбуждении ИП (исполнительный лист-впервые)
	
	      строкаТаблицы = Элементы.ЗаявлениеОВозбужденииИП1.ТекущаяСтрока;
		   
		  данСтруктура=ПолучитьЗаявлениеОВозбужденииИП(строкаТаблицы);

		  // найти адрес
		  
		  адррег= НайтиАдресРегистр(Объект.Ссылка);
		  
		  Если адррег="" Тогда
		  
		  	    адррег="Нет адреса регистрации";
		  
		  КонецЕсли;
		  
	//Если Впервые Тогда
		
		
		      
 		
			  ДвоичныеДанные=ПолучитьФайлИзХран(данСтруктура["Вид"],Впервые);

			  Если ДвоичныеДанные<>Неопределено  Тогда
				  
				  
				Попытка
				
					имяД=Объект.Фамилия+"_"+Объект.Имя+"_ЗаявОВозбИП";
				  
				 
				//Shell = Новый COMОбъект("WScript.Shell");
				//дирМоиД=Shell.SpecialFolders.Item("MyDocuments");
				//
				
				//ИмяФайла=дирМоиД+"\"+имяД+".docx"; 	
				
				
				
							
				ИмяФайла=Строка(КаталогВременныхФайлов())+имяД+".docx";
				
				ВыбранныйФайл = Новый Файл(ИмяФайла);
				Если ВыбранныйФайл.Существует() Тогда
					
					УдалитьФайлы(ВыбранныйФайл);
					
				
				КонецЕсли; 
				
				
				ДвоичныеДанные.Записать(ИмяФайла);
				  
				  MSWord = новый COMОбъект("Word.Application");
				 //Передаем текущие параметры форм в MSWord
				  MSWord.Documents.Open(ИмяФайла);	
				  MSWordDoc = MSWord.ActiveDocument();
				  
				 				  
				   MSWordDoc.Bookmarks("НаименованиеОИСП").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["НаименованиеОИСП"]);
				   
				   
				    MSWordDoc.Bookmarks("АдресОИСП").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["АдресОИСП"]);
				  
				   
				   MSWordDoc.Bookmarks("ФИО").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   фио=Объект.Фамилия+" "+Объект.Имя+" "+Объект.Отчество;
                   MSWordDoc.Application.Selection.TypeText(фио);
				   
				   
				   
				   MSWordDoc.Bookmarks("ДатаРож").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   датРож=Объект.ДатаРождения;
				   
				   дат= Формат(датРож, "ДЛФ=ДД");
                   MSWordDoc.Application.Selection.TypeText(дат);
				  
				   
				   
				   
				   
				   MSWordDoc.Bookmarks("АдресРегистрации").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   MSWordDoc.Application.Selection.TypeText(данСтруктура["АдресДолжникаДляДок"]);
				   
                   
				   
				   //НомерИспЛиста 
				   
  			       MSWordDoc.Bookmarks("НомерИспЛиста").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   НомерИспЛистаД=данСтруктура["НомерИспЛиста"]+" от "+Формат(данСтруктура["ДатаИспЛиста"],"ДЛФ=ДД");
				   
                   MSWordDoc.Application.Selection.TypeText(НомерИспЛистаД);
				  

				   //НаименованиеСуда
				   
				   
		           MSWordDoc.Bookmarks("НаименованиеСуда").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   наимсуда=Строка(данСтруктура["НаименованиеСуда"]);
				   
                   MSWordDoc.Application.Selection.TypeText(наимсуда+" ");
				  

				   //НомерДела
				   
				   MSWordDoc.Bookmarks("НомерДела").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["НомерДела"]+" ");
				  

				   //СведенияОДолжнике
				   
				   СведенияОДолжнике=фио+", "+ данСтруктура["АдресДолжникаДляДок"]+", "+данСтруктура["ТелефонДолжДляДок"]+" , "+данСтруктура["МестоРаботыДолжДляДок"];
				   
				   MSWordDoc.Bookmarks("СведенияОДолжнике").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(СведенияОДолжнике+" ");
				  

				   
				   //СуммаДолга
				   
				  суммапр= ЧислоПрописью(данСтруктура["СуммаДолга"], "Л=ru_RU;ДП=Истина;НП=Истина;", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж");
				  
				  сумчисло=Строка(данСтруктура["СуммаДолга"]);
				  
				  сумчисло=сумчисло+" ( "+ суммапр+" ) ";
				  
				  
				   MSWordDoc.Bookmarks("СуммаДолга").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   MSWordDoc.Application.Selection.TypeText(сумчисло);
				   
				   
				   //МестоРаботыДолж
				   
				   MSWordDoc.Bookmarks("МестоРаботыДолж").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText("Место работы: "+ данСтруктура["МестоРаботыДолжДляДок"]);
				   
				   
				   
				   //ТелефонДолж
				   
				   MSWordDoc.Bookmarks("ТелефонДолж").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText("Телефон: "+ данСтруктура["ТелефонДолжДляДок"]);
				   

				   
					//НомерИспЛистПрошу
				   
				   //MSWordDoc.Bookmarks("НомерИспЛистПрошу").Select();
				   //MSWordDoc.Application.Selection.Font.Color = 1;
				   //
				   //НомерИспЛистаД=данСтруктура["НомерИспЛиста"]+" от "+Формат(данСтруктура["ДатаИспЛиста"],"ДЛФ=ДД");
				   //
				   //MSWordDoc.Application.Selection.TypeText(НомерИспЛистаД);
				  
//
				   //ФИОПрошу
				   
				   //MSWordDoc.Bookmarks("ФИОПрошу").Select();
				   //MSWordDoc.Application.Selection.Font.Color = 1;
				   //фио=Объект.Фамилия+" "+Объект.Имя+" "+Объект.Отчество;
				   //MSWordDoc.Application.Selection.TypeText(фио+" , "+дат);
				   //
				   
					//НомерИспЛистаПеречень
				   

				   MSWordDoc.Bookmarks("НомерИспЛистаПеречень").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   НомерИспЛистаД=данСтруктура["НомерИспЛиста"]+" от "+Формат(данСтруктура["ДатаИспЛиста"],"ДЛФ=ДД");
				   
                   MSWordDoc.Application.Selection.TypeText(" № "+НомерИспЛистаД);
				  

				   //ДатаПодачиЗаявления
				   
         		   MSWordDoc.Bookmarks("ДатаПодачиЗаявления").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(Формат(данСтруктура["ДатаПодачиЗаявления"],"ДЛФ=ДД"));
				   

				   //
				   //текДата=Формат(ТекущаяДата(),"ДЛФ=DD");	  
				   //MSWordDoc.Bookmarks("ДатаТекущая").Select();
				   //MSWordDoc.Application.Selection.Font.Color = 1;
				   //MSWordDoc.Application.Selection.TypeText(текДата);
				  
				   
				   
				  
				  MSWord.Visible=1;
				  MSWord.Activate();
				  
				   //Закрытие документа
				   //MSWord.Application.Quit();
				  
				 

				
				Исключение
					
					Сообщить("Ошибка----- ПечатьЗаявОВИП");
					ТекстОшибки = ОписаниеОшибки();
					Сообщить(ТекстОшибки);
					
					
				КонецПопытки;  
				  
				  
				
			  	
			  
			  КонецЕсли;
			
			
		
	
	//Иначе
		
		
		
		 //Заявление о возбуждении ИП (исполнительный лист-повторно)
		
		
		 //Сообщить("Повторно");
	
	//КонецЕсли;
	
	
	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьФайлИзХран(видиспд,впер)
	
	   Если видиспд=Перечисления.ВидыИспДокументов.ИсполнительныйЛист И впер  Тогда
	   
	   	      НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("Заявление о возбуждении ИП (исполнительный лист-впервые)",ИСТИНА);
    	
	   
	   КонецЕсли;
	   
	   
	   Если видиспд=Перечисления.ВидыИспДокументов.ИсполнительныйЛист И НЕ впер  Тогда
	   
	   	      НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("Заявление о возбуждении ИП (исполнительный лист-повторно)",ИСТИНА);
    	
	   
	   КонецЕсли;
	   
	   
	   Если видиспд=Перечисления.ВидыИспДокументов.СудебныйПриказ И впер  Тогда
	   
	   	      НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("Заявление о возбуждении ИП (судебный приказ-впервые)",ИСТИНА);
    	
	   
	   КонецЕсли;
	   
	   
	   Если видиспд=Перечисления.ВидыИспДокументов.СудебныйПриказ И НЕ впер  Тогда
	   
	   	      НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("Заявление о возбуждении ИП (судебный приказ-повторно)",ИСТИНА);
    	
	   
	   КонецЕсли;
	   
	   
	   
	   
	   
	
         Двоичные=Неопределено;
		 
		 Если НайтиШабл<>Неопределено Тогда
		 
		 	 Если НЕ НайтиШабл.ПУСТАЯ() Тогда  
 
        		Хран=НайтиШабл.ФайлШаблона;
        		Двоичные=Хран.Получить(); 
    			
    		КонецЕсли;
			

		 
		 КонецЕсли; 
    	
    	  			
			
			
			
	  Возврат Двоичные;		
	

КонецФункции // ()



&НаКлиенте
Процедура ДобавитьОбрОХодеИП(Команда)
	// Вставить содержимое обработчика.
	    ФормаЗаявленияОбращениеОХодеИП= ПолучитьФорму("Справочник.ЗаявленияОбращениеОХодеИП.ФормаОбъекта",,Объект.Ссылка);
		
		ДанныеФормы = ФормаЗаявленияОбращениеОХодеИП.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
		//ДанныеФормы.АдресРегистрацииДолжника=НайтиАдресРегистр(Объект.Ссылка);
		
		ФормаЗаявленияОбращениеОХодеИП.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьОбрОХодеИП(Команда)
	// Вставить содержимое обработчика.
	
	
     строкаТаблицы = Элементы.ОбращениеОХодеИП.ТекущаяСтрока;
	 имяСправочника="ЗаявленияОбращениеОХодеИП";
	 имяЭлемента="ОбращениеОХодеИП";
	 
	  Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		  
	  КонецЕсли;	  
	  
	   ЭтаФорма.Элементы.ОбращениеОХодеИП.Обновить();
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьОбрОХодеИП(Команда)
	// Вставить содержимое обработчика.
	
	      строкаТаблицы = Элементы.ОбращениеОХодеИП.ТекущаяСтрока;
		  данСтруктура=ПолучитьЗаявленияОбращениеОХодеИП(строкаТаблицы);

		  
		  
		  //// найти адрес
		  
		  адррег= НайтиАдресРегистр(Объект.Ссылка);
		  
		  Если адррег="" Тогда
		  
		  	    адррег="Нет адреса регистрации";
		  
		  КонецЕсли;
		  
		  
		  
		  Если ЭКСПООбращениеОходеИП=Истина Тогда
			  
				
				ДвоичныеДанные=ПолучитьФайлИзХранОбрОХодеИП(ЭКСПООбращениеОходеИП);
				
				Если ДвоичныеДанные<>Неопределено  Тогда
					
					Попытка
					
						имяД=Объект.Фамилия+"_"+Объект.Имя+"_ОбрОХодеИПЭкспо";
						
						ИмяФайла=Строка(КаталогВременныхФайлов())+имяД+".docx";
						
						 ВыбранныйФайл = Новый Файл(ИмяФайла);
							Если ВыбранныйФайл.Существует() Тогда
								
								УдалитьФайлы(ВыбранныйФайл);
								
							
							КонецЕсли; 

							
							
  	 	    		ДвоичныеДанные.Записать(ИмяФайла);
			
				  
					  MSWord = новый COMОбъект("Word.Application");
					 //Передаем текущие параметры форм в MSWord
					  MSWord.Documents.Open(ИмяФайла);	
					  MSWordDoc = MSWord.ActiveDocument();
					  
				  
					 
					   MSWordDoc.Bookmarks("НаименованиеФССП").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(данСтруктура["НаименованиеФССП"]);
					 
	
							
					   MSWordDoc.Bookmarks("АдресФССП").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(данСтруктура["АдресФССП"]);
				   
 
					     фио=Объект.Фамилия+" "+Объект.Имя+" "+Объект.Отчество;
					
				         датаРождения=Формат(Объект.ДатаРождения, "ДЛФ=DD");
				   
				   
					   MSWordDoc.Bookmarks("ФИОИГР").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(фио+","+датаРождения);
					   
					     MSWordDoc.Bookmarks("АдресРегистрации").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(адррег);

					  
					   
					   MSWordDoc.Bookmarks("НаименованиеСуда").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
					   
					   стрнаимсуда=Строка(данСтруктура["НаименованиеСуда"]);
					   
					   MSWordDoc.Application.Selection.TypeText(стрнаимсуда);

					   
					   
					   MSWordDoc.Bookmarks("НомерДелаИДата").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(" "+данСтруктура["НомерДелаИДата"]+"  ");
					   
					   
					   
					    MSWordDoc.Bookmarks("ФИОИспонителяИн").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["НаименованиеФССП"]+" "+ данСтруктура["ФИОИспонителяИн"]);
				   

					   
					//ФИОДолж		
				   
				       MSWordDoc.Bookmarks("ФИОДолж").Select();
					   MSWordDoc.Application.Selection.Font.Color = 1;
	                   MSWordDoc.Application.Selection.TypeText(фио);
					  

					        //ДатаТекущая
					  
				   текДата=Формат(ТекущаяДата(),"ДЛФ=DD");	  
				   MSWordDoc.Bookmarks("ДатаТекущая").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(текДата);
				  

					   
					   
					     
			    	MSWord.Visible=1;
				    MSWord.Activate();

				   
						
						
					
					Исключение
						 Сообщить("Ошибка --- ПечатьОбрОХодеИПЭкспо");

						
					КонецПопытки;
					
					
				
				КонецЕсли;
				
				
				
				
			  
			  
		  Иначе
			  
			   ДвоичныеДанные=ПолучитьФайлИзХранОбрОХодеИП(ЭКСПООбращениеОходеИП);

   		    Если ДвоичныеДанные<>Неопределено  Тогда
				
				Попытка
				
				 имяД=Объект.Фамилия+"_"+Объект.Имя+"_ОбрОХодеИП";
				
				
				
				//  
				//Shell = Новый COMОбъект("WScript.Shell");
				//дирМоиД=Shell.SpecialFolders.Item("MyDocuments");
				//
				
				//ИмяФайла=дирМоиД+"\"+имяД+".docx"; 		  
				
				ИмяФайла=Строка(КаталогВременныхФайлов())+имяД+".docx";
				
				
				
				ВыбранныйФайл = Новый Файл(ИмяФайла);
				Если ВыбранныйФайл.Существует() Тогда
					
					УдалитьФайлы(ВыбранныйФайл);
					
				
				КонецЕсли; 
				
				
				ДвоичныеДанные.Записать(ИмяФайла);
			
				  
				  MSWord = новый COMОбъект("Word.Application");
				 //Передаем текущие параметры форм в MSWord
				  MSWord.Documents.Open(ИмяФайла);	
				  MSWordDoc = MSWord.ActiveDocument();
				  
				  
				 
				   MSWordDoc.Bookmarks("НаименованиеФССП").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["НаименованиеФССП"]);
				 
				   
				   MSWordDoc.Bookmarks("АдресФССП").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["АдресФССП"]);
				   
				   
				   MSWordDoc.Bookmarks("НаименованиеСуда").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   стрнаимсуда=Строка(данСтруктура["НаименованиеСуда"]);
				   
				   MSWordDoc.Application.Selection.TypeText(стрнаимсуда);
				   
				   //MSWordDoc.Application.Selection.TypeText(данСтруктура["НаименованиеСуда"]);
				   
				   
				   MSWordDoc.Bookmarks("НомерДелаИДата").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(" "+данСтруктура["НомерДелаИДата"]+"  ");
				   
				   
				   MSWordDoc.Bookmarks("ФИОИспонителяИн").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
				   
				   
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["НаименованиеФССП"]+" "+ данСтруктура["ФИОИспонителяИн"]);
				   
				   
				   MSWordDoc.Bookmarks("НомерИПИДата").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(данСтруктура["НомерИПИДата"]);
				   
				   
				   MSWordDoc.Bookmarks("АдресРегистрации").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(адррег);
				   
				   
				   фио=Объект.Фамилия+" "+Объект.Имя+" "+Объект.Отчество;
					
				   датаРождения=Формат(Объект.ДатаРождения, "ДЛФ=DD");
				   
				   
				   MSWordDoc.Bookmarks("ФИОИГР").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(фио+","+датаРождения);
				   
				      //ДатаТекущая
					  
				   текДата=Формат(ТекущаяДата(),"ДЛФ=DD");	  
				   MSWordDoc.Bookmarks("ДатаТекущая").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(текДата);
				  
				    
			    	MSWord.Visible=1;
				    MSWord.Activate();
				
					 //Закрытие документа
				   //MSWord.Application.Quit();
				  

				
				Исключение
					Сообщить("Ошибка --- ПечатьОбрОХодеИП");
					
				КонецПопытки;
				
								 

					
				 
			КонецЕсли;

			  
			  
		  	
		  
		  КонецЕсли;
		  

		  //  Получить файл шаблон из хранилища
		  
		  
		   	  
		  
		   		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлИзХранОбрОХодеИП(експо)
	
	     Если експо=Истина Тогда
		 
		 	 НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("ЭКСПО Обращение о ходе ИП",ИСТИНА);
		 
		 Иначе
		 
		 	 НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("Обращение о ходе ИП",ИСТИНА);
		 
		 КонецЕсли; 
		 
	
	       
	  	
		Двоичные=Неопределено;
		 
		 Если НайтиШабл<>Неопределено Тогда
		 
		 	 Если НЕ НайтиШабл.ПУСТАЯ() Тогда  
 
        		Хран=НайтиШабл.ФайлШаблона;
        		Двоичные=Хран.Получить(); 
    			
    		КонецЕсли;
			
		 
		 КонецЕсли; 
    	
			
	  Возврат Двоичные;		
	
КонецФункции // ()


&НаСервере
Функция ПолучитьЗаявленияОбращениеОХодеИП(стр)

	     
		 
		 
		 
	     данСтруктура=Новый Структура;
	     данныеСтроки=Справочники.ЗаявленияОбращениеОХодеИП.НайтиПоКоду(стр.Код); 
	  
	     данСтруктура.Вставить("НаименованиеФССП",данныеСтроки.НаименованиеФССП);
	     данСтруктура.Вставить("АдресФССП",данныеСтроки.АдресФССП);
		 данСтруктура.Вставить("НаименованиеСуда",данныеСтроки.НаименованиеСуда);
	     данСтруктура.Вставить("НомерДелаИДата",данныеСтроки.НомерДелаИДата);
		 
		 
		 
		 данСтруктура.Вставить("ФИОИспонителяИн",данныеСтроки.ФИОИспонителяИн);
	  
	     данСтруктура.Вставить("НомерИПИДата",данныеСтроки.НомерИПИДата);
		 
	
	   Возврат данСтруктура;

	
КонецФункции // ()

&НаКлиенте
Процедура ДобавитьЗаявлениеОЗаменеСтороныВзыскателяВИсполнительномПроизводстве(Команда)
	
	
     	ФормаЗаявленияЗаменаСтороныИП= ПолучитьФорму("Справочник.ЗаявленияЗаменаСтороныИП.ФормаОбъекта",,Объект.Ссылка);
		
		ДанныеФормы = ФормаЗаявленияЗаменаСтороныИП.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
		ФормаЗаявленияЗаменаСтороныИП.Открыть();

	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаявлениеОЗаменеСтороныВзыскателяВИсполнительномПроизводстве(Команда)
	// Вставить содержимое обработчика.
	
	 строкаТаблицы = Элементы.ЗаявленияЗаменаСтороныИП.ТекущаяСтрока;
	 имяСправочника="ЗаявленияЗаменаСтороныИП";
	 имяЭлемента="ЗаявленияЗаменаСтороныИП";
	 
	  Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		  
	  КонецЕсли;	  
	  
	   ЭтаФорма.Элементы.ЗаявленияЗаменаСтороныИП.Обновить();


	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявлениеОЗаменеСтороныВзыскателяВИсполнительномПроизводстве(Команда)
	// Вставить содержимое обработчика.
	
	
	   строкаТаблицы = Элементы.ЗаявленияЗаменаСтороныИП.ТекущаяСтрока;
	   
    	данСтруктура=ПолучитьЗаявленияЗаменаСтороныИП(строкаТаблицы);

		
		 фио=Объект.Фамилия+" "+Объект.Имя+" "+Объект.Отчество;
					
          датаРождения=Формат(Объект.ДатаРождения, "ДЛФ=DD");

		  
		 работаМ= НайтиМестоРаботыДолж(Объект.Ссылка);
		 
		 
		 
		  
		 
		  //// найти адрес
		  
		  адррег= НайтиАдресРегистр(Объект.Ссылка);
		  
		  Если адррег="" Тогда
		  
		  	    адррег="Нет адреса регистрации";
		  
		  КонецЕсли;
		  

		  //  Получить файл шаблон из хранилища
		  
		  
		    ДвоичныеДанные=ПолучитьФайлИзХранЗаменаСтороныИП();

			
			 Если ДвоичныеДанные<>Неопределено  Тогда
				 
				 Попытка
					 
					    имяД=Объект.Фамилия+"_"+Объект.Имя+"_ОЗаменеСтороныВзыскателяВИП";
				
				
						
						//  
						//Shell = Новый COMОбъект("WScript.Shell");
						//дирМоиД=Shell.SpecialFolders.Item("MyDocuments");
						//
						
						//ИмяФайла=дирМоиД+"\"+имяД+".docx"; 		  
						
						ИмяФайла=Строка(КаталогВременныхФайлов())+имяД+".docx";
						
						
						
					    	ВыбранныйФайл = Новый Файл(ИмяФайла);
							 
						
							Если ВыбранныйФайл.Существует() Тогда
								
								УдалитьФайлы(ВыбранныйФайл);
								
							
							КонецЕсли; 
							
							
							ДвоичныеДанные.Записать(ИмяФайла);

							
											  
							  MSWord = новый COMОбъект("Word.Application");
							 //Передаем текущие параметры форм в MSWord
							  MSWord.Documents.Open(ИмяФайла);	
							  MSWordDoc = MSWord.ActiveDocument();
							  
							  
							 
						   MSWordDoc.Bookmarks("НачальникОтдела").Select();
						   MSWordDoc.Application.Selection.Font.Color = 1;
			               MSWordDoc.Application.Selection.TypeText(данСтруктура["НачальникОтделаСП"]);
						   
						   
						   MSWordDoc.Bookmarks("АдресНачальникаОтдела").Select();
						   MSWordDoc.Application.Selection.Font.Color = 1;
			               MSWordDoc.Application.Selection.TypeText(данСтруктура["АдресНачальникаСП"]);
						   
						   
     					   MSWordDoc.Bookmarks("ФИОИДР").Select();
	   					   MSWordDoc.Application.Selection.Font.Color = 1;
						   MSWordDoc.Application.Selection.TypeText(фио+Символы.ПС+датаРождения);
						   
						   
							//АдресФИО  
						   
						   MSWordDoc.Bookmarks("АдресФИО").Select();
	   					   MSWordDoc.Application.Selection.Font.Color = 1;
						   MSWordDoc.Application.Selection.TypeText(адррег);
						 
						   
						   //НомерДела
						   
						   MSWordDoc.Bookmarks("НомерДела").Select();
						   MSWordDoc.Application.Selection.Font.Color = 1;
			               MSWordDoc.Application.Selection.TypeText(" "+данСтруктура["НомерДела"]+".");
						   
						   
						   //ФиоСведенияОд
						   
						      
     					   MSWordDoc.Bookmarks("ФиоСведенияОд").Select();
	   					   MSWordDoc.Application.Selection.Font.Color = 1;
						   MSWordDoc.Application.Selection.TypeText(фио+" "+датаРождения);
						   
						   
						   //АдресДолжникаСведения
						   
						    MSWordDoc.Bookmarks("АдресДолжникаСведения").Select();
	   					   MSWordDoc.Application.Selection.Font.Color = 1;
						   MSWordDoc.Application.Selection.TypeText(адррег);
						   
						   
						   
							//МестоРаботы

							MSWordDoc.Bookmarks("МестоРаботы").Select();
	   					   MSWordDoc.Application.Selection.Font.Color = 1;
						   MSWordDoc.Application.Selection.TypeText(работаМ[0]);
						   
						   
						      //ДатаТекущая
					  
				   текДата=Формат(ТекущаяДата(),"ДЛФ=DD");	  
				   MSWordDoc.Bookmarks("ДатаТекущая").Select();
				   MSWordDoc.Application.Selection.Font.Color = 1;
                   MSWordDoc.Application.Selection.TypeText(текДата);
				  
							
			    	MSWord.Visible=1;
				    MSWord.Activate();

							
						
					 
					 
				 Исключение
					Сообщить("Ошибка --- ПечатьЗаявлениеОЗаменеСтороныВзыскателяВИсполнительномПроизводстве");
					
				КонецПопытки;
				
				 
				 
			 КонецЕсли;	 
		
		 
			 
	
КонецПроцедуры



&НаСервере
Функция ПолучитьЗаявленияЗаменаСтороныИП(стр)

		 
	     данСтруктура=Новый Структура;
	     данныеСтроки=Справочники.ЗаявленияЗаменаСтороныИП.НайтиПоКоду(стр.Код); 
	  
	     данСтруктура.Вставить("НачальникОтделаСП",данныеСтроки.НачальникОтделаСП);
	     данСтруктура.Вставить("АдресНачальникаСП",данныеСтроки.АдресНачальникаСП);
		 данСтруктура.Вставить("НомерДела",данныеСтроки.НомерДела);
	     
	
	     Возврат данСтруктура;

	
КонецФункции // ()


&НаСервере
Функция ПолучитьФайлИзХранЗаменаСтороныИП ()
          
	    НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию("замена стороны ИП (шаблон)",ИСТИНА);
		
		Двоичные=Неопределено;
		 
		 Если НайтиШабл<>Неопределено Тогда
		 
		 	 Если НЕ НайтиШабл.ПУСТАЯ() Тогда  
 
        		Хран=НайтиШабл.ФайлШаблона;
        		Двоичные=Хран.Получить(); 
    			
    		КонецЕсли;
			
		 
		 КонецЕсли; 
    	
			
	  Возврат Двоичные;		
	
  КонецФункции // ()
  
  
&НаСервере
Функция НайтиМестоРаботыДолж(долж)
	
	   массивМРаб=Новый Массив;

	   
	   //Место работы
	   
	   
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеДанные.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДополнительныеДанные КАК ДополнительныеДанные
		|ГДЕ
		|	ДополнительныеДанные.Владелец = &Владелец
		|	И ДополнительныеДанные.Реквизит.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Наименование", "Место работы");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		массивМРаб.Добавить(ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	  Если массивМРаб.Количество() = 0 Тогда
	  
	  	    массивМРаб.Добавить("");
	  
	  КонецЕсли;

	 Возврат   массивМРаб;
	   
	

КонецФункции // ()

&НаКлиенте
Процедура ПечатьКарточки(Команда)
	// Вставить содержимое обработчика.
	
	
		Таблица = Новый ТабличныйДокумент;
		
		ЗаполнитьКарточкуНаСервере(Таблица, Объект.Ссылка);
		
		Таблица.Защита = Истина;
		Таблица.ТолькоПросмотр = Истина;
		Таблица.Показать("Карточка " + Строка(Объект.Ссылка));

	
	
КонецПроцедуры




&НаСервере
Процедура ЗаполнитьКарточкуНаСервере(Таблица, Знач ТекДолжник)
	
	ОбработкаОтчета = Отчеты.КарточкаДолжника.Создать();
	ОбработкаОтчета.Должник = ТекДолжник;
	ОбработкаОтчета.КарточкаДолжника(Таблица, ТекДолжник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВыпискаИзРеестра(Команда)
	// Вставить содержимое обработчика.
	
	  Если ДоговорДляРеестра<>"" Тогда
	          ТабДокумент= ПолучитьМакетНаСервере();
              ТабДокумент.Показать("Выписка из реестра уступаемых Требований, на дату передачи ");
	  
	  КонецЕсли;
	
	 
	
	Сообщить("123");
	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьМакетНаСервере()
	
	ТабДокумент=Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ТолькоПросмотр=Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт; 

	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	
	
	
	
    Макет =  ОтчетОбъект.ПолучитьМакет("ВыпискаИзРеестраУстПрав"); 
	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	
	
	
	номерДогцессии=СтрЗаменить(НайтиДогЦессии(Объект.Ссылка),"№","");
	     
	
	
	датаДогцессии= Формат(Дата((НайтиДатаДогЦессии(Объект.Ссылка))),"ДФ=dd.MM.yyyy; ДЛФ=D");
	
	
	ОбластьШапка.Параметры.НомерДата=номерДогцессии+" от "+датаДогцессии+" г.";
	
	ОбластьШапка.Параметры.ДатаПередачи=Формат(Дата((НайтиДатаДогЦессии(Объект.Ссылка))),"ДЛФ=DD");
	
	ТабДокумент.Вывести(ОбластьШапка);

	
	ОбластьСтрока=Макет.ПолучитьОбласть("СтрокаТаб");
	
	ОбластьСтрока.Параметры.фио=Объект.Ссылка;
	
	ОбластьСтрока.Параметры.датаРЖ=Формат(Объект.Ссылка.ДатаРождения,"ДФ=dd.MM.yyyy; ДЛФ=D");
	ОбластьСтрока.Параметры.номКрДог=ДоговорДляРеестра;
	
	ОбластьСтрока.Параметры.датаКрДог=Формат(датаДоговора(ДоговорДляРеестра,Объект.Ссылка),"ДФ=dd.MM.yyyy; ДЛФ=D");
	
    ОбластьСтрока.Параметры.валюта= валютаДоговора(ДоговорДляРеестра,Объект.Ссылка);
	
	  //Дата((НайтиДатаДогЦессии(Объект.Ссылка))
	
	//ОбластьСтрока.Параметры.остПрЗд=НайтиПросроченныйОсновнойДолг(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра));
	
	ОбластьСтрока.Параметры.остПрЗд=НайтиПросроченныйОсновнойДолгНаДату(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра),Дата(НайтиДатаДогЦессии(Объект.Ссылка)));
	
	//ОбластьСтрока.Параметры.остпрзПро= НайтиПросроченныеПроценты(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра));
	
	ОбластьСтрока.Параметры.остпрзПро=НайтиПросроченныеПроцентыНаДату(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра),Дата(НайтиДатаДогЦессии(Объект.Ссылка)));
	
	//ОбластьСтрока.Параметры.задПоПрисСуд=НайтиНеустойка(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра));   

	
	ОбластьСтрока.Параметры.задПоПрисСуд=НайтиНеустойкаНаДату(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра),Дата(НайтиДатаДогЦессии(Объект.Ссылка)));

	
	ОбластьСтрока.Параметры.задРоГосПошл=НайтиГосПошлинуНаДату(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра),Дата(НайтиДатаДогЦессии(Объект.Ссылка)));

	
	ОбластьСтрока.Параметры.общЗадПоСог=НайтиДолгВсегоДолжникаНаДату(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра),Дата(НайтиДатаДогЦессии(Объект.Ссылка)));
	
	ОбластьСтрока.Параметры.итогСумм=НайтиДолгВсегоДолжникаНаДату(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра),Дата(НайтиДатаДогЦессии(Объект.Ссылка)));
	
	
	 ОбластьСтрока.Параметры.проЧее=НайтиПрочееНаДату(Объект.Ссылка,НайтиДоговорПоНомеру(Объект.Ссылка,ДоговорДляРеестра),Дата(НайтиДатаДогЦессии(Объект.Ссылка)));
	
	
	
	
	ТабДокумент.Вывести(ОбластьСтрока);

	ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");
	
	ОбластьПодвал.Параметры.датаРеестра=Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	
	ТабДокумент.Вывести(ОбластьПодвал);
	
	
	
	Возврат  ТабДокумент;
    
КонецФункции



&НаСервере
Функция НайтиДоговорПоНомеру(долж,номерДог)

	   догСсылка=Неопределено;
	      	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.Владелец = &Владелец
		|	И Договоры.НомерДоговора = &НомерДоговора";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("НомерДоговора", номерДог);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		догСсылка=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	 Возврат  догСсылка;
	

КонецФункции // ()





&НаКлиенте
Процедура ДоговорДляРеестраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	 СтандартнаяОбработка=Ложь;
	
	     ДанныеВыбора= Новый СписокЗначений;
		 
		 массив=НайтиНомДоговоров(Объект.Ссылка);
		 
		 Для каждого стр Из массив Цикл
			 
			 ДанныеВыбора.Добавить(стр);
		 	
		 
		 КонецЦикла;
		 
		//	
	
КонецПроцедуры


&НаСервере
Функция датаДоговора(номерД,долж)
	
	датаДог="";

	        	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.ДатаФинансирования КАК ДатаФинансирования
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.НомерДоговора = &НомерДоговора
		|	И Договоры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("НомерДоговора", номерД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		датаДог=ВыборкаДетальныеЗаписи.ДатаФинансирования;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

   Возврат датаДог;	

КонецФункции // ()


&НаСервере
Функция валютаДоговора(номерД,долж)
	
	валютаДог="";

	        	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.Валюта КАК Валюта
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.НомерДоговора = &НомерДоговора
		|	И Договоры.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("НомерДоговора", номерД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		валютаДог=ВыборкаДетальныеЗаписи.Валюта;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	Если НЕ валютаДог.Пустая() Тогда
		
	        ВалДог = валютаДог.ПолучитьОбъект();
            валютаДог=ВалДог.Наименование;
	 
	 КонецЕсли;
	
	 
	
   Возврат валютаДог;	

КонецФункции // ()

&НаКлиенте
Процедура ДобавитьДелопроизводство(Команда)
	
	    
	   		
	    ФормаДелопроизводство=ОткрытьФорму("Справочник.Делопроизводство.Форма.ФормаЭлемента",,Объект.Ссылка);
		
		ДанныеФормы = ФормаДелопроизводство.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
		ДанныеФормы.Сотрудник=ТекущийПользователь();
		
	
	
КонецПроцедуры

&НаСервере
Функция ТекущийПользователь()

	Возврат  ПараметрыСеанса.Пользователь;
	

КонецФункции // ()


	

&НаКлиенте
Процедура УдалитьДелопроизводство(Команда)
	
	 строкаТаблицы = Элементы.ДелопроизводствоТБ.ТекущаяСтрока;
	 имяСправочника="Делопроизводство";
	 имяЭлемента="ДелопроизводствоТБ";
	 
	 
	   Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		  
	  КонецЕсли;	  
	  
	   ЭтаФорма.Элементы.ДелопроизводствоТБ.Обновить();

	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыНажатие(Элемент)
	
	    пармСтр=Новый Структура;
	    пармСтр.Вставить("Владелец",Объект.Ссылка);
		 пармСтр.Вставить("ВладелецФайла",Объект.Ссылка);
		
	    ФормаПрисоедФайлы= ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",пармСтр,Объект.Ссылка);
	
				  
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьДоговорСудСтатус(Команда)
	
	 //стрДолжник=Новый Структура;
	 //
	 //стрДолжник.Вставить("ДолжникПараметр",Объект.Ссылка);
	 // ЭтаФорма.Элементы.СтатаусДоговор.Обновить();
	
////	 ОткрытьФорму("Справочник.Должники.Форма.ФормаДоговорСудебныйСтатус",стрДолжник);



         формаДоговорыСудСтат=ОткрытьФорму("Справочник.ДоговорыСудебныеСтатусы.Форма.ФормаЭлемента",,Объект.Ссылка);      

		ДанныеФормы = формаДоговорыСудСтат.Объект;
		
		ДанныеФормы.Владелец=Объект.Ссылка;
		
		ДанныеФормы.Наименование= Объект.Наименование;
		
 

	   ЭтаФорма.Элементы.СтатаусДоговорДелопр.Обновить();
	   
	   
	   
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДоговорСудСтатус(Команда)
	// Вставить содержимое обработчика.
	 строкаТаблицы = Элементы.СтатаусДоговор.ТекущаяСтрока;
	 имяСправочника="ДоговорыСудебныеСтатусы";
	 имяЭлемента="СтатаусДоговор";
	 
	 
	   Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		  
	  КонецЕсли;	  
	  
     ЭтаФорма.Элементы.СтатаусДоговор.Обновить();

	 ЭтаФорма.Элементы.СтатаусДоговорДелопр.Обновить();
	 
	
	 
	 //ЭтаФорма.Элементы.ДелопроизводствоТБ.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзРегистраДогСудСтатус(стр,имяспр)
	
	 СтандартнаяОбработка = Ложь;
	 спр=Справочники[имяспр].НайтиПоКоду(стр.Код); 
	 смпрОб= спр.Получитьобъект();
	 ссылкаОб=смпрОб.Ссылка;
	 уникИнд=ссылкаОб.УникальныйИдентификатор();
	
	 Набор = РегистрыСведений.ДоговорыСудебныеСтатусыРег.СоздатьНаборЗаписей();
	
	 Набор.Отбор.СсылкаСправ.Установить(уникИнд);
	 Набор.Записать();
	 
	  
	

КонецПроцедуры

&НаКлиенте
Процедура УдалитьДогСудСт(Команда)
	
	 строкаТаблицы = Элементы.СтатаусДоговорДелопр.ТекущаяСтрока;
	 имяСправочника="ДоговорыСудебныеСтатусы";
	 имяЭлемента="СтатаусДоговорДелопр";
	 
	 
	   Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		  
	  КонецЕсли;	  
	  
    
	 ЭтаФорма.Элементы.СтатаусДоговорДелопр.Обновить();
	 

	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДелПрСтр(Команда)
	// Вставить содержимое обработчика.
     строкаТаблицы = Элементы.ДелопроизводствоТБ1.ТекущаяСтрока;
	 имяСправочника="Делопроизводство";
	 имяЭлемента="ДелопроизводствоТБ1";
	 
	 
	   Если строкаТаблицы<>Неопределено Тогда
		  
		     Контекст=Новый Структура("СтрокаТаблицы,ИмяСправочника,ИмяЭлемента",строкаТаблицы,имяСправочника,имяЭлемента);
			 Оповещение = Новый ОписаниеОповещения("ОповещениеУдалениеЗаявление", ЭтотОбъект, Контекст);
			 ТекстВопроса = "Текущая запись будет удалена. Продолжить?";
			 ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		  
	  КонецЕсли;	  
	  
	   ЭтаФорма.Элементы.ДелопроизводствоТБ1.Обновить();

	
КонецПроцедуры

&НаСервере
Процедура СвязанныеДанныеПриСменеСтраницыНаСервере()
	// Вставить содержимое обработчика.
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДанныеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	
	Если ТекущаяСтраница.Имя="ГруппаФССП" и (НЕ фспОткр) Тогда
		
		 фспОткр=Истина;
		 ЗаполнитьФССП(Объект.Ссылка);
		 
	
	КонецЕсли;
	
	  //Почта_ШПИ
	  
	  
	  Если ТекущаяСтраница.Имя="Почта_ШПИ" и (НЕ шпиОткр) Тогда
		  
		         шпиОткр=Истина;
	  	         Получить_ТЗ_Из_ДинамическогоСписка("ПочтаШПИ"); 
	   
				   Для каждого стр  Из ПочтаШПИ_ТЗ Цикл
				   
				   	   НаименованиеШПИ=стр.Наименование;
				       ЖалобаКАС=стр.ЖалобаКАС;
				       ЗаявлениеОВозбужденииИсполнительногоПроизводства=стр.ЗаявлениеОВозбужденииИсполнительногоПроизводства;
				       ЗаявлениеОВыдачеСудебногоПриказа=стр.ЗаявлениеОВыдачеСудебногоПриказа;
				       ЗаявлениеОЗаменеСтороныВИП=стр.ЗаявлениеОЗаменеСтороныВИП;
				       ЗаявлениеОПроцессуальномПравопреемстве=стр.ЗаявлениеОПроцессуальномПравопреемстве;
				       ИсковоеЗаявление=стр.ИсковоеЗаявление;
				       ОбращениеОХодеИП_ШПИ=стр.ОбращениеОХодеИП;
				       ТребованиеОДосрочномПогашении=стр.ТребованиеОДосрочномПогашении;
				       УведомлениеОПереуступке=стр.УведомлениеОПереуступке;
				   
				   КонецЦикла;
	   
  
	   КонецЕсли;
			   
		////Банкрот_Вкл	   
		
		Если ТекущаяСтраница.Имя="Банкрот_Вкл" и (НЕ банкротОткр) Тогда
			
			банкротОткр=Истина;
			
			 Получить_ТЗ_Из_ДинамическогоСписка("Банкрот"); 
	   
			   Для каждого стр  Из Банкрот_ТЗ Цикл
			         ФИО_Банкрот=стр.ФИО;
			    	 ДатаРождения_Банкрот=стр.ДатаРождения;
			    	 МестоРождения_Банкрот=стр.МестоРождения;
			    	 Регион_Банкрот=стр.Регион;
			    	 ИНН_Банкрот=стр.ИНН;
			    	 Адрес_Банкрот=стр.Адрес;
			    	 IDDebitor=стр.IDDebitor;
			       
			    КонецЦикла;	 
			 
	 		
		
		КонецЕсли;
			   
	  
	
	////СвязанныеДанныеПриСменеСтраницыНаСервере();
КонецПроцедуры

 
фспОткр=Ложь;
шпиОткр=Ложь;
банкротОткр=Ложь;


