Процедура ОбработкаПроведения(Отказ, Режим)
	Перем Запрос;
	Отказ = ДоступностьИзмененийПоДатеЗапрета(Дата);
	// Получить данные для расчета
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НачальныеДанныеДоговораСрезПоследних.ПроцентВознаграждения,
	//|	ПлатежиДолжники.НомерСтроки
	//|ИЗ
	//|	Документ.Платежи.Должники КАК ПлатежиДолжники
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеДанныеДоговора.СрезПоследних КАК НачальныеДанныеДоговораСрезПоследних
	//|		ПО ПлатежиДолжники.Договор = НачальныеДанныеДоговораСрезПоследних.Договор
	//|ГДЕ
	//|	ПлатежиДолжники.Ссылка = &ТекущийДокумент";
	//
	//Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка); 
	//
	//тзПроцентыВознаграждения = Запрос.Выполнить().Выгрузить();
	//
	
	
	////{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПлатежиДолжники.Ссылка КАК Ссылка,
	//	|	ПлатежиДолжники.НомерСтроки КАК НомерСтроки,
	//	|	ПлатежиДолжники.Должник КАК Должник,
	//	|	ПлатежиДолжники.Договор КАК Договор,
	//	|	ПлатежиДолжники.Сумма КАК Сумма,
	//	|	ПлатежиДолжники.ДатаПлатежа КАК ДатаПлатежа
	//	|ИЗ
	//	|	Документ.Платежи.Должники КАК ПлатежиДолжники
	//	|ГДЕ
	//	|	ПлатежиДолжники.Ссылка = &Ссылка
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НомерСтроки";
	//
	//Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	
	
	
    РегистрыСведений.ДанныеДоговоров.УстановитьИспользованиеИтогов(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежиДолжники.Ссылка КАК Ссылка,
		|	ПлатежиДолжники.НомерСтроки КАК НомерСтроки,
		|	ПлатежиДолжники.Должник КАК Должник,
		|	ПлатежиДолжники.Договор КАК Договор,
		|	ПлатежиДолжники.Сумма КАК Сумма,
		|	ПлатежиДолжники.ОтметкаФССП КАК ОтметкаФССП,
		|	ПлатежиДолжники.ДатаПлатежа КАК ДатаПлатежа
		|ИЗ
		|	Документ.Платежи.Должники КАК ПлатежиДолжники
		|ГДЕ
		|	ПлатежиДолжники.Ссылка = &Ссылка
	    |УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	 
	
	
	
	 ТаблицаДолжников = Запрос.Выполнить().Выгрузить();
	
	  кол=ТаблицаДолжников.Количество();
	  
	  
				   Если кол>500   Тогда
				   
					          старт=кол;
				              инд=0;
			  				  ост= кол%500;
							  
							  
							  Движения.ДанныеДоговоров.Очистить();
							  
							  
						  	  Пока (кол-ост)>0 Цикл
								 
								    Для Счетчик = инд По инд+499 Цикл
										
										
										
										        стрДолж=ТаблицаДолжников[Счетчик];
																				  
																				 
											    Если стрДолж.ДатаПлатежа = '00010101' Тогда
													ДатаПлатежа	= Дата;
												Иначе
													ДатаПлатежа	= стрДолж.ДатаПлатежа;
												КонецЕсли; 
												Ответственный 	= Привязка.ПолучитьОтветственного(стрДолж.Должник, НачалоДня(ДатаПлатежа));
												Сотрудник 		= Привязка.ПолучитьСотрудникаАктивного(стрДолж.Должник, НачалоДня(ДатаПлатежа));
												
												//НайденнаяСтрока = тзПроцентыВознаграждения.Найти(стрДолж.НомерСтроки, "НомерСтроки");
												//Если НайденнаяСтрока = Неопределено Тогда
												//    Сообщить("Процент вознаграждения = 0. Реестром не загружены данные по договору: " + Строка(стрДолж.Договор), СтатусСообщения.Внимание);
												//	ПроцентВознаграждения = 0;
												//Иначе
												//    ПроцентВознаграждения = НайденнаяСтрока.ПроцентВознаграждения;
												//КонецЕсли;
												
												Банк = стрДолж.Договор.Банк;
												Если Банк.ПорядокПогашенияЗадолженности.Количество() > 0 Тогда
													// списывать задолженность только если указан порядок ее списания
													// регистр БалансДолжников Приход
													ДвижениеБД = Движения.БалансДолжников.Добавить();
													ДвижениеБД.ВидДвижения 	= ВидДвиженияНакопления.Расход;
													ДвижениеБД.Период 		= ДатаПлатежа;
													ДвижениеБД.Должник 		= стрДолж.Должник;
													ДвижениеБД.Договор 		= стрДолж.Договор;
													ДвижениеБД.Сумма		= стрДолж.Сумма;
													ДвижениеБД.Описание		= "Поступил платёж";
													
													ДвДанныеДоговоров = Движения.ДанныеДоговоров.Добавить();
													ДвДанныеДоговоров.Период 					= ДатаПлатежа;
													ДвДанныеДоговоров.ДатаРасчетаЗадолженности	= ДатаПлатежа;
													ДвДанныеДоговоров.Договор = стрДолж.Договор;
													
													ДвДанныеДоговоров.НомерСтрокиТаблицы= стрДолж.НомерСтроки;
													
													
													
													//sza171128-1035 Широков_Игорь: списать долги по очереди 
													СтруктураОтбора = Новый Структура("Договор", стрДолж.Договор);
													ТаблицаДолгаПоДоговору = РегистрыСведений.ДанныеДоговоров.СрезПоследних(ДатаПлатежа, СтруктураОтбора);
													СуммаПлатежа = стрДолж.Сумма;
													ОстатокСуммы = СуммаПлатежа;
													
													ТаблицаДолгаПоДоговору.Сортировать("Период УБЫВ,НомерСтрокиТаблицы УБЫВ");

													Если ТаблицаДолгаПоДоговору.Количество() > 0 Тогда // есть Структура долга 
														СтрокаДолга = ТаблицаДолгаПоДоговору.Получить(0);
														СуммаДолга = 0;
														ДвДанныеДоговоров.ВсегоЗадолженность = СтрокаДолга.ВсегоЗадолженность - стрДолж.Сумма;
														Для каждого строкаОчередности Из Банк.ПорядокПогашенияЗадолженности Цикл
															Задолженность = строкаОчередности.Задолженность;
															СуммаЗадолженности = СтрокаДолга[строкаОчередности.Задолженность];
															СуммаПогашения = ?(СуммаЗадолженности <= ОстатокСуммы, СуммаЗадолженности, ОстатокСуммы);
															ДвижениеБД[Задолженность] = СуммаПогашения;
															ДвДанныеДоговоров[Задолженность] = СуммаЗадолженности - СуммаПогашения;
															ОстатокСуммы = ОстатокСуммы - СуммаПогашения;
														КонецЦикла;
														Если ОстатокСуммы > 0 Тогда
															Сообщить("У "+ стрДолж.Должник + " сумма платежа больше задолженности");
														КонецЕсли;
													Иначе
														ДвижениеБД.ПросроченныйОсновнойДолг = СуммаПлатежа;
													КонецЕсли;
													
																										
													Движения.ДанныеДоговоров.Записать(Ложь);//sza171128-1035 Широков_Игорь: списать долги по очереди
													

												КонецЕсли;
												
												
												// регистр Платежи 
												РеестрДолжника = ПолучитьРеестрДолжника(ДатаПлатежа,стрДолж.Должник, стрДолж.Договор);
												
												Движение = Движения.Платежи.Добавить();
												ЗаполнитьЗначенияСвойств(Движение, стрДолж);
												
												Движение.Период 				= ДатаПлатежа;
												Движение.Ответственный 			= Сотрудник;
												Движение.Количество				= 1;
												//Движение.Вознаграждение 		= стрДолж.Сумма * ?(ПроцентВознаграждения = Null,0,ПроцентВознаграждения) / 100;
												//Движение.ПроцентВознаграждения 	= ПроцентВознаграждения;  
												Движение.Сотрудник 				= Сотрудник;
												Движение.Реестр 				= РеестрДолжника;// +Крылов 2011.03.05
												
												Движение.ОтметкаФССП=стрДолж.ОтметкаФССП;
												
												

																			 
										 
									  
								    КонецЦикла;	
								  
								  инд=инд+500;
						  		  
								  
								  кол=кол-500;
								  
								  
							  
							  КонецЦикла;
							  
							  
							  Если старт> инд Тогда
								  
								  
							        Для Счетчик = инд По старт-1 Цикл
							    	  
							    	  стрДолж=ТаблицаДолжников[Счетчик];
							    	  
							    	       стрДолж=ТаблицаДолжников[Счетчик];
							    												  
							    												 
							    			    Если стрДолж.ДатаПлатежа = '00010101' Тогда
							    					ДатаПлатежа	= Дата;
							    				Иначе
							    					ДатаПлатежа	= стрДолж.ДатаПлатежа;
							    				КонецЕсли; 
							    				Ответственный 	= Привязка.ПолучитьОтветственного(стрДолж.Должник, НачалоДня(ДатаПлатежа));
							    				Сотрудник 		= Привязка.ПолучитьСотрудникаАктивного(стрДолж.Должник, НачалоДня(ДатаПлатежа));
							    				
							    				//НайденнаяСтрока = тзПроцентыВознаграждения.Найти(стрДолж.НомерСтроки, "НомерСтроки");
							    				//Если НайденнаяСтрока = Неопределено Тогда
							    				//    Сообщить("Процент вознаграждения = 0. Реестром не загружены данные по договору: " + Строка(стрДолж.Договор), СтатусСообщения.Внимание);
							    				//	ПроцентВознаграждения = 0;
							    				//Иначе
							    				//    ПроцентВознаграждения = НайденнаяСтрока.ПроцентВознаграждения;
							    				//КонецЕсли;
							    				
							    				Банк = стрДолж.Договор.Банк;
							    				Если Банк.ПорядокПогашенияЗадолженности.Количество() > 0 Тогда
							    					// списывать задолженность только если указан порядок ее списания
							    					// регистр БалансДолжников Приход
							    					ДвижениеБД = Движения.БалансДолжников.Добавить();
							    					ДвижениеБД.ВидДвижения 	= ВидДвиженияНакопления.Расход;
							    					ДвижениеБД.Период 		= ДатаПлатежа;
							    					ДвижениеБД.Должник 		= стрДолж.Должник;
							    					ДвижениеБД.Договор 		= стрДолж.Договор;
							    					ДвижениеБД.Сумма		= стрДолж.Сумма;
							    					ДвижениеБД.Описание		= "Поступил платёж";
													
													
							    					ДвДанныеДоговоров = Движения.ДанныеДоговоров.Добавить();
							    					ДвДанныеДоговоров.Период 					= ДатаПлатежа;
							    					ДвДанныеДоговоров.ДатаРасчетаЗадолженности	= ДатаПлатежа;
							    					ДвДанныеДоговоров.Договор = стрДолж.Договор;
													ДвДанныеДоговоров.НомерСтрокиТаблицы= стрДолж.НомерСтроки;
							    					//sza171128-1035 Широков_Игорь: списать долги по очереди 
							    					СтруктураОтбора = Новый Структура("Договор", стрДолж.Договор);
							    					ТаблицаДолгаПоДоговору = РегистрыСведений.ДанныеДоговоров.СрезПоследних(ДатаПлатежа, СтруктураОтбора);
							    					СуммаПлатежа = стрДолж.Сумма;
							    					ОстатокСуммы = СуммаПлатежа;
													
													ТаблицаДолгаПоДоговору.Сортировать("Период УБЫВ,НомерСтрокиТаблицы УБЫВ");

							    					Если ТаблицаДолгаПоДоговору.Количество() > 0 Тогда // есть Структура долга 
							    						СтрокаДолга = ТаблицаДолгаПоДоговору.Получить(0);
							    						СуммаДолга = 0;
							    						ДвДанныеДоговоров.ВсегоЗадолженность = СтрокаДолга.ВсегоЗадолженность - стрДолж.Сумма;
							    						Для каждого строкаОчередности Из Банк.ПорядокПогашенияЗадолженности Цикл
							    							Задолженность = строкаОчередности.Задолженность;
							    							СуммаЗадолженности = СтрокаДолга[строкаОчередности.Задолженность];
							    							СуммаПогашения = ?(СуммаЗадолженности <= ОстатокСуммы, СуммаЗадолженности, ОстатокСуммы);
							    							ДвижениеБД[Задолженность] = СуммаПогашения;
							    							ДвДанныеДоговоров[Задолженность] = СуммаЗадолженности - СуммаПогашения;
							    							ОстатокСуммы = ОстатокСуммы - СуммаПогашения;
							    						КонецЦикла;
							    						Если ОстатокСуммы > 0 Тогда
							    							Сообщить("У "+ стрДолж.Должник + " сумма платежа больше задолженности");
							    						КонецЕсли;
							    					Иначе
							    						ДвижениеБД.ПросроченныйОсновнойДолг = СуммаПлатежа;
							    					КонецЕсли;
							    					
												  Движения.ДанныеДоговоров.Записать(Ложь);//sza171128-1035 Широков_Игорь: списать долги по очереди
												  
												  

												  
							    				КонецЕсли;
							    				
							    				
							    				// регистр Платежи 
							    				РеестрДолжника = ПолучитьРеестрДолжника(ДатаПлатежа,стрДолж.Должник, стрДолж.Договор);
							    				
							    				Движение = Движения.Платежи.Добавить();
							    				ЗаполнитьЗначенияСвойств(Движение, стрДолж);
							    				
							    				Движение.Период 				= ДатаПлатежа;
							    				Движение.Ответственный 			= Сотрудник;
							    				Движение.Количество				= 1;
							    				//Движение.Вознаграждение 		= стрДолж.Сумма * ?(ПроцентВознаграждения = Null,0,ПроцентВознаграждения) / 100;
							    				//Движение.ПроцентВознаграждения 	= ПроцентВознаграждения;  
							    				Движение.Сотрудник 				= Сотрудник;
							    				Движение.Реестр 				= РеестрДолжника;// +Крылов 2011.03.05
							    				
												Движение.ОтметкаФССП=стрДолж.ОтметкаФССП;

							    							
							    	  
							    	   
							    	  
							    	  
							      КонецЦикла;
							  
							  КонецЕсли;
							  
							 
							  
				   Иначе			  

					  
					   
													         
									Для Каждого стрДолж Из ТаблицаДолжников Цикл
										
										
										
										
										
										Если стрДолж.ДатаПлатежа = '00010101' Тогда
											ДатаПлатежа	= Дата;
										Иначе
											ДатаПлатежа	= стрДолж.ДатаПлатежа;
										КонецЕсли; 
										Ответственный 	= Привязка.ПолучитьОтветственного(стрДолж.Должник, НачалоДня(ДатаПлатежа));
										Сотрудник 		= Привязка.ПолучитьСотрудникаАктивного(стрДолж.Должник, НачалоДня(ДатаПлатежа));
										
										//НайденнаяСтрока = тзПроцентыВознаграждения.Найти(стрДолж.НомерСтроки, "НомерСтроки");
										//Если НайденнаяСтрока = Неопределено Тогда
										//    Сообщить("Процент вознаграждения = 0. Реестром не загружены данные по договору: " + Строка(стрДолж.Договор), СтатусСообщения.Внимание);
										//	ПроцентВознаграждения = 0;
										//Иначе
										//    ПроцентВознаграждения = НайденнаяСтрока.ПроцентВознаграждения;
										//КонецЕсли;
										
										Банк = стрДолж.Договор.Банк;
										Если Банк.ПорядокПогашенияЗадолженности.Количество() > 0 Тогда
											// списывать задолженность только если указан порядок ее списания
											// регистр БалансДолжников Приход
											ДвижениеБД = Движения.БалансДолжников.Добавить();
											ДвижениеБД.ВидДвижения 	= ВидДвиженияНакопления.Расход;
											ДвижениеБД.Период 		= ДатаПлатежа;
											ДвижениеБД.Должник 		= стрДолж.Должник;
											ДвижениеБД.Договор 		= стрДолж.Договор;
											ДвижениеБД.Сумма		= стрДолж.Сумма;
											ДвижениеБД.Описание		= "Поступил платёж";
											
											
											ДвДанныеДоговоров = Движения.ДанныеДоговоров.Добавить();
											ДвДанныеДоговоров.Период 					= ДатаПлатежа;
											ДвДанныеДоговоров.ДатаРасчетаЗадолженности	= ДатаПлатежа;
											ДвДанныеДоговоров.Договор = стрДолж.Договор;
											ДвДанныеДоговоров.НомерСтрокиТаблицы = стрДолж.НомерСтроки;
											
											//sza171128-1035 Широков_Игорь: списать долги по очереди 
											СтруктураОтбора = Новый Структура("Договор", стрДолж.Договор);
											ТаблицаДолгаПоДоговору = РегистрыСведений.ДанныеДоговоров.СрезПоследних(ДатаПлатежа, СтруктураОтбора);
											СуммаПлатежа = стрДолж.Сумма;
											ОстатокСуммы = СуммаПлатежа;
											
											
											ТаблицаДолгаПоДоговору.Сортировать("Период УБЫВ,НомерСтрокиТаблицы УБЫВ");
											
										
											
											Если ТаблицаДолгаПоДоговору.Количество() > 0 Тогда // есть Структура долга 
												СтрокаДолга = ТаблицаДолгаПоДоговору.Получить(0);
												СуммаДолга = 0;
												ДвДанныеДоговоров.ВсегоЗадолженность = СтрокаДолга.ВсегоЗадолженность - стрДолж.Сумма;
												Для каждого строкаОчередности Из Банк.ПорядокПогашенияЗадолженности Цикл
													Задолженность = строкаОчередности.Задолженность;
													СуммаЗадолженности = СтрокаДолга[строкаОчередности.Задолженность];
													СуммаПогашения = ?(СуммаЗадолженности <= ОстатокСуммы, СуммаЗадолженности, ОстатокСуммы);
													ДвижениеБД[Задолженность] = СуммаПогашения;
													ДвДанныеДоговоров[Задолженность] = СуммаЗадолженности - СуммаПогашения;
													ОстатокСуммы = ОстатокСуммы - СуммаПогашения;
												КонецЦикла;
												Если ОстатокСуммы > 0 Тогда
													Сообщить("У "+ стрДолж.Должник + " сумма платежа больше задолженности");
												КонецЕсли;
											Иначе
												ДвижениеБД.ПросроченныйОсновнойДолг = СуммаПлатежа;
											КонецЕсли;
											Движения.ДанныеДоговоров.Записать(Ложь);//sza171128-1035 Широков_Игорь: списать долги по очереди
											

											
										КонецЕсли;
										
										
										// регистр Платежи 
										РеестрДолжника = ПолучитьРеестрДолжника(ДатаПлатежа,стрДолж.Должник, стрДолж.Договор);
										
										Движение = Движения.Платежи.Добавить();
										ЗаполнитьЗначенияСвойств(Движение, стрДолж);
										
										Движение.Период 				= ДатаПлатежа;
										Движение.Ответственный 			= Сотрудник;
										Движение.Количество				= 1;
										//Движение.Вознаграждение 		= стрДолж.Сумма * ?(ПроцентВознаграждения = Null,0,ПроцентВознаграждения) / 100;
										//Движение.ПроцентВознаграждения 	= ПроцентВознаграждения;  
										Движение.Сотрудник 				= Сотрудник;
										Движение.Реестр 				= РеестрДолжника;// +Крылов 2011.03.05
										Движение.ОтметкаФССП=стрДолж.ОтметкаФССП;
										
										
									КонецЦикла;
									
					   
				   
								КонецЕсли;
								
								
		 РегистрыСведений.ДанныеДоговоров.УстановитьИспользованиеИтогов(Истина);

	
	
КонецПроцедуры

Функция ПолучитьРеестрДолжника(ДатаПлатежа,Должник,Договор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПлатежа",ДатаПлатежа);
	Запрос.УстановитьПараметр("Должник",Должник);
	Запрос.УстановитьПараметр("Договор",Договор);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДолжники.Ссылка
	|ИЗ
	|	Документ.Реестр.Должники КАК РеестрДолжники
	|ГДЕ
	|	РеестрДолжники.Должник = &Должник
	|	И РеестрДолжники.Ссылка.Дата <= &ДатаПлатежа
	|	И РеестрДолжники.Договор = &Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрДолжники.Ссылка.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.Реестр.ПустаяСсылка();
	
КонецФункции
