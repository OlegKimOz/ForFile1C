Процедура ОбработкаПроведения(Отказ, Режим)
	
	СотрАрхив 		= Справочники.Сотрудники.НайтиПоНаименованию("Архив");
	СотрПредархив 	= Справочники.Сотрудники.НайтиПоНаименованию("Предархив");
	Отказ = ДоступностьИзмененийПоДатеЗапрета(Дата);
	
	Если ОтказПередачи Тогда
		// Проводим, но проводок не делаем
		Возврат;
	КонецЕсли; 
	Если Сотрудник = СотрАрхив Тогда	
		
		//Помещаем договоры в архив
		Для Каждого ТекСтр Из Должники Цикл
			Попытка 
				Об = ТекСтр.Договор.ПолучитьОбъект();
				Об.Статус = Перечисления.СтатусыДоговоров.Архив;
				Об.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		//Помещаем должников без активных договоров в архив
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПередачаДолжниковДолжники.Должник
		               |ИЗ
		               |	Документ.ПередачаДолжников.Должники КАК ПередачаДолжниковДолжники
		               |ГДЕ
		               |	ПередачаДолжниковДолжники.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЕстьПредархив = Ложь;
			ЕстьАктивные = Ложь;
			ВыбДог = Справочники.Договоры.Выбрать(,Выборка.Должник);
			Пока ВыбДог.Следующий() Цикл
				Если ВыбДог.Статус = перечисления.СтатусыДоговоров.Активный тогда
					ЕстьАктивные = Истина;
				ИначеЕсли ВыбДог.Статус = перечисления.СтатусыДоговоров.Предархив тогда
					ЕстьПредархив = Истина;
				КонецЕсли;
				
			КонецЦикла;

			Если (НЕ ЕстьАктивные) И ЕстьПредархив Тогда
				// регистр ПривязкаСотрудник 
				Движение = Движения.ПривязкаСотрудник.Добавить();
				Движение.Период 	= Дата;
				Движение.Должник 	= Выборка.Должник;
				Движение.Сотрудник 	= СотрАрхив;
				Движение.СотрМенеджер 	= СотрАрхив;
				
				// регистр ПривязкаОтдел 
				Движение = Движения.ПривязкаОтдел.Добавить();
				Движение.Период 		= Дата;
				Движение.Должник 		= Выборка.Должник;
				Движение.Отдел 			= Отдел;
				Движение.СвободныйПул 	= ПередачаВСвободныйПул;
			ИначеЕсли (НЕ ЕстьАктивные) и (НЕ ЕстьПредархив) Тогда
				// регистр ПривязкаСотрудник 
				Движение = Движения.ПривязкаСотрудник.Добавить();
				Движение.Период 	= Дата;
				Движение.Должник 	= Выборка.Должник;
				Движение.Сотрудник 	= СотрАрхив;
				Движение.СотрМенеджер 	= СотрАрхив;
				
				// регистр ПривязкаОтдел 
				Движение = Движения.ПривязкаОтдел.Добавить();
				Движение.Период 		= Дата;
				Движение.Должник 		= Выборка.Должник;
				Движение.Отдел 			= Отдел;
				Движение.СвободныйПул 	= ПередачаВСвободныйПул;
			КонецЕсли;
			
			КонецЦикла;
		
	ИначеЕсли Сотрудник = СотрПредархив Тогда
		//Помещаем договоры в архив
		Для Каждого ТекСтр Из Должники Цикл
			Попытка 
				Об = ТекСтр.Договор.ПолучитьОбъект();
				Об.Статус = Перечисления.СтатусыДоговоров.Предархив;
				Об.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		//Помещаем должников без активных договоров в архив
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПередачаДолжниковДолжники.Должник
		               |ИЗ
		               |	Документ.ПередачаДолжников.Должники КАК ПередачаДолжниковДолжники
		               |ГДЕ
		               |	ПередачаДолжниковДолжники.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЕстьПредархив = Ложь;
			ЕстьАктивные = Ложь;
			ВыбДог = Справочники.Договоры.Выбрать(,Выборка.Должник);
			Пока ВыбДог.Следующий() Цикл
				Если ВыбДог.Статус = перечисления.СтатусыДоговоров.Активный тогда
					ЕстьАктивные = Истина;
				ИначеЕсли ВыбДог.Статус = перечисления.СтатусыДоговоров.Предархив тогда
					ЕстьПредархив = Истина;
				КонецЕсли;
				
			КонецЦикла;
			Если (НЕ ЕстьАктивные) И ЕстьПредархив Тогда
				// регистр ПривязкаСотрудник 
				Движение = Движения.ПривязкаСотрудник.Добавить();
				Движение.Период 	= Дата;
				Движение.Должник 	= Выборка.Должник;
				Движение.Сотрудник 	= СотрПредархив;
				Движение.СотрМенеджер 	= СотрПредархив;
				
				// регистр ПривязкаОтдел 
				Движение = Движения.ПривязкаОтдел.Добавить();
				Движение.Период 		= Дата;
				Движение.Должник 		= Выборка.Должник;
				Движение.Отдел 			= Отдел;
				Движение.СвободныйПул 	= ПередачаВСвободныйПул;
			ИначеЕсли (НЕ ЕстьАктивные) и (НЕ ЕстьПредархив) Тогда
				// регистр ПривязкаСотрудник 
				Движение = Движения.ПривязкаСотрудник.Добавить();
				Движение.Период 	= Дата;
				Движение.Должник 	= Выборка.Должник;
				Движение.Сотрудник 	= СотрПредархив;
				Движение.СотрМенеджер 	= СотрПредархив;
				
				// регистр ПривязкаОтдел 
				Движение = Движения.ПривязкаОтдел.Добавить();
				Движение.Период 		= Дата;
				Движение.Должник 		= Выборка.Должник;
				Движение.Отдел 			= Отдел;
				Движение.СвободныйПул 	= ПередачаВСвободныйПул;
			КонецЕсли;
			
				
		КонецЦикла;
	Иначе
		Темп = Новый ТаблицаЗначений;
		Темп = Должники.Выгрузить();
	Темп.Свернуть("Должник", "");
		Если НЕ Подписан Тогда
			ПустойОтдел = Справочники.Отделы.ПустаяСсылка();
			
			Для каждого Выборка Из Темп Цикл
				// регистр ПривязкаСотрудник 
				Движение = Движения.ПривязкаСотрудник.Добавить();
				Движение.Период 	= Дата;
				Движение.Должник 	= Выборка.Должник;
				Движение.Сотрудник 	= Менеджер;
				Движение.СотрМенеджер 	= Привязка.ПолучитьСотрМенеджера(Выборка.Должник, Дата);
				
				
				// регистр ПривязкаОтдел 
				Движение = Движения.ПривязкаОтдел.Добавить();
				Движение.Период 		= Дата;
				Движение.Должник 		= Выборка.Должник;
				Движение.Отдел 			= ПустойОтдел;
				Движение.СвободныйПул 	= Ложь;
			КонецЦикла;
			
		Иначе
			Для каждого Выборка Из Темп Цикл
				// регистр ПривязкаСотрудник 
				Движение = Движения.ПривязкаСотрудник.Добавить();
				Движение.Период 	= Дата;
				Движение.Должник 	= Выборка.Должник;
				Движение.Сотрудник 	= Сотрудник;
				Движение.СотрМенеджер 	= Сотрудник;
				
				// регистр ПривязкаОтдел 
				Движение = Движения.ПривязкаОтдел.Добавить();
				Движение.Период 		= Дата;
				Движение.Должник 		= Выборка.Должник;
				Движение.Отдел 			= Отдел;
				Движение.СвободныйПул 	= ПередачаВСвободныйПул;
				
				Если СнятиеОтветственного Тогда
					// регистр ПривязкаОтветственный 
					Движение = Движения.ПривязкаОтветственный.Добавить();
					Движение.Период 		= Дата;
					Движение.Должник 		= Выборка.Должник;
					Движение.Ответственный 	= Справочники.Сотрудники.ПустаяСсылка();
				КонецЕсли; 
				
				Если Отдел.РольОтдела = Перечисления.РольОтдела.Выездной Тогда
					// регистр Выезд 
					Движение = Движения.Выезд.Добавить();
					Движение.Период 	= Дата;
					Движение.Сотрудник 	= Сотрудник;
					Движение.Должник 	= Выборка.Должник;
					Движение.Новый 		= Истина;
				КонецЕсли; 
			КонецЦикла;
			
			// Регистрация количества передач
			// Получил
			Движение = Движения.Передачи.Добавить();
			Движение.Период 		= Дата;
			Движение.Сотрудник 		= Сотрудник;
			Движение.Получил 		= Должники.Количество();
			
			// Передал
			Движение = Движения.Передачи.Добавить();
			Движение.Период 		= Дата;
			Движение.Сотрудник 		= Автор;
			Движение.Передал 		= Должники.Количество();
			
			// Снимаем передачу с менеджера
			Менеджер = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли; 
		
	КонецЕсли;
	
	// Показать список архивных должников
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПривязкаОтделСрезПоследних.Должник,
	               |	ПередачаДолжниковДолжники.Договор
	               |ИЗ
	               |	Документ.ПередачаДолжников.Должники КАК ПередачаДолжниковДолжники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаОтдел.СрезПоследних(&Момент, ) КАК ПривязкаОтделСрезПоследних
	               |		ПО (ПривязкаОтделСрезПоследних.Должник = ПередачаДолжниковДолжники.Должник)";
	
	Запрос.УстановитьПараметр("Архив", 				Перечисления.РольОтдела.Архив);
	Запрос.УстановитьПараметр("Момент", 			Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	КоличествоАрхивных = Выборка.Количество();
	
	Если Сотрудник <> СотрАрхив Тогда
		Для Каждого ТекСтр Из должники Цикл
			об = ТекСтр.Договор.ПолучитьОбъект();
			если Сотрудник = СотрПредархив тогда
				об.Статус = Перечисления.СтатусыДоговоров.Предархив;
			иначе
				об.Статус = Перечисления.СтатусыДоговоров.Активный;
			конецесли;
			Об.Записать();
		КонецЦикла;
	//Если КоличествоАрхивных > 0 Тогда
	//	//Сообщить(Строка(Ссылка) + " В документе " + Строка(КоличествоАрхивных) + " должников, находящихся в архиве.
	//	//|Данные должники не могут быть переданы.", СтатусСообщения.Важное);
	//	
	//	Попытка
	//		Об = Выборка.договор.Получитьобъект();
	//		Если Сотрудник = СотрПредархив Тогда
	//			Об.Статус = перечисления.СтатусыДоговоров.Предархив;
	//		Иначе
	//			Об.статус = перечисления.СтатусыДоговоров.Активный;
	//		КонецЕСли;
	//		
	//	Исключение
	//	КонецПопытки;
	//	
	//	
	//	Пока Выборка.Следующий() Цикл
	//		Сообщить(Строка(Выборка.Должник)+" возвращен из архива!", СтатусСообщения.Информация);
	//	КонецЦикла;
	//	
	//	//Сообщить(Строка(Ссылка) + " В документе " + Строка(КоличествоАрхивных) + " должников, находящихся в архиве.
	//	//|Данные должники не могут быть переданы.", СтатусСообщения.Важное);
	//КонецЕсли; 
	КонецЕсли;
	
	////Павлов А.О.
	//СотрАрхив 		= Справочники.Сотрудники.НайтиПоНаименованию("Архив");
	//СотрПредархив 	= Справочники.Сотрудники.НайтиПоНаименованию("Предархив");
	//Если Сотрудник = СотрАрхив Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	Договоры.Ссылка
	//	|ИЗ
	//	|	Документ.ПередачаДолжников.Должники КАК ПередачаДолжниковДолжники
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
	//	|		ПО ПередачаДолжниковДолжники.Должник = Договоры.Владелец
	//	|ГДЕ
	//	|	ПередачаДолжниковДолжники.Ссылка = &Ссылка";
	//	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		Попытка
	//		Об = Выборка.Ссылка.ПолучитьОбъект();
	//		Об.Статус = Перечисления.СтатусыДоговоров.Архив;
	//		Об.Записать();
	//	Исключение
	//		КонецПопытки;
	//	КонецЦикла;
	//ИначеЕсли Сотрудник = СотрПредархив Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	Договоры.Ссылка
	//	|ИЗ
	//	|	Документ.ПередачаДолжников.Должники КАК ПередачаДолжниковДолжники
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
	//	|		ПО ПередачаДолжниковДолжники.Должник = Договоры.Владелец
	//	|ГДЕ
	//	|	ПередачаДолжниковДолжники.Ссылка = &Ссылка";
	//	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		Попытка
	//		Об = Выборка.Ссылка.ПолучитьОбъект();
	//		Об.Статус = Перечисления.СтатусыДоговоров.Предархив;
	//		Об.Записать();
	//	Исключение
	//		КонецПопытки;
	//	КонецЦикла;
	//КонецЕсли;
	////Павлов А.О.
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ПередачаВСвободныйПул И НЕ(РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
		Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		СнятиеОтветственного = Истина;
	КонецЕсли; 
	
	РольОтдела = Отдел.РольОтдела;
	
	Должники.Свернуть("Должник,Договор", "");
КонецПроцедуры

