&НаСервере
Процедура ПриОткрытииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ПараметрыСеанса.Пользователь.Ссылка;  //#МРС - не забыть
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаЗагрузки) = Ложь Тогда
		Объект.ДатаЗагрузки = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаСервере
Функция ВыполнитьНаСервере()
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(ТекЭлемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл с данными";
	Диалог.ПолноеИмяФайла = "";
	Диалог.Фильтр = "Книга MS Excel (*.xls;*.xlsx)|*.xls;*.xlsx|";
	Диалог.МножественныйВыбор		= Ложь;
	Диалог.ПредварительныйПросмотр	= Ложь;
	Диалог.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДопПарметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранныеФайлы) и ВыбранныеФайлы.Количество() > 0 Тогда
		Объект.ИмяФайла = ВыбранныеФайлы[0];
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНазначениеШаблона(Шаблон)
	Возврат ((Шаблон.НазначениеШаблона = Перечисления.НазначенияШаблонов.СписокДолжников) ИЛИ
	(Шаблон.НазначениеШаблона = Перечисления.НазначенияШаблонов.СписокДолжниковПоДоговору) ИЛИ			
	(Шаблон.НазначениеШаблона = Перечисления.НазначенияШаблонов.СписокОтозванныхДолжников));
Конецфункции

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	ФайлДанных = ""; Ошибка = "";
	
	Если Объект.ЗагрузкаВФильтр И ЗначениеЗаполнено(Объект.Шаблон) Тогда
		Если ПроверитьНазначениеШаблона(Объект.Шаблон) = Ложь Тогда
			Возврат; //Ложь;//Проверить почему это функция
		КонецЕсли; 
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДЛФ=В") + " Загрузка данных. Анализ структуры файла.");
	
	ФайлДанных = ОткрытьФайлДанных(Объект.ИмяФайла, Ошибка);
	
	Если Не ФайлДанных = Неопределено Тогда
		
		СтруктураВозврата = ПроверитьСоответствиеШаблону(ФайлДанных, Объект.Шаблон);
		Если СтруктураВозврата.Рез Тогда
			ТаблицаКолонок = СтруктураВозврата.ТаблицаКолонок;
			ТаблицаДолжников = "";
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ПроверитьСоответствиеШаблону......ДА");
			
			ВсегоСтрок = ФайлДанных.Cells(1,1).SpecialCells(11).Row;
			ВсегоКолонок = ТаблицаКолонок["НомерКолонки"].Количество();
			ВсегоКолонокВФайле = ФайлДанных.Cells(1,1).SpecialCells(11).Column;
			//тянем со второй строки, т.к. первая строка - заголовок.
			МассивДанных = ФайлДанных.Range(ФайлДанных.Cells(2, 1), ФайлДанных.Cells(ВсегоСтрок, ВсегоКолонокВФайле)).Value.Выгрузить();
			ФайлДанных = "";
			ЗагрузитьДанныеИзФайла(МассивДанных, Объект.Шаблон, ТаблицаКолонок, Объект.ДатаЗагрузки,
				ТаблицаДолжников, Объект.ПробоватьИсправитьНомерДоговора, Объект.Банк,Объект.Ответственный,
				Объект.ЗагрузкаДанныхПоНомеруДоговора, Объект.Реестр, Объект.НеЗагружатьВРеестрПриНаличииДоговора, ВсегоКолонок);
				//МРС(
				Если Объект.ТаблицаДопПроверки.Количество() > 0 Тогда
					Элементы.СтраницыОбработки.ТекущаяСтраница = Элементы.ДопПроверка;
					Возврат;
				КонецЕсли;
				//МРС)
			Попытка
				ТаблицаЗначенийЗагрузки = ТаблицаДолжников.Скопировать();
			Исключение
			КонецПопытки;
			//Если форма открыта из фильтра - загрузить список должников
			Если Объект.ЗагрузкаВФильтр Тогда
				Должники = ЭтаФорма.ВладелецФормы.Должники;
				Для каждого СтрТаблицаДолжников Из ТаблицаДолжников Цикл
					СтрДолжники = Должники.Добавить();
					СтрДолжники.Должник = СтрТаблицаДолжников.Должник;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка открытия файла. Проверьте имя файла.";
		Сообщение.Сообщить();
	КонецЕсли;
	
	//Возврат Истина;
КонецПроцедуры

// Выбор шаблона
&НаСервере
Функция ЗагрузитьДанныеИзФайла(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки = "", ТаблицаДолжников = "", ПробоватьИсправитьНомерДоговора = 0, Банк,Ответственный = "", ЗагрузкаДанныхПоНомеруДоговора = Ложь, Реестр = Неопределено, НеЗагружатьВРеестрПриНаличииДоговора = Ложь, ВсегоКолонок) Экспорт
	Если ДатаЗагрузки = "" Тогда
		ДатаЗагрузки = ТекущаяДата();
	КонецЕсли; 
	Если Ответственный = "" Тогда
		ОтветственныйТ = ПараметрыСеанса.Пользователь.Ссылка;
	Иначе
		ОтветственныйТ = Ответственный.Ссылка;
	КонецЕсли; 
	
	// Назначение шаблона
	Если ШаблонСсылка.НазначениеШаблона = Перечисления.НазначенияШаблонов.СписокДолжников Тогда
		ТаблицаДолжников = Новый ТаблицаЗначений;
		Возврат ЗагрузитьДанные_СписокДолжников(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ВсегоКолонок);
		
	ИначеЕсли ШаблонСсылка.НазначениеШаблона = Перечисления.НазначенияШаблонов.СписокДолжниковПоДоговору Тогда
		ТаблицаДолжников = Новый ТаблицаЗначений;
		Возврат ЗагрузитьДанные_СписокДолжниковПоДоговору(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ПробоватьИсправитьНомерДоговора,ВсегоКолонок);
		
	ИначеЕсли ШаблонСсылка.НазначениеШаблона = Перечисления.НазначенияШаблонов.ЗагрузкаРеестра Тогда
		Возврат ЗагрузитьДанные_ЗагрузкаРеестра(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки, Банк,ОтветственныйТ, ЗагрузкаДанныхПоНомеруДоговора, Реестр, НеЗагружатьВРеестрПриНаличииДоговора,ВсегоКолонок);
		
	ИначеЕсли ШаблонСсылка.НазначениеШаблона = Перечисления.НазначенияШаблонов.ЗагрузкаКонтакта Тогда
		Возврат ЗагрузитьДанные_ЗагрузкаКонтакта(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки, Банк,ОтветственныйТ,ВсегоКолонок);
		
	ИначеЕсли ШаблонСсылка.НазначениеШаблона = Перечисления.НазначенияШаблонов.ОбновлениеРеестра Тогда
		Возврат ЗагрузитьДанные_ОбновлениеРеестра(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки,ВсегоКолонок);
		
	ИначеЕсли ШаблонСсылка.НазначениеШаблона = Перечисления.НазначенияШаблонов.ЗагрузкаПлатежей Тогда
		Возврат ЗагрузитьДанные_ЗагрузкаПлатежей(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки,ВсегоКолонок);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для данного шаблона не выбрано назначение. Загрузка невозможна.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли; 
КонецФункции

&НасервереБезконтекста
Процедура ДобавитьДанныеВТаблицу(Таблица, Значение, Реквизит, Поиск = Ложь, Тип = Неопределено)
	Перем ПараметрыОтбора, НайденныеСтроки;
	
	// Найдём строки в таблице, где есть данный реквизит
	// их может быть несколько
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Реквизит", 	Реквизит);
	ПараметрыОтбора.Вставить("Тип", 		Тип);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Таблица.Добавить();
		НайденнаяСтрока.Реквизит 	= Реквизит;
		НайденнаяСтрока.Значение 	= Значение;
		НайденнаяСтрока.Поиск		= Поиск;
		НайденнаяСтрока.Тип			= Тип;
	Иначе
		// Если такой реквизит уже есть в таблице - данные добавляются
		НайденнаяСтрока = НайденныеСтроки[0];
		//НайденнаяСтрока.Значение 	= ?(НайденнаяСтрока.Значение <> "", НайденнаяСтрока.Значение + " ", "") + Значение;
		Если Реквизит = "НомерПаспорта" Тогда
			НайденнаяСтрока.Значение 	= СокрЛП(НайденнаяСтрока.Значение)+СокрЛП(Значение);
		ИначеЕсли Реквизит = "НомерДоговора" Тогда
			Если ПустаяСтрока(НайденнаяСтрока.Значение) Тогда
				НайденнаяСтрока.Значение 	= Значение;
			КонецЕсли;	
		Иначе
			Если ПустаяСтрока(НайденнаяСтрока.Значение) Тогда
				НайденнаяСтрока.Значение 	= Значение;
			Иначе
				НайденнаяСтрока.Значение 	= СокрЛП(НайденнаяСтрока.Значение)+" "+СокрЛП(Значение);
			КонецЕсли;	
		КонецЕсли;
		
		//НайденнаяСтрока.Поиск		= Поиск;
	КонецЕсли;
	
КонецПроцедуры

// Получаем список и дополняем необходимыми реквизитами
// из Таблицы
// Шаблон значения - [Таблица.Реквизит]
&НаСервереБезконтекста
Функция ДополнитьСписокНеобходимыхРеквизитов(Таблица, СписокНеобходимыхРеквизитов, ТаблицаШаблона) Экспорт
	Перем ПараметрыОтбора, НайденныеСтроки;
	
	// Найдём строки в общей таблице, где есть данный заголовок
	// их может быть несколько
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Поиск", Истина);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	
	// Проставить НомерКолонки
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
	    СписокНеобходимыхРеквизитов.Добавить(ТаблицаШаблона + "." + СтрокаТЗ.Реквизит);
	КонецЦикла; 
	
	Возврат СписокНеобходимыхРеквизитов;	
КонецФункции // ДополнитьСписокНеобходимыхРеквизитов()

&НаСервере
// (1) Должники
Функция ЗагрузитьДанные_СписокДолжников(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ВсегоКолонок)
	Перем ДанныеДолжника;
	ТаблицаДолжников = Новый ТаблицаЗначений;
	ТаблицаДолжников.Колонки.Добавить("Должник"); // Элемент справочника
	
	// Создать таблицы для данных
	ДанныеДолжника = СоздатьТаблицуРеквизитов("Должники");
	
	// Обязательные реквизиты ФИО и ДР
	СписокНеобходимыхРеквизитов = Новый СписокЗначений;
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеДолжника, СписокНеобходимыхРеквизитов, "Должники");
	
	// Проходим построчно файл начиная со второй строки
	// Пока не встретится целая строка без данных (учитываются только необходимые нам данные)
	ТекСтрока = 0;
	ВсяСтрока = "начало";
	Пока ВсяСтрока <> "" Цикл
		ВсяСтрока = "";
		СписокНеобходимыхРеквизитов.ЗаполнитьПометки(Ложь);
		ДанныеДолжника = СоздатьТаблицуРеквизитов("Должники");
		
		// Пройдёмся по колонкам из таблицы
		н = 0;
		Пока н < ВсегоКолонок Цикл
			КолонкаФайла 		= ТаблицаКолонок["НомерКолонки"][н];
			ТекРеквизит 		= ТаблицаКолонок["Реквизит"][н];
			ТекТаблицаШаблона	= ТаблицаКолонок["ТаблицаШаблона"][н];
			
			Попытка
				Значение = СокрЛП(Строка(ФайлДанных[КолонкаФайла-1][ТекСтрока]));
				
				Если ТекРеквизит = "Фамилия" Тогда
					КолПроб = СтрЧислоВхождений(Значение," ");
					Если КолПроб > 0 Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Проверьте правильность ФИО"; 
						Сообщение.Сообщить();
						
						//Сообщить("Проверьте правильность ФИО");
						//ИначеЕсли КолПроб > 0 Тогда
						НомПроб = Найти(Значение," ");
						Значение = СокрЛП(Лев(Значение,НомПроб));
					КонецЕсли;
				ИначеЕсли ТекРеквизит = "Имя" Тогда
					КолПроб = СтрЧислоВхождений(Значение," ");
					Если КолПроб > 0 Тогда
						НомПроб = Найти(Значение," ");
						Значение = СокрЛП(Сред(Значение,НомПроб));
						НомПроб = Найти(Значение," ");
						Значение = СокрЛП(Лев(Значение,НомПроб));
					КонецЕсли;
				ИначеЕсли ТекРеквизит = "Отчество" Тогда
					КолПроб = СтрЧислоВхождений(Значение," ");
					Если КолПроб > 0 Тогда
						НомПроб = Найти(Значение," ");
						Значение = СокрЛП(Сред(Значение,НомПроб));
						НомПроб = Найти(Значение," ");
						Значение = СокрЛП(Сред(Значение,НомПроб));
					КонецЕсли;
				ИначеЕсли ТекРеквизит = "НомерПаспорта" Тогда
					НомерПаспорта = "";
					ТекСтр = Значение;
					НомСтр = 0;
					Пока НомСтр <= 50 Цикл
						НомСтр = НомСтр + 1;
						ТекБуква = СокрЛП(Лев(ТекСтр,1));
						Если ПустаяСтрока(ТекСтр) Тогда
							ТекСтр = СокрЛП(Сред(ТекСтр,2));
							Продолжить;
						Иначе
							Попытка
								ТекБуква = Число(ТекБуква);
								НомерПаспорта = СокрЛП(НомерПаспорта)+Строка(ТекБуква);
							Исключение
								ТекСтр = СокрЛП(Сред(ТекСтр,2));
								Продолжить;
							КонецПопытки;
						КонецЕсли;	
						ТекСтр = СокрЛП(Сред(ТекСтр,2));
						Если  СтрДлина(НомерПаспорта)>=10 Тогда
							Значение = НомерПаспорта;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ВсяСтрока = ВсяСтрока + Значение; 		
				
			Исключение
				ВсяСтрока = "";
				Значение = "";
			КонецПопытки;

			
			// Если значение из файла считано, но оно пустое - не отмечаем обязательный реквизит
			Если Значение = "" Тогда
				Продолжить;	
			ИначеЕсли ТекРеквизит = "ДатаРождения" Тогда
				Попытка
					Значение = Лев(Значение, 10);
					Значение = Дата(Прав(Значение, 4) + Сред(Значение, 4, 2) + Лев(Значение, 2));
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Ошибочная дата в строке: " + Строка(ТекСтрока); 
					Сообщение.Сообщить()
					//Сообщить("Ошибочная дата в строке: " + Строка(ТекСтрока), СтатусСообщения.Важное);
				КонецПопытки; 
			КонецЕсли; 
			
			// Найти и отметить, если Необходимый
			ТекЭлемент = СписокНеобходимыхРеквизитов.НайтиПоЗначению(ТекТаблицаШаблона + "." + ТекРеквизит);
			Если ТекЭлемент <> Неопределено Тогда
				ТекЭлемент.Пометка = Истина;
			КонецЕсли; 
			
			Если ТекТаблицаШаблона = "Должники" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДолжника, Значение, ТекРеквизит);
			КонецЕсли; 
			н=н+1;
		КонецЦикла; 
		
		//#МРС не используется в сервернойна стороне сервера, если это критично то лучше выводить в сообщение пользователю.
		//Состояние(ВсяСтрока + " " + Строка(ТекСтрока));  
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ВсяСтрока + " " + Строка(ТекСтрока);
		Сообщение.Сообщить();
		//#МРС
		
		ТекСтрока = ТекСтрока + 1;
		
		// Проверка обязательных реквизитов
		Если ВсяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Записывать = Истина;
		Для каждого Реквизит Из СписокНеобходимыхРеквизитов Цикл
		    Если НЕ Реквизит.Пометка Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение; 
				Сообщение.Сообщить();

				//Сообщить("В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение, СтатусСообщения.Важное);
				Записывать = Ложь;
			КонецЕсли; 		
		КонецЦикла; 
		
		// Если всё ОК - запишем данные
		Если Записывать Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Должники.Ссылка КАК Должник
			|ИЗ
			|	Справочник.Должники КАК Должники
			|ГДЕ
			|	Должники.НомерПаспорта = &НомерПаспорта
			|
			|СГРУППИРОВАТЬ ПО
			|	Должники.Ссылка";
	
			Запрос.УстановитьПараметр("НомерПаспорта", 	ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "НомерПаспорта"));
			ТекКлиент = Справочники.Должники.ПустаяСсылка();
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда
				Для Каждого СтрРез Из Результат Цикл
					ТекКлиент = СтрРез.Должник;
				КонецЦикла;
			КонецЕсли;
			Если ТекКлиент = Справочники.Должники.ПустаяСсылка() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Должники.Ссылка КАК Должник
				|ИЗ
				|	Справочник.Должники КАК Должники
				|ГДЕ
				|	Должники.Фамилия = &Фамилия
				|	И Должники.Имя = &Имя
				|	И Должники.Отчество = &Отчество
				|
				|СГРУППИРОВАТЬ ПО
				|	Должники.Ссылка";
	
				Запрос.УстановитьПараметр("Фамилия", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Фамилия"));
				Запрос.УстановитьПараметр("Имя", 			ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Имя"));
				Запрос.УстановитьПараметр("Отчество", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Отчество"));
				Запрос.УстановитьПараметр("ДатаРождения", 	Дата(ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "ДатаРождения")));
				Результат = Запрос.Выполнить().Выгрузить();
				Если Результат.Количество() > 0 Тогда
					НомерПаспорта = ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "НомерПаспорта");
					Для Каждого СтрРез Из Результат Цикл
						Должник = СтрРез.Должник;
						Если ПустаяСтрока(Должник.НомерПаспорта) Тогда
							ТекДолжник = Должник.ПолучитьОбъект();
							ТекДолжник.НомерПаспорта = НомерПаспорта;
							ТекДолжник.Записать();
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Должник = Справочники.Должники.СоздатьЭлемент();
		
					Для каждого СтрокаТЗ Из ДанныеДолжника Цикл
						Должник[СтрокаТЗ.Реквизит] = СтрокаТЗ.Значение;
					КонецЦикла;
		
					Должник.Записать();
		
					Должник = Должник.Ссылка;
				КонецЕсли;
				
//				Должник = Результат[0].Должник;
				Найден = Истина;
				// Создать если не найден
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Должники.Ссылка КАК Должник
				|ИЗ
				|	Справочник.Должники КАК Должники
				|ГДЕ
				|	Должники.Ссылка = &Должник
				|	И Должники.Фамилия = &Фамилия
				|	И Должники.Имя = &Имя
				|	И Должники.Отчество = &Отчество
				|
				|СГРУППИРОВАТЬ ПО
				|	Должники.Ссылка";
	
				Запрос.УстановитьПараметр("Фамилия", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Фамилия"));
				Запрос.УстановитьПараметр("Имя", 			ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Имя"));
				Запрос.УстановитьПараметр("Отчество", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Отчество"));
				Запрос.УстановитьПараметр("ДатаРождения", 	Дата(ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "ДатаРождения")));
				Запрос.УстановитьПараметр("Должник", 	ТекКлиент);
				Результат = Запрос.Выполнить().Выгрузить();
				Если Результат.Количество() > 0 Тогда
					Для Каждого СтрРез Из Результат Цикл
						Должник = СтрРез.Должник;
					КонецЦикла;
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "У клиента "+ТекКлиент+" паспортные данные не совпадают с ФИО"; 
					Сообщение.Сообщить();
					//Сообщить("У клиента "+ТекКлиент+" паспортные данные не совпадают с ФИО");
					ТекущийДолжник = Неопределено;
					Продолжить;
				КонецЕсли;
				
				Найден = Истина;
			КонецЕсли;
			ТекущийДолжник = Должник;//НайтиЭлементСправочника(ДанныеДолжника, "Должники", Истина);
			ТаблицаДолжниковСтрока = ТаблицаДолжников.Добавить();
			ТаблицаДолжниковСтрока.Должник = ТекущийДолжник;
		Иначе
			ТекущийДолжник = Неопределено;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Истина;
КонецФункции // ЗагрузитьДанные_СписокДолжников()

&НаСервере
// (1.2) Должники
Функция ЗагрузитьДанные_СписокДолжниковПоДоговору(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ПробоватьИсправитьНомерДоговора = 0,ВсегоКолонок)
	ТаблицаДолжников = Новый ТаблицаЗначений;
	ТаблицаДолжников.Колонки.Добавить("Должник"); // Элемент справочника
	ТаблицаДолжников.Колонки.Добавить("Договор"); // Элемент справочника
	
	// Создать таблицы для данных
	ДанныеДоговора 				= СоздатьТаблицуРеквизитов("ДоговорыОбновление");
	ДанныеДополнительныеКолонки = СоздатьТаблицуРеквизитов("ДанныеДополнительныеКолонки",ШаблонСсылка);

	// Обязательные реквизиты ФИО и ДР
	СписокНеобходимыхРеквизитов = Новый СписокЗначений;
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеДоговора, СписокНеобходимыхРеквизитов, "Договоры");
	
	// Проходим построчно файл начиная со второй строки
	// Пока не встретится целая строка без данных (учитываются только необходимые нам данные)
	ТекСтрока = 0;
	ВсяСтрока = "начало";
	Пока ВсяСтрока <> "" Цикл
		ВсяСтрока = "";
		СписокНеобходимыхРеквизитов.ЗаполнитьПометки(Ложь);
		ДанныеДоговора = СоздатьТаблицуРеквизитов("ДоговорыОбновление");
		ДанныеДополнительныеКолонки = СоздатьТаблицуРеквизитов("ДанныеДополнительныеКолонки",ШаблонСсылка);
		
		// Пройдёмся по колонкам из таблицы
		н = 0;
		Пока н < ВсегоКолонок Цикл
			КолонкаФайла 		= ТаблицаКолонок["НомерКолонки"][н];
			Реквизит 		= ТаблицаКолонок["Реквизит"][н];
			ТаблицаШаблона	= ТаблицаКолонок["ТаблицаШаблона"][н];
			
			Значение = СокрЛП(Строка(ФайлДанных[КолонкаФайла-1][ТекСтрока]));
			
			ВсяСтрока = ВсяСтрока + Строка(Значение);
			
			// Если значение из файла считано, но оно пустое - не отмечаем обязательный реквизит
			Если Значение = "" Тогда
				Продолжить;	
			КонецЕсли; 
			
			Если Реквизит = "НомерДоговора" Тогда
				Значение = СтрЗаменить(Значение, " ", "");
				Значение = СтрЗаменить(Значение, Символ(160), "");
				ТекНомерДоговора = Значение;
			ИначеЕсли Реквизит = "ДатаОтзыва" Тогда
				Попытка
					Значение = Лев(Значение, 10);
					Значение = Дата(Прав(Значение, 4) + Сред(Значение, 4, 2) + Лев(Значение, 2));
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Ошибочная дата в строке: " + Строка(ТекСтрока); 
					Сообщение.Сообщить();

					//Сообщить("Ошибочная дата в строке: " + Строка(ТекСтрока), СтатусСообщения.Важное);
				КонецПопытки; 
			ИначеЕсли Реквизит = "Фамилия" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Проверьте правильность ФИО"; 
					Сообщение.Сообщить();

					//Сообщить("Проверьте правильность ФИО");
				//ИначеЕсли КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Лев(Значение,НомПроб));
				КонецЕсли;
			ИначеЕсли Реквизит = "Имя" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение,НомПроб));
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Лев(Значение,НомПроб));
				КонецЕсли;
			ИначеЕсли Реквизит = "Отчество" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение,НомПроб));
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение,НомПроб));
				КонецЕсли;
			ИначеЕсли Реквизит = "НомерПаспорта" Тогда
				НомерПаспорта = "";
				ТекСтр = Значение;
				НомСтр = 0;
				Пока НомСтр <= 50 Цикл
					НомСтр = НомСтр + 1;
					ТекБуква = СокрЛП(Лев(ТекСтр,1));
					Если ПустаяСтрока(ТекСтр) Тогда
						ТекСтр = СокрЛП(Сред(ТекСтр,2));
						Продолжить;
					Иначе
						Попытка
							ТекБуква = Число(ТекБуква);
							НомерПаспорта = СокрЛП(НомерПаспорта)+Строка(ТекБуква);
						Исключение
							ТекСтр = СокрЛП(Сред(ТекСтр,2));
							Продолжить;
						КонецПопытки;
					КонецЕсли;	
					ТекСтр = СокрЛП(Сред(ТекСтр,2));
					Если  СтрДлина(НомерПаспорта)>=10 Тогда
						Значение = НомерПаспорта;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Найти и отметить, если Необходимый
			ТекЭлемент = СписокНеобходимыхРеквизитов.НайтиПоЗначению(ТаблицаШаблона + "." + Реквизит);
			Если ТекЭлемент <> Неопределено Тогда
				ТекЭлемент.Пометка = Истина;
			КонецЕсли; 
			
			Если ТаблицаШаблона = "Договоры" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДоговора, Значение, Реквизит);
			ИначеЕсли ТаблицаШаблона = "ДополнительныеКолонки" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДополнительныеКолонки, Значение, Реквизит);
			КонецЕсли; 
			н = н+1;
		КонецЦикла; 
		
		//#МРС не используется в сервернойна стороне сервера, если это критично то лучше выводить в сообщение пользователю.
		//Состояние(ВсяСтрока + " - " + Строка(ТекСтрока));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ВсяСтрока + " - " + Строка(ТекСтрока); 
		Сообщение.Сообщить();
		//#МРС
		ТекСтрока = ТекСтрока + 1;
		
		Если ВсяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;
		// Проверка обязательных реквизитов
		Записывать = Истина;
		Для каждого Реквизит Из СписокНеобходимыхРеквизитов Цикл
		    Если НЕ Реквизит.Пометка Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение; 
				Сообщение.Сообщить();

				//Сообщить("В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение, СтатусСообщения.Важное);
				Записывать = Ложь;
			КонецЕсли; 		
		КонецЦикла; 
		
		// Если всё ОК - запишем данные
		Если Записывать Тогда
		    ТекущийДоговор = НайтиЭлементСправочника(ДанныеДоговора, "Договоры", Ложь);
			
			Если ТекущийДоговор.Пустая() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найден договор: " + ТекНомерДоговора; 
				Сообщение.Сообщить();
				//Сообщить("Не найден договор: " + ТекНомерДоговора);
				
				СтрокаРеквизитаНомерДоговора = ДанныеДоговора.Найти("НомерДоговора", "Реквизит");
				Если Не СтрокаРеквизитаНомерДоговора = Неопределено Тогда
					СтрокаРеквизитаНомерДоговора.Значение = "0" + СтрокаРеквизитаНомерДоговора.Значение;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Попытка найти договор, добавив ноль: " + СтрокаРеквизитаНомерДоговора.Значение; 
					Сообщение.Сообщить();

					//Сообщить("Попытка найти договор, добавив ноль: " + СтрокаРеквизитаНомерДоговора.Значение);
					
					ТекущийДоговор = НайтиЭлементСправочника(ДанныеДоговора, "Договоры", Ложь);
				КонецЕсли; 
			Иначе
				ТекущийДолжник = ТекущийДоговор.Владелец;
				ТаблицаДолжниковСтрока = ТаблицаДолжников.Добавить();
				ТаблицаДолжниковСтрока.Должник = ТекущийДолжник;
				ТаблицаДолжниковСтрока.Договор = ТекущийДоговор;
				
				ДобавитьДополнительныеРеквизитыВТаблицу(ТаблицаДолжников, ТаблицаДолжниковСтрока, ДанныеДополнительныеКолонки);
				
			КонецЕсли; 
		Иначе
			ТекущийДолжник = Неопределено;
		КонецЕсли;   
		
	КонецЦикла;

	Возврат Истина;
КонецФункции // ЗагрузитьДанные_СписокДолжниковПоДоговору()

&НаСервере
// (2) Реестр
Функция ЧтениеДанных(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ТаблицаКонтактов, ЗагрузкаДанныхПоНомеруДоговора = Ложь,ВсегоКолонок)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДанныеДолжника");
	Результат.Колонки.Добавить("ДанныеДоговора");
	Результат.Колонки.Добавить("ДанныеРеестра");
	Результат.Колонки.Добавить("ДанныеТелефонов");
	Результат.Колонки.Добавить("ДанныеАдресов");
	Результат.Колонки.Добавить("ДанныеДополнительные");
	Результат.Колонки.Добавить("ДанныеКонтакт");
	Результат.Колонки.Добавить("ДанныеДоговорЦессии");
	
	
	ТаблицаДолжников = Новый ТаблицаЗначений;
	ТаблицаДолжников.Колонки.Добавить("Должник"); // Элемент справочника
	
	// Создать таблицы для данных
	ДанныеДолжника 	= СоздатьТаблицуРеквизитов("Должники");
	ДанныеДоговора 	= СоздатьТаблицуРеквизитов("Договоры");
	ДанныеРеестра 	= СоздатьТаблицуРеквизитов("Реестр");
	ДанныеТелефонов = СоздатьТаблицуРеквизитов("Телефоны", 	ШаблонСсылка);
	ДанныеАдресов 	= СоздатьТаблицуРеквизитов("Адреса", 	ШаблонСсылка);
	ДанныеДополнительные = СоздатьТаблицуРеквизитов("ДанныеДополнительныеКолонки",ШаблонСсылка);
	ДанныеКонтакт 	= СоздатьТаблицуРеквизитов("Контакты");
	ДанныеДоговорЦессии = СоздатьТаблицуРеквизитов("ДоговорЦессии");
	
	
	// Обязательные реквизиты ФИО и ДР
	СписокНеобходимыхРеквизитов = Новый СписокЗначений;
	Если НЕ ЗагрузкаДанныхПоНомеруДоговора Тогда
		ДополнитьСписокНеобходимыхРеквизитов(ДанныеДолжника, СписокНеобходимыхРеквизитов, "Должники");
	КонецЕсли;	
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеДоговора, СписокНеобходимыхРеквизитов, "Договоры");
	
	// Пока не встретится целая строка без данных (учитываются только необходимые нам данные)
	ТекСтрока = 0;
	ВсяСтрока = "начало";
	Записывать = Истина;
	Пока НЕ ПустаяСтрока(ВсяСтрока) Цикл
		ДанныеДолжника.Очистить();
		ДанныеДоговора.Очистить();
		ДанныеРеестра.Очистить();
		ДанныеТелефонов.Очистить();
		ДанныеАдресов.Очистить();
		ДанныеДополнительные.Очистить();
		ДанныеКонтакт.Очистить();
		
		ТаблицаКонтактов.Очистить();
		ВсяСтрока = "";
		СписокНеобходимыхРеквизитов.ЗаполнитьПометки(Ложь);
		
		//НадоДоговор = Ложь;
		//НадоРеестр = Ложь;
		// Пройдёмся по колонкам из таблицы
		// Таблица содержит соответствие (реквизит_получатель <-> колонка_файла)
		н = 0;
		Пока н < ВсегоКолонок Цикл
			КолонкаФайла 		= ТаблицаКолонок["НомерКолонки"][н];
			Реквизит 		= ТаблицаКолонок["Реквизит"][н];
			ТаблицаШаблона	= ТаблицаКолонок["ТаблицаШаблона"][н];
			Тип				= ТаблицаКолонок["Тип"][н];
			
			Попытка
				Значение = СокрЛП(Строка(ФайлДанных[КолонкаФайла-1][ТекСтрока]));
				Значение = ?(ЗначениеЗаполнено(Значение), Значение, "");
				ВсяСтрока = ВсяСтрока + Значение; 				
			Исключение
				ВсяСтрока = "";
				Значение = "";
			КонецПопытки;

			
			Если Значение = "" Тогда // Если значение из файла считано, но оно пустое - не отмечаем обязательный реквизит
				н = н + 1;
				Продолжить;
			КонецЕсли; 
			
			Если Реквизит = "ВсегоЗадолженность" Тогда
				Значение = СтрЗаменить(Значение, "-", "");
			ИначеЕсли Реквизит = "ТипКредита" Тогда
				Значение = НайтиЭлементСправочникаПоНаименованию("ТипыКредитов", Значение, Истина);
			ИначеЕсли Реквизит = "Валюта" Тогда
				Значение = СтрокуВВалюту(Значение);
			ИначеЕсли Реквизит = "ДатаРождения" 
				ИЛИ Реквизит = "ДатаФинансирования" 
				ИЛИ Реквизит = "ДатаОкончанияДоговора" 
				ИЛИ Реквизит = "ДатаВозникновенияДолга" 
				ИЛИ Реквизит = "ПаспортКогдаВыдан" 
				ИЛИ Реквизит = "ДатаЕжемесячногоПлатежа" 
				ИЛИ Реквизит = "ДатаРасчетаЗадолженности" Тогда
				Попытка
					Значение = СтрокуВДату(Лев(Значение, 10));
				Исключение
					ТекстСообщения = "Ошибочная дата в строке: " + Строка(ТекСтрока); 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецПопытки; 
			КонецЕсли;
			Если Реквизит = "Фамилия" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Лев(Значение, НомПроб));
				КонецЕсли;
			ИначеЕсли Реквизит = "Имя" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение, НомПроб));
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Лев(Значение, НомПроб));
				КонецЕсли;
			ИначеЕсли Реквизит = "Отчество" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение, НомПроб));
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение, НомПроб));
				КонецЕсли;
			ИначеЕсли Реквизит = "НомерПаспорта" Тогда
				НомерПаспорта = "";
				ТекСтр = Значение;
				НомСтр = 0;
				Пока НомСтр <= 50 Цикл
					НомСтр = НомСтр + 1;
					ТекБуква = СокрЛП(Лев(ТекСтр,1));
					Если ПустаяСтрока(ТекСтр) Тогда
						ТекСтр = СокрЛП(Сред(ТекСтр,2));
						Продолжить;
					Иначе
						Попытка
							ТекБуква = Число(ТекБуква);
							НомерПаспорта = СокрЛП(НомерПаспорта)+Строка(ТекБуква);
						Исключение
							ТекСтр = СокрЛП(Сред(ТекСтр,2));
							Продолжить;
						КонецПопытки;
					КонецЕсли;	
					ТекСтр = СокрЛП(Сред(ТекСтр,2));
					Если СтрДлина(НомерПаспорта)>=10 Тогда
						Значение = НомерПаспорта;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Найти и отметить, если Необходимый
			ТекЭлемент = СписокНеобходимыхРеквизитов.НайтиПоЗначению(ТаблицаШаблона + "." + Реквизит);
			Если ТекЭлемент <> Неопределено Тогда
				ТекЭлемент.Пометка = Истина;
			КонецЕсли; 
			
			Если ТаблицаШаблона = "Должники" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДолжника, Значение, Реквизит);
			ИначеЕсли ТаблицаШаблона = "Договоры" Тогда
				//НадоДоговор = Истина;
				ДобавитьДанныеВТаблицу(ДанныеДоговора, Значение, Реквизит);
			ИначеЕсли ТаблицаШаблона = "Адреса" Тогда
				ДобавитьДанныеВТаблицу(ДанныеАдресов, Значение, Реквизит,, Тип);
			ИначеЕсли ТаблицаШаблона = "Телефоны" Тогда
				Значение = СтрокуВПредставлениеТелефона(Значение);
				ДобавитьДанныеВТаблицу(ДанныеТелефонов, Значение, Реквизит,, Тип);
			ИначеЕсли ТаблицаШаблона = "Реестр" Тогда
				ДобавитьДанныеВТаблицу(ДанныеРеестра, Значение, Реквизит);
			ИначеЕсли ТаблицаШаблона = "Контакты" Тогда
				НовСтр = ТаблицаКонтактов.Добавить();
				НовСтр.Комментарий = СокрЛП(Значение);
			ИначеЕсли ТаблицаШаблона = "ДополнительныеКолонки" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДополнительные, Значение, Реквизит, , Реквизит);
			КонецЕсли;
			н = н + 1;
		КонецЦикла; 
		
		ТекСтрока = ТекСтрока + 1;
		
		Если ВсяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка обязательных реквизитов
		Для каждого Реквизит Из СписокНеобходимыхРеквизитов Цикл
			// Договоры.Владелец будет присвоено только после записи должника
			Если (НЕ Реквизит.Пометка) И НЕ (Реквизит.Значение = "Договоры.Владелец") Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение; 
				Сообщение.Сообщить();
				Записывать = Ложь;
			КонецЕсли;
		КонецЦикла; 
		
		НоваяСтрокаРезультат = Результат.Добавить();
		НоваяСтрокаРезультат.ДанныеДолжника = ДанныеДолжника.Скопировать();
		НоваяСтрокаРезультат.ДанныеДоговора = ДанныеДоговора.Скопировать();
		НоваяСтрокаРезультат.ДанныеРеестра = ДанныеРеестра.Скопировать();
		НоваяСтрокаРезультат.ДанныеТелефонов = ДанныеТелефонов.Скопировать();
		НоваяСтрокаРезультат.ДанныеАдресов = ДанныеАдресов.Скопировать();
		НоваяСтрокаРезультат.ДанныеДополнительные = ДанныеДополнительные.Скопировать();
		НоваяСтрокаРезультат.ДанныеКонтакт = ДанныеКонтакт.Скопировать();
	КонецЦикла;
		
	Если НЕ Записывать Тогда
		ВызватьИсключение "Не заполнены обязательные поля в файле!";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаписьДанных(ТаблицаСДанными, ЗагрузкаДанныхПоНомеруДоговора = Ложь, НеЗагружатьВРеестрПриНаличииДоговора = Ложь)
	
	ТаблицаСДанными.Колонки.Добавить("Должник");
	ТаблицаСДанными.Колонки.Добавить("ЗагружатьВРеестр");
	
	ТЗ_ДопПроверка = Новый ТаблицаЗначений;
	ТЗ_ДопПроверка.Колонки.Добавить("Ссылка");
	ТЗ_ДопПроверка.Колонки.Добавить("Данные");
	
	Для Каждого ТекДанные Из ТаблицаСДанными Цикл
		
		Если ЗагрузкаДанныхПоНомеруДоговора = Ложь Тогда // Искать по НомеруПаспорта
			СтруктураПоиска = Новый Структура("НомерПаспорта",ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника, "НомерПаспорта"));
			НайденныеОбъектыПоНомеруПаспорта = НайтиСправочникПоРеквизитам("Должники", СтруктураПоиска);
			//Если у нас уже заполнена табличка соответсвий, тогда получим должника из нее
			Если НайденныеОбъектыПоНомеруПаспорта.Количество() = 0 Тогда // Искать по ФИО
				СтруктураПоиска = Новый Структура("Фамилия, Имя, Отчество", 
				ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Фамилия"), 
				ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Имя"), 
				ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Отчество"));
				НайденныеОбъектыПоФИО = НайтиСправочникПоРеквизитам("Должники", СтруктураПоиска);
				Если НайденныеОбъектыПоФИО.Количество() = 0 Тогда
					Должник = СоздатьЭлемент(Справочники.Должники, ТекДанные.ДанныеДолжника);
				Иначе // Искать в найденных по дате рождения
					СтруктураПоиска = Новый Структура("ДатаРождения",ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника, "ДатаРождения"));
					НайденныеОбъектыПоФИОиДатаРождения = НайтиСправочникПоРеквизитам(НайденныеОбъектыПоФИО, СтруктураПоиска);
					Если НайденныеОбъектыПоФИОиДатаРождения.Количество() = 0 Тогда
						Должник = СоздатьЭлемент(Справочники.Должники, ТекДанные.ДанныеДолжника);
					Иначе // необходима доп. проверка
						Если Объект.ТаблицаДопПроверки.Количество() > 0 тогда
							СтруктураПоиска = Новый Структура("НомерПаспорта",ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника, "НомерПаспорта"));
							СтрокиПоиска = Объект.ТаблицаДопПроверки.НайтиСтроки(СтруктураПоиска);
							Если СтрокиПоиска.Количество() = 0 Тогда
								СтруктураПоиска = Новый Структура("Фамилия, Имя, Отчество", 
								ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Фамилия"), 
								ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Имя"), 
								ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Отчество"));
								СтрокиПоиска = Объект.ТаблицаДопПроверки.НайтиСтроки(СтруктураПоиска);
							КонецЕсли;
							Если СтрокиПоиска.Количество() = 0 Тогда
								Должник = Справочники.Должники.ПустаяСсылка();
							Иначе
								Если СтрокиПоиска[0].СоздаватьДолжника Тогда 
									Должник = СоздатьДолжникаНаСервере(ТекДанные.ДанныеДолжника).ссылка;
								Иначе
									Должник = СтрокиПоиска[0].Ссылка;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Для Каждого ТекОбъекты Из НайденныеОбъектыПоФИОиДатаРождения Цикл
								НоваяСтрока = ТЗ_ДопПроверка.Добавить();
								НоваяСтрока.Ссылка = ТекОбъекты.Ссылка;
								НоваяСтрока.Данные = ТекДанные;
							КонецЦикла;
							Должник = Справочники.Должники.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе // Искать в найденных по ФИО
				СтруктураПоиска = Новый Структура("Фамилия, Имя, Отчество", 
				ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Фамилия"), 
				ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Имя"), 
				ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Отчество"));
				НайденныеОбъектыПоНомеруПаспортаФИО = НайтиСправочникПоРеквизитам(НайденныеОбъектыПоНомеруПаспорта, СтруктураПоиска);
				Если НайденныеОбъектыПоНомеруПаспортаФИО.Количество() = 0 Тогда // необходима доп. проверка
					Если Объект.ТаблицаДопПроверки.Количество() > 0 тогда
						СтруктураПоиска = Новый Структура("НомерПаспорта",ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника, "НомерПаспорта"));
						СтрокиПоиска = Объект.ТаблицаДопПроверки.НайтиСтроки(СтруктураПоиска);
						Если СтрокиПоиска.Количество() = 0 Тогда
							СтруктураПоиска = Новый Структура("Фамилия, Имя, Отчество", 
							ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Фамилия"), 
							ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Имя"), 
							ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДолжника,"Отчество"));
							СтрокиПоиска = Объект.ТаблицаДопПроверки.НайтиСтроки(СтруктураПоиска);
						КонецЕсли;
						Если СтрокиПоиска.Количество() = 0 Тогда
							Должник = Справочники.Должники.ПустаяСсылка();
						Иначе
							Если СтрокиПоиска[0].СоздаватьДолжника Тогда 
								Должник = СоздатьДолжникаНаСервере(ТекДанные.ДанныеДолжника).ссылка;
							Иначе  
								Должник = СтрокиПоиска[0].Ссылка;
							КонецЕсли;	
						КонецЕсли;						
					Иначе
						Для Каждого ТекОбъекты Из НайденныеОбъектыПоНомеруПаспорта Цикл
							НоваяСтрока = ТЗ_ДопПроверка.Добавить();
							НоваяСтрока.Ссылка = ТекОбъекты.Ссылка;
							НоваяСтрока.Данные = ТекДанные;
						КонецЦикла;
						Должник = Справочники.Должники.ПустаяСсылка();
					КонецЕсли;
				Иначе
					Должник = НайденныеОбъектыПоНомеруПаспортаФИО[0].Ссылка;
				КонецЕсли;	
			КонецЕсли;
						
		Иначе
			СтруктураПоиска = Новый Структура("НомерДоговора", ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.ДанныеДоговора,"НомерДоговора"));
			ТЗ_Договоры = НайтиСправочникПоРеквизитам("Договоры", СтруктураПоиска);
			Если ТЗ_Договоры.Количество() > 0 Тогда
				Должник = ТЗ_Договоры[0].Ссылка.Владелец;
			Иначе
				Должник = Неопределено;
			КонецЕсли;
		КонецЕсли;
		ТекДанные.Должник = Должник;
	КонецЦикла;
	
	// установить соответствие дополнительно
	//Форма = ПолучитьОбщуюФорму("УстановкаСоответствия");
	//Результат = Новый ТаблицаЗначений;
	Если ТЗ_ДопПроверка.Количество() = 0 Тогда
		Объект.ТаблицаДопПроверки.Очистить();
		// не загружать в реестр если уже есть договор
		Для Каждого ТекДанные Из ТаблицаСДанными Цикл
			ТекДанные.ЗагружатьВРеестр = Истина;
			Если ЗагрузкаДанныхПоНомеруДоговора Тогда
				ТекДанные.ЗагружатьВРеестр = Ложь;
			ИначеЕсли НеЗагружатьВРеестрПриНаличииДоговора Тогда
				ТекДанные.ЗагружатьВРеестр = Справочники.Договоры.НайтиПоРеквизиту("НомерДоговора",ПолучитьЗначениеРеквизитаИзТаблицы(ТекДанные.Данные.ДанныеДоговора,"НомерДоговора"),,ТекДанные.Ссылка).Пустая();
			КонецЕсли;
		КонецЦикла;

	Иначе
		Для Каждого ТекПроверка Из ТЗ_ДопПроверка Цикл
			НовСтрока = Объект.ТаблицаДопПроверки.Добавить();
			
			НовСтрока.ссылка 			= ТекПроверка.Ссылка;
			НовСтрока.Фамилия 			= ТекПроверка.Ссылка.Фамилия;
			НовСтрока.Имя 				= ТекПроверка.Ссылка.Имя;
			НовСтрока.Отчество 			= ТекПроверка.Ссылка.Отчество;
			НовСтрока.НомерПаспорта 	= ТекПроверка.Ссылка.НомерПаспорта;
			НовСтрока.ДатаРождения 		= ТекПроверка.Ссылка.ДатаРождения;
			
			НовСтрока.ФамилияФайл 		= ПолучитьЗначениеРеквизитаИзТаблицы(ТекПроверка.Данные.ДанныеДолжника,"Фамилия");
			НовСтрока.ИмяФайл 			= ПолучитьЗначениеРеквизитаИзТаблицы(ТекПроверка.Данные.ДанныеДолжника,"Имя");
			НовСтрока.ОтчествоФайл 		= ПолучитьЗначениеРеквизитаИзТаблицы(ТекПроверка.Данные.ДанныеДолжника,"Отчество");
			НовСтрока.НомерПаспортаФайл = ПолучитьЗначениеРеквизитаИзТаблицы(ТекПроверка.Данные.ДанныеДолжника,"НомерПаспорта");
			НовСтрока.ДатаРожденияФайл  = ПолучитьЗначениеРеквизитаИзТаблицы(ТекПроверка.Данные.ДанныеДолжника,"ДатаРождения");
			//НовСтрока.ДанныеДолжника = ЗначениеВСтрокуВнутр(ТекПроверка.Данные);
			
			// адреса
			Адреса = "";
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Адреса.Тип КАК Тип,
			|	Адреса.Адрес КАК Значение
			|ИЗ
			|	Справочник.Адреса КАК Адреса
			|ГДЕ
			|	Адреса.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", ТекПроверка.Ссылка);
			ТЗ_Адреса = Запрос.Выполнить().Выгрузить();
			Для Каждого ТекАдр ИЗ ТЗ_Адреса Цикл
				Адреса = Адреса + Строка(ТекАдр.Тип) + ": " + ТекАдр.Значение + "; ";
			КонецЦикла;
			НовСтрока.Адреса = Адреса;
			
			
			АдресаФайл = "";
			Для Каждого ТекАдр ИЗ ТекПроверка.Данные.ДанныеАдресов Цикл
				АдресаФайл = АдресаФайл + Строка(ТекАдр.Тип) + ": " + ТекАдр.Значение + "; ";
			КонецЦикла;
			НовСтрока.АдресаФайл = АдресаФайл;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписьДанныхНаСервере()
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлементСправочника(Значение, ИмяСправочника)
	
	
	Если ИмяСправочника="Регионы" Тогда
	
			НайденныйРегион = Справочники.Регионы.НайтиПоНаименованию(Значение,Истина);
						
						
					Если НайденныйРегион.Пустая() Тогда
							
							
							кодФССП= НайтиКодФССПРег(Значение);
							
							
							НайденныйРегион= РегионПоКодуФССП(кодФССП); 
							
							
						
						
						ТекЗначение = НайденныйРегион;
					Иначе	
						ТекЗначение = НайденныйРегион;
					КонецЕсли;
			
			

  	Иначе
					
			ТекЗначение = Справочники[ИмяСправочника].НайтиПоНаименованию(Значение,Истина);
		//    Регион
		Если ТекЗначение.Пустая() Тогда
			ТекЗначение = Справочники[ИмяСправочника].СоздатьЭлемент();
			ТекЗначение.Наименование = Значение;
			ТекЗначение.Записать();
			ТекЗначение = ТекЗначение.Ссылка;
		КонецЕсли;
				
			
	
	КонецЕсли;
	
	
	
		
	Возврат ТекЗначение;
КонецФункции

&НаСервере
Процедура ОбработкаДанных(ТаблицаСДанными, Банк, Ответственный, Документ, ДатаЗагрузки, ТаблицаКонтактов, ЗагрузкаДанныхПоНомеруДоговора = Ложь)
	ТекСтрока = 0;
	Для Каждого ТекДанные Из ТаблицаСДанными Цикл
		ТекСтрока = ТекСтрока + 1;
		
		ТекущийДолжник = ТекДанные.Должник;
		ОбновлениеДанныхОбъекта(ТекущийДолжник, ТекДанные.ДанныеДолжника);
		
		Если НЕ ЗначениеЗаполнено(ТекущийДолжник) Тогда
			Продолжить;
		КонецЕсли;
		
		// Прикрепим данные к должнику
		ДобавитьДанныеВТаблицу(ТекДанные.ДанныеДоговора, ТекущийДолжник.Ссылка, "Владелец");
		
		// Банк договора
		ДобавитьДанныеВТаблицу(ТекДанные.ДанныеДоговора, Банк, "Банк");
		
		ТекущийДоговор = НайтиЭлементСправочника(ТекДанные.ДанныеДоговора, "Договоры", Истина);
		ОбновлениеДанныхОбъекта(ТекущийДоговор, ТекДанные.ДанныеДоговора);
		
		// Адреса: Разделить по типам, записать
		МассивТЗ = РазделитьНаТаблицыПоТипам(ТекДанные.ДанныеАдресов);
		Для каждого ТЗ Из МассивТЗ Цикл
			ДобавитьДанныеВТаблицу(ТЗ, ТекущийДолжник, "Владелец", Истина, ТЗ[0].Тип);
			НайтиЭлементСправочника(ТЗ, "Адреса", Истина);
		КонецЦикла; 
		
		// Телефоны: Разделить по типам, записать
		МассивТЗ = РазделитьНаТаблицыПоТипам(ТекДанные.ДанныеТелефонов);
		Для каждого ТЗ Из МассивТЗ Цикл
			ДобавитьДанныеВТаблицу(ТЗ, ТекущийДолжник, "Владелец", Истина, ТЗ[0].Тип);
			НайтиЭлементСправочника(ТЗ, "Телефоны", Истина);
		КонецЦикла; 
		
		// Дополнительные данные
		МассивТЗ = РазделитьНаТаблицыПоТипам(ТекДанные.ДанныеДополнительные);
		Для каждого ТЗ Из МассивТЗ Цикл
			ДобавитьДанныеВТаблицу(ТЗ, ТекущийДолжник, "Владелец", Истина, ТЗ[0].Тип);
			Если ЗначениеЗаполнено(ТЗ[0].Значение) Тогда  // +Крылов 2011.02.04
				НайтиЭлементСправочника(ТЗ, "ДополнительныеДанные", Истина);
			КонецЕсли; // +Крылов 2011.02.04
		КонецЦикла; 
		
		// РЕЕСТР
		Если ТекДанные.ЗагружатьВРеестр = Истина Тогда
			ДобавитьДанныеВТаблицу(ТекДанные.ДанныеРеестра, 	ТекущийДоговор.Владелец, 	"Должник");
			ДобавитьДанныеВТаблицу(ТекДанные.ДанныеРеестра, 	ТекущийДоговор, 			"Договор");
		
			ДобавитьСтрокуВДокумент(Документ, ТекДанные.ДанныеРеестра);
			Документ.Должники[Документ.Должники.Количество()-1].Договор = ТекущийДоговор;
		КонецЕсли;
			
		//Состояние(Строка(ТекСтрока) + ") Добавлен " + Строка(ТекущийДолжник)); //#МРС не используется в сервернойна стороне сервера
		Для Каждого СтрТаб Из ТаблицаКонтактов Цикл
			Если ПустаяСтрока(СтрТаб.Комментарий) Тогда
				Продолжить;
			КонецЕсли;
			КонтД = Документы.Контакт.СоздатьДокумент();
			КонтД.Автор = ПараметрыСеанса.Пользователь.Ссылка;
			КонтД.Должник = ТекущийДолжник.Ссылка;
			КонтД.Комментарий = СтрТаб.Комментарий;
			КонтД.ТипКонтакта = Константы.ТипКомментария.Получить();
			КонтД.Дата = ДатаЗагрузки;
			КонтД.Сотрудник = Ответственный;
			СтрокаТелефоны = КонтД.Телефоны.Добавить();
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			               |	Телефоны.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Телефоны КАК Телефоны
			               |ГДЕ
			               |	Телефоны.Владелец = &Владелец
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	Телефоны.Ссылка
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Ссылка";
			
			Запрос.УстановитьПараметр("Владелец",ТекущийДолжник.Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТелефоны.Телефон = Выборка.Ссылка;
				Прервать;
			КонецЦикла;
			КонтД.Записать();
		КонецЦикла;
	КонецЦикла;		
	
КонецПроцедуры

&НаСервере
 Функция ЗагрузитьДанные_ЗагрузкаРеестра(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки, Банк,Ответственный, ЗагрузкаДанныхПоНомеруДоговора = Ложь, Реестр = Неопределено, НеЗагружатьВРеестрПриНаличииДоговора = Ложь,ВсегоКолонок)
	
	НачатьТранзакцию();

	Если ЗагрузкаДанныхПоНомеруДоговора = Ложь Тогда
		Документ = ?(ЗначениеЗаполнено(Реестр), Реестр.ПолучитьОбъект(), Документы.Реестр.СоздатьДокумент());
		Документ.Банк = Банк;
		Документ.Должники.Очистить();
	КонецЕсли;
	
	// Проходим построчно файл начиная со второй строки
	ТаблицаКонтактов = Новый ТаблицаЗначений;
	ТаблицаКонтактов.Колонки.Добавить("Комментарий");
	ТаблицаСДанными = ЧтениеДанных(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ТаблицаКонтактов, ЗагрузкаДанныхПоНомеруДоговора, ВсегоКолонок);
	
	// Если всё ОК - запишем данные
	ЗаписьДанных(ТаблицаСДанными, ЗагрузкаДанныхПоНомеруДоговора, НеЗагружатьВРеестрПриНаличииДоговора);
	Если Объект.ТаблицаДопПроверки.Количество()> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	// обработка после загрузки должников
	ОбработкаДанных(ТаблицаСДанными, Банк, Ответственный, Документ, ДатаЗагрузки, ТаблицаКонтактов, ЗагрузкаДанныхПоНомеруДоговора);

	Если ЗагрузкаДанныхПоНомеруДоговора = Ложь Тогда
		Попытка
			Если Документ.Должники.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Рееестр не создан. Отсутствуют загруженные должники.");
			Иначе
				Документ.Дата = ДатаЗагрузки;	
				Документ.Записать();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Записан " + Строка(Документ), Документ);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Не удалось записать документ Реестр. " + ОписаниеОшибки(); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
КонецФункции // ЗагрузитьДанные_ЗагрузкаРеестра()

// (3) Обновление Реестра
&НаСервере
Функция ЗагрузитьДанные_ЗагрузкаКонтакта(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки, Банк,Ответственный,ВсегоКолонок)
	Перем Документ;
	
	ТаблицаДолжников = Новый ТаблицаЗначений;
	ТаблицаДолжников.Колонки.Добавить("Должник"); // Элемент справочника
	
	// Создать таблицы для данных
	ДанныеДолжника 	= СоздатьТаблицуРеквизитов("Должники");
	ДанныеКонтактД 	= СоздатьТаблицуРеквизитов("Контакт");
	ДанныеТелефонов = СоздатьТаблицуРеквизитов("Телефоны", 	ШаблонСсылка);
	ДанныеАдресов 	= СоздатьТаблицуРеквизитов("Адреса", 	ШаблонСсылка);
	
	// Обязательные реквизиты ФИО и ДР
	СписокНеобходимыхРеквизитов = Новый СписокЗначений;
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеДолжника, СписокНеобходимыхРеквизитов, "Должники");
	
	// Проходим построчно файл начиная со второй строки
	// Пока не встретится целая строка без данных (учитываются только необходимые нам данные)
	ТекСтрока = 0;
	ВсяСтрока = "начало";
	Пока НЕ ПустаяСтрока(ВсяСтрока) Цикл
		ВсяСтрока = "";
		СписокНеобходимыхРеквизитов.ЗаполнитьПометки(Ложь);
		// Создать таблицы для данных
		ДанныеДолжника = СоздатьТаблицуРеквизитов("Должники");
		ДанныеТелефонов = СоздатьТаблицуРеквизитов("Телефоны", 	ШаблонСсылка);
		ДанныеАдресов = СоздатьТаблицуРеквизитов("Адреса",	ШаблонСсылка);
		ДанныеКонтактД = СоздатьТаблицуРеквизитов("Контакт");
		
		НадоКонтакт = Ложь;
		// Пройдёмся по колонкам из таблицы
		// Таблица содержит соответствие (реквизит_получатель <-> колонка_файла)
		н = 0;
		Пока н < ВсегоКолонок Цикл
			КолонкаФайла 		= ТаблицаКолонок["НомерКолонки"][н];
			Реквизит 		= ТаблицаКолонок["Реквизит"][н];
			ТаблицаШаблона	= ТаблицаКолонок["ТаблицаШаблона"][н];
			Тип				= ТаблицаКолонок["Тип"][н];
			
			Попытка
				Значение = СокрЛП(Строка(ФайлДанных[КолонкаФайла-1][ТекСтрока]));
				ВсяСтрока = ВсяСтрока + Значение;
			Исключение
				ВсяСтрока = "";
				Значение = "";
			КонецПопытки;
			
			// Если значение из файла считано, но оно пустое - не отмечаем обязательный реквизит
			Если Значение = "" Тогда
				н = н + 1;
				Продолжить;	
			КонецЕсли; 
			
			Если Реквизит = "ВсегоЗадолженность" Тогда
				Значение = СтрЗаменить(Значение, "-", "");
			ИначеЕсли Реквизит = "ТипКредита" Тогда
				Значение = НайтиЭлементСправочникаПоНаименованию("ТипыКредитов", Значение, Истина);
			ИначеЕсли Реквизит = "Валюта" Тогда
				Значение = НайтиЭлементСправочникаПоНаименованию("Валюты", Значение, Истина);
			ИначеЕсли Реквизит = "ДатаРождения" Тогда
				Попытка
					Значение = Лев(Значение, 10);
					Значение = Дата(Прав(Значение, 4) + Сред(Значение, 4, 2) + Лев(Значение, 2));
				Исключение
					ТекстСообщения = "Ошибочная дата в строке: " + Строка(ТекСтрока); 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецПопытки; 
			КонецЕсли;
			Если Реквизит = "Фамилия" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					ТекстСообщения = "Проверьте правильность ФИО"; 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Лев(Значение,НомПроб));
				КонецЕсли;
			КонецЕсли;
			Если Реквизит = "Имя" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение,НомПроб));
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Лев(Значение,НомПроб));
				КонецЕсли;
			КонецЕсли;
			Если Реквизит = "Отчество" Тогда
				КолПроб = СтрЧислоВхождений(Значение," ");
				Если КолПроб > 0 Тогда
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение,НомПроб));
					НомПроб = Найти(Значение," ");
					Значение = СокрЛП(Сред(Значение,НомПроб));
				КонецЕсли;
			КонецЕсли;
			Если Реквизит = "НомерПаспорта" Тогда
				НомерПаспорта = "";
				ТекСтр = Значение;
				НомСтр = 0;
				Пока НомСтр <= 50 Цикл
					НомСтр = НомСтр + 1;
					ТекБуква = СокрЛП(Лев(ТекСтр,1));
					Если ПустаяСтрока(ТекСтр) Тогда
						ТекСтр = СокрЛП(Сред(ТекСтр,2));
						Продолжить;
					Иначе
						Попытка
							ТекБуква = Число(ТекБуква);
							НомерПаспорта = СокрЛП(НомерПаспорта)+Строка(ТекБуква);
						Исключение
							ТекСтр = СокрЛП(Сред(ТекСтр,2));
							Продолжить;
						КонецПопытки;
					КонецЕсли;	
					ТекСтр = СокрЛП(Сред(ТекСтр,2));
					Если  СтрДлина(НомерПаспорта)>=10 Тогда
						Значение = НомерПаспорта;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Найти и отметить, если Необходимый
			ТекЭлемент = СписокНеобходимыхРеквизитов.НайтиПоЗначению(ТаблицаШаблона + "." + Реквизит);
			Если ТекЭлемент <> Неопределено Тогда
				ТекЭлемент.Пометка = Истина;
			КонецЕсли; 
			
			Если ТаблицаШаблона = "Должники" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДолжника, Значение, Реквизит);
			ИначеЕсли ТаблицаШаблона = "Адреса" Тогда
				ДобавитьДанныеВТаблицу(ДанныеАдресов, Значение, Реквизит,, Тип);
			ИначеЕсли ТаблицаШаблона = "Телефоны" Тогда
				ДобавитьДанныеВТаблицу(ДанныеТелефонов, Значение, Реквизит,, Тип);
			ИначеЕсли ТаблицаШаблона = "Контакт" Тогда
				НадоКонтакт = Истина;
				ДобавитьДанныеВТаблицу(ДанныеКонтактД, Значение, Реквизит);
			КонецЕсли;
			н = н+1;
		КонецЦикла; 
		
		ТекСтрока = ТекСтрока + 1;
		
		Если ВсяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;
		// Проверка обязательных реквизитов
		Записывать = Истина;
		Для каждого Реквизит Из СписокНеобходимыхРеквизитов Цикл
			// Договоры.Владелец будет присвоено только после записи должника
			Если (НЕ Реквизит.Пометка) И НЕ (Реквизит.Значение = "Договоры.Владелец") Тогда
				ТекстСообщения = "В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение; 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Записывать = Ложь;
			КонецЕсли;
		КонецЦикла; 
		
		// Если всё ОК - запишем данные
		Если Записывать Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Должники.Ссылка КАК Должник
			|ИЗ
			|	Справочник.Должники КАК Должники
			|ГДЕ
			|	Должники.НомерПаспорта = &НомерПаспорта
			|
			|СГРУППИРОВАТЬ ПО
			|	Должники.Ссылка";
			
			Запрос.УстановитьПараметр("НомерПаспорта", 	ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "НомерПаспорта"));
			ТекКлиент = Справочники.Должники.ПустаяСсылка();
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда
				Для Каждого СтрРез Из Результат Цикл
					ТекКлиент = СтрРез.Должник;
				КонецЦикла;
			КонецЕсли;
			Если ТекКлиент = Справочники.Должники.ПустаяСсылка() Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Должники.Ссылка КАК Должник
				|ИЗ
				|	Справочник.Должники КАК Должники
				|ГДЕ
				|	Должники.Фамилия = &Фамилия
				|	И Должники.Имя = &Имя
				|	И Должники.Отчество = &Отчество
				|
				|СГРУППИРОВАТЬ ПО
				|	Должники.Ссылка";
				
				Запрос.УстановитьПараметр("Фамилия", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Фамилия"));
				Запрос.УстановитьПараметр("Имя", 			ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Имя"));
				Запрос.УстановитьПараметр("Отчество", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Отчество"));
				Запрос.УстановитьПараметр("ДатаРождения", 	Дата(ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "ДатаРождения")));
				Результат = Запрос.Выполнить().Выгрузить();
				
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщ = "Не найден должник - ";
				
				Если Результат.Количество() > 0 Тогда
					НомерПаспорта = ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "НомерПаспорта");
					ЕстьДолж = Ложь;
					Для Каждого СтрРез Из Результат Цикл
						Должник = СтрРез.Должник;
						Если ПустаяСтрока(Должник.НомерПаспорта) Тогда
							ТекДолжник = Должник.ПолучитьОбъект();
							ТекДолжник.НомерПаспорта = НомерПаспорта;
							ТекДолжник.Записать();
							ЕстьДолж = Истина;
							Прервать;
						КонецЕсли;
						Если Объект.ЗаменятьПаспортныеДанные Тогда
							ТекДолжник = Должник.ПолучитьОбъект();
							ТекДолжник.НомерПаспорта = НомерПаспорта;
							ТекДолжник.Записать();
							ЕстьДолж = Истина;
							Прервать;
						КонецЕсли; 
					КонецЦикла;
					Если ЕстьДолж = Ложь Тогда
						Для каждого СтрокаТЗ Из ДанныеДолжника Цикл
							ТекстСообщ = ТекстСообщ + Строка(СтрокаТЗ.Значение)+символы.ПС;
						КонецЦикла;
						
						Продолжить;
					КонецЕсли;
				Иначе
					
					Для каждого СтрокаТЗ Из ДанныеДолжника Цикл
						ТекстСообщ = ТекстСообщ + Строка(СтрокаТЗ.Значение)+символы.ПС;
					КонецЦикла;
					Продолжить;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщ);
				Найден = Истина;
				// Создать если не найден
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Должники.Ссылка КАК Должник
				|ИЗ
				|	Справочник.Должники КАК Должники
				|ГДЕ
				|	Должники.Ссылка = &Должник
				|	И Должники.Фамилия = &Фамилия
				|	И Должники.Имя = &Имя
				|	И Должники.Отчество = &Отчество
				|
				|СГРУППИРОВАТЬ ПО
				|	Должники.Ссылка";
				
				Запрос.УстановитьПараметр("Фамилия", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Фамилия"));
				Запрос.УстановитьПараметр("Имя", 			ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Имя"));
				Запрос.УстановитьПараметр("Отчество", 		ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "Отчество"));
				Запрос.УстановитьПараметр("ДатаРождения", 	Дата(ПолучитьЗначениеРеквизитаИзТаблицы(ДанныеДолжника, "ДатаРождения")));
				Запрос.УстановитьПараметр("Должник", 	ТекКлиент);
				Результат = Запрос.Выполнить().Выгрузить();
				Если Результат.Количество() > 0 Тогда
					Для Каждого СтрРез Из Результат Цикл
						Должник = СтрРез.Должник;
					КонецЦикла;
				Иначе
					Если Объект.ПродолжитьЕслиФИОНеСовпадает Тогда
						ТекущийДолжник = Неопределено;
						Продолжить;
					Иначе  
						Должник = ТекКлиент;
					КонецЕсли; 
				КонецЕсли;
				
				//				Должник = Результат[0].Должник;
				Найден = Истина;
			КонецЕсли; 
			
			ТекущийДолжник = Должник;//НайтиЭлементСправочника(ДанныеДолжника, "Должники", Истина);
			//			ТаблицаДолжниковСтрока = ТаблицаДолжников.Добавить();
			//			ТаблицаДолжниковСтрока.Должник = ТекущийДолжник;
			//		    ТекущийДолжник = НайтиЭлементСправочника(ДанныеДолжника, "Должники", Истина);
			// Прикрепим данные к должнику
			//			ДобавитьДанныеВТаблицу(ДанныеДоговора, ТекущийДолжник.Ссылка, "Владелец");
			
			// Банк договора
			//			ДобавитьДанныеВТаблицу(ДанныеДоговора, Банк, "Банк");
			
			//			ТекущийДоговор = НайтиЭлементСправочника(ДанныеДоговора, "Договоры", Истина);
			
			// Адреса: Разделить по типам, записать
			МассивТЗ = РазделитьНаТаблицыПоТипам(ДанныеАдресов);
			Для каждого ТЗ Из МассивТЗ Цикл
				ДобавитьДанныеВТаблицу(ТЗ, ТекущийДолжник, "Владелец", Истина, ТЗ[0].Тип);
				НайтиЭлементСправочника(ТЗ, "Адреса", Истина);
			КонецЦикла; 
			
			// Телефоны: Разделить по типам, записать
			МассивТЗ = РазделитьНаТаблицыПоТипам(ДанныеТелефонов);
			Для каждого ТЗ Из МассивТЗ Цикл
				ДобавитьДанныеВТаблицу(ТЗ, ТекущийДолжник, "Владелец", Истина, ТЗ[0].Тип);
				НайтиЭлементСправочника(ТЗ, "Телефоны", Истина);
			КонецЦикла; 
			
			// Дополнительные данные
			
			// РЕЕСТР
			ДобавитьДанныеВТаблицу(ДанныеКонтактД, 	ТекущийДолжник, 	"Должник");
			//			ДобавитьДанныеВТаблицу(ДанныеРеестра, 	ТекущийДоговор, 			"Договор");
			Документ = Документы.Контакт.СоздатьДокумент();
			
			ДобавитьСтрокуВДокументК(Документ, ДанныеКонтактД);
			
			
			//#МРС не используется в сервернойна стороне сервера, если это критично то лучше выводить в сообщение пользователю.
			ТекстСообщения = Строка(ТекСтрока) + ") Добавлен " + Строка(ТекущийДолжник); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			//#МРС
			
			Если ПустаяСтрока(Документ.Автор) Тогда
				Документ.Автор = ПараметрыСеанса.Пользователь.Ссылка;
			КонецЕсли;
			Если ПустаяСтрока(Документ.Должник) Тогда
				Документ.Должник = ТекущийДолжник.Ссылка;
			КонецЕсли;
			Если ПустаяСтрока(Документ.ТипКонтакта) Тогда
				Документ.ТипКонтакта = Константы.ТипКомментария.Получить();
			КонецЕсли;
			Если Документ.Дата = '00010101000000' Тогда
				Документ.Дата = ДатаЗагрузки;
			КонецЕсли;
			Если ПустаяСтрока(Документ.Сотрудник) Тогда
				Документ.Сотрудник = Ответственный;
			КонецЕсли;
			СтрокаТелефоны = Документ.Телефоны.Добавить();
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	Телефоны.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Телефоны КАК Телефоны
			|ГДЕ
			|	Телефоны.Владелец = &Владелец
			|
			|СГРУППИРОВАТЬ ПО
			|	Телефоны.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка";
			
			Запрос.УстановитьПараметр("Владелец",ТекущийДолжник.Ссылка);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТелефоны.Телефон = Выборка.Ссылка;
				Прервать;
			КонецЦикла;
			
			Сообщение = Новый СообщениеПользователю;
			
			Попытка
				Документ.Записать();
				Сообщение.Текст = "Записан " + Строка(Документ); 
				//Сообщить("Записан " + Строка(Документ));
			Исключение
				Сообщение.Текст = "Не удалось записать документ Реестр. " + ОписаниеОшибки(); 
				//Сообщить("Не удалось записать документ Реестр. " + ОписаниеОшибки());
			КонецПопытки;
			Сообщение.Сообщить();
			
		Иначе
			ТекущийДолжник = Неопределено;
		КонецЕсли;   
	КонецЦикла;
	
	
	Возврат Истина;
КонецФункции // ЗагрузитьДанные_ЗагрузкаРеестра()

&НаСервере
Функция ЗагрузитьДанные_ОбновлениеРеестра(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки,ВсегоКолонок)
    Перем Документ;
	
	Документ = Документы.ОбновлениеРеестра.СоздатьДокумент();
	
	// Создать таблицы для данных
	ДанныеДоговора 	= СоздатьТаблицуРеквизитов("ДоговорыОбновление");
	ДанныеРеестра 	= СоздатьТаблицуРеквизитов("ОбновлениеРеестра");
	
	// Обязательные реквизиты ФИО и ДР
	СписокНеобходимыхРеквизитов = Новый СписокЗначений;
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеРеестра, 	СписокНеобходимыхРеквизитов, "ОбновлениеРеестра");
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеДоговора, 	СписокНеобходимыхРеквизитов, "Договоры");
	
	// Проходим построчно файл начиная со второй строки
	// Пока не встретится целая строка без данных (учитываются только необходимые нам данные)
	ТекСтрока = 0;
	ВсяСтрока = "начало";
	Пока ВсяСтрока <> "" Цикл
		ВсяСтрока = "";
		СписокНеобходимыхРеквизитов.ЗаполнитьПометки(Ложь);
		ДанныеДоговора 	= СоздатьТаблицуРеквизитов("ДоговорыОбновление");
		ДанныеРеестра 	= СоздатьТаблицуРеквизитов("ОбновлениеРеестра");
		
		// Пройдёмся по колонкам из таблицы
		н = 0;
		Пока н < ВсегоКолонок Цикл
			КолонкаФайла 		= ТаблицаКолонок["НомерКолонки"][н];
			Реквизит 		= ТаблицаКолонок["Реквизит"][н];
			ТаблицаШаблона	= ТаблицаКолонок["ТаблицаШаблона"][н];
			Тип				= ТаблицаКолонок["Тип"][н];
			
			Попытка
				Значение = СокрЛП(Строка(ФайлДанных[КолонкаФайла-1][ТекСтрока]));
				ВсяСтрока = ВсяСтрока + Значение;
			Исключение
				ВсяСтрока = "";
				Значение = "";
			КонецПопытки;
			
			// Если значение из файла считано, но оно пустое - не отмечаем обязательный реквизит
			Если Значение = "" Тогда
				н = н + 1;
				Продолжить;
			КонецЕсли;
			
			Если Реквизит = "ВсегоЗадолженность" Тогда
				Значение = СтрЗаменить(Значение, "-", "");
			КонецЕсли;
			
			// Найти и отметить, если Необходимый
			ТекЭлемент = СписокНеобходимыхРеквизитов.НайтиПоЗначению(ТаблицаШаблона + "." + Реквизит);
			Если ТекЭлемент <> Неопределено Тогда
				ТекЭлемент.Пометка = Истина;
			КонецЕсли; 
			
			Если ТаблицаШаблона = "Договоры" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДоговора, Значение, Реквизит);
			ИначеЕсли ТаблицаШаблона = "ОбновлениеРеестра" Тогда
				ДобавитьДанныеВТаблицу(ДанныеРеестра, Значение, Реквизит);
			КонецЕсли;
			н = н + 1;
		КонецЦикла;
		
		ТекСтрока = ТекСтрока + 1;
		//#МРС не используется в сервернойна стороне сервера, если это критично то лучше выводить в сообщение пользователю.
		//Состояние(Строка(ТекСтрока));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ТекСтрока); 
		Сообщение.Сообщить();
		//#МРС       		
		
		// Проверка обязательных реквизитов
		Если ВсяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;
		Записывать = Истина;
		Для каждого Реквизит Из СписокНеобходимыхРеквизитов Цикл
			Если НЕ Реквизит.Пометка Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение; 
				Сообщение.Сообщить();

			    //Сообщить("В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение, СтатусСообщения.Важное);
				Записывать = Ложь;
			КонецЕсли; 		
		КонецЦикла; 
		
		// Если всё ОК - запишем данные
		Если Записывать Тогда
			ТекущийДоговор = НайтиЭлементСправочника(ДанныеДоговора, "Договоры", Ложь);
			
			ДобавитьДанныеВТаблицу(ДанныеРеестра, 	ТекущийДоговор.Владелец, 	"Должник");
			ДобавитьДанныеВТаблицу(ДанныеРеестра, 	ТекущийДоговор, 			"Договор");
			// ОБНОВЛЕНИЕ РЕЕСТРА
			ДобавитьСтрокуВДокумент(Документ, ДанныеРеестра);
		КонецЕсли;   
		
	КонецЦикла;

	Попытка
		Документ.Дата = ДатаЗагрузки;	
		Документ.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать документ Обновление реестра. " + ОписаниеОшибки(); 
		Сообщение.Сообщить();
		
		//Сообщить("Не удалось записать документ Обновление реестра. " + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Записан " + Строка(Документ); 
	Сообщение.Сообщить();

	//Сообщить("Записан " + Строка(Документ));
	
	Возврат Истина;
КонецФункции // ЗагрузитьДанные_ОбновлениеРеестра()

// (4) Загрузка платежей
&НаСервере
Функция ЗагрузитьДанные_ЗагрузкаПлатежей(ФайлДанных, ШаблонСсылка, ТаблицаКолонок, ДатаЗагрузки,ВсегоКолонок)
    Перем Документ;
	
	Документ = Документы.Платежи.СоздатьДокумент();
	
	Документ.Дата = ДатаЗагрузки;
	
	// Создать таблицы для данных
	ДанныеДоговора 	= СоздатьТаблицуРеквизитов("ДоговорыОбновление");
	ДанныеПлатежи 	= СоздатьТаблицуРеквизитов("Платежи");
	
	// Обязательные реквизиты ФИО и ДР
	СписокНеобходимыхРеквизитов = Новый СписокЗначений;
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеПлатежи, 	СписокНеобходимыхРеквизитов, "Платежи");
	ДополнитьСписокНеобходимыхРеквизитов(ДанныеДоговора, 	СписокНеобходимыхРеквизитов, "Договоры");
	
	// Проходим построчно файл начиная со второй строки
	// Пока не встретится целая строка без данных (учитываются только необходимые нам данные)
	ТекСтрока = 0;
	ВсяСтрока = "начало";
	Пока ВсяСтрока <> "" Цикл
		ВсяСтрока = "";
		СписокНеобходимыхРеквизитов.ЗаполнитьПометки(Ложь);
		ДанныеДоговора 	= СоздатьТаблицуРеквизитов("ДоговорыОбновление");
		ДанныеПлатежи 	= СоздатьТаблицуРеквизитов("Платежи");
		
		// Пройдёмся по колонкам из таблицы
		// Таблица содержит соответствие (реквизит_получатель <-> колонка_файла)
		н = 0;
		Пока н < ВсегоКолонок Цикл
			КолонкаФайла 		= ТаблицаКолонок["НомерКолонки"][н];
			Реквизит 		= ТаблицаКолонок["Реквизит"][н];
			ТаблицаШаблона	= ТаблицаКолонок["ТаблицаШаблона"][н];
			Тип				= ТаблицаКолонок["Тип"][н];
			
			Попытка
				Значение = СокрЛП(Строка(ФайлДанных[КолонкаФайла-1][ТекСтрока]));
				ВсяСтрока = ВсяСтрока + Значение;
			Исключение
				ВсяСтрока = "";
				Значение = "";
			КонецПопытки;
						
			// Если значение из файла считано, но оно пустое - не отмечаем обязательный реквизит
			Если Значение = "" Тогда
				н = н + 1;
				Продолжить;
			КонецЕсли; 
			
			Если Реквизит = "ВсегоЗадолженность" Тогда
				Значение = СтрЗаменить(Значение, "-", "");
			ИначеЕсли Реквизит = "ДатаПлатежа" Тогда
				Попытка
					Значение = Лев(Значение, 10);
					Значение = Дата(Прав(Значение, 4) + Сред(Значение, 4, 2) + Лев(Значение, 2));
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Ошибочная дата в строке: " + Строка(ТекСтрока); 
					Сообщение.Сообщить();
					
					//Сообщить("Ошибочная дата в строке: " + Строка(ТекСтрока), СтатусСообщения.Важное);
				КонецПопытки; 
			КонецЕсли;
			
			// Найти и отметить, если Необходимый
			ТекЭлемент = СписокНеобходимыхРеквизитов.НайтиПоЗначению(ТаблицаШаблона + "." + Реквизит);
			Если ТекЭлемент <> Неопределено Тогда
				ТекЭлемент.Пометка = Истина;
			КонецЕсли; 
			
			Если ТаблицаШаблона = "Договоры" Тогда
				ДобавитьДанныеВТаблицу(ДанныеДоговора, Значение, Реквизит);
			ИначеЕсли ТаблицаШаблона = "Платежи" Тогда
				ДобавитьДанныеВТаблицу(ДанныеПлатежи, Значение, Реквизит);
			КонецЕсли;
			н = н+1;
		КонецЦикла; 
		
		ТекСтрока = ТекСтрока + 1;
		//#МРС не используется в сервернойна стороне сервера, если это критично то лучше выводить в сообщение пользователю.
		//Состояние(Строка(ТекСтрока));
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ТекСтрока); 
		Сообщение.Сообщить();
		//#МРС 

		
		// Проверка обязательных реквизитов
		Если ВсяСтрока = "" Тогда
			Продолжить;
		КонецЕсли;
		Записывать = Истина;
		Для каждого Реквизит Из СписокНеобходимыхРеквизитов Цикл
		    Если НЕ Реквизит.Пометка Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение; 
				Сообщение.Сообщить();

				//Сообщить("В строке " + Строка(ТекСтрока) + " файла не загружен обязательный реквизит: " + Реквизит.Значение, СтатусСообщения.Важное);
				Записывать = Ложь;
			КонецЕсли; 		
		КонецЦикла; 
		
		// Если всё ОК - запишем данные
		Если Записывать Тогда
			ТекущийДоговор = НайтиЭлементСправочника(ДанныеДоговора, "Договоры", Ложь);
			
			ДобавитьДанныеВТаблицу(ДанныеПлатежи, 	ТекущийДоговор.Владелец, 	"Должник");
			ДобавитьДанныеВТаблицу(ДанныеПлатежи, 	ТекущийДоговор, 			"Договор");
			
			// Загрузка Платежей
			ДобавитьСтрокуВДокумент(Документ, ДанныеПлатежи);
		КонецЕсли;
		
	КонецЦикла;

	Документ.Записать();
	
	Возврат Истина;
КонецФункции // ЗагрузитьДанные_ЗагрузкаПлатежей()

&НаСервереБезКонтекста
Процедура ОбновлениеДанныхОбъекта(Ссылка, Данные)
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДополнительныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ТекОбъект = Ссылка.ПолучитьОбъект();
		Для каждого ТЗ Из Данные Цикл
			Если ТЗ.Реквизит = "НомерПаспорт" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекЗначение = ТЗ.Значение;
			Если НЕ ЗначениеЗаполнено(ТекЗначение) Тогда
				Продолжить;
			КонецЕсли;
			Если ТЗ.Реквизит = "Регион" Тогда
				ТекЗначение = ПолучитьЭлементСправочника(ТЗ.Значение, "Регионы");
			ИначеЕсли ТЗ.Реквизит = "ТипКредита" Тогда
				ТекЗначение = ПолучитьЭлементСправочника(ТЗ.Значение, "ТипыКредитов");
			КонецЕсли;
			
			ТекОбъект[ТЗ.Реквизит] = ТекЗначение;
		КонецЦикла; 
		ТекОбъект.Записать();
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЭлементСправочника(Таблица, Вид, Создавать = Ложь)
	Перем ТекЭлемент, ПараметрыОтбора, Условие;
	
	// Найти элемент
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + Вид + ".Ссылка КАК ИскомыйЭлемент
	|ИЗ
	|	Справочник." + Вид + " КАК " + Вид + " ";
	
	// Найдём строки в таблице, где установлен флаг поиска
	// их может быть несколько
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Поиск", Истина);
	НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	
	// Добавить в запрос блок ГДЕ
	Условие = "";
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		Условие = Условие + ?(Условие <> "", " И ", " ГДЕ ");
		Условие = Условие + Вид + "." + СтрокаТЗ.Реквизит + " = &" + СтрокаТЗ.Реквизит;
		
		Запрос.УстановитьПараметр(СтрокаТЗ.Реквизит, СтрокаТЗ.Значение);
	КонецЦикла; 
	
	Если (Вид = "ДополнительныеДанные") Тогда
		Условие = Условие + ?(Условие <> "", " И ", " ГДЕ ");
		Условие = Условие + Вид + ".Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Таблица[0].Значение);
		
		Условие = Условие + ?(Условие <> "", " И ", " ГДЕ ");
		Условие = Условие + Вид + ".Реквизит = &Реквизит";
		Запрос.УстановитьПараметр("Реквизит", Таблица[0].Реквизит);
	ИначеЕсли (Вид = "Телефоны") Тогда
		Условие = Условие + ?(Условие <> "", " И ", " ГДЕ ");
		Условие = Условие + Вид + ".Номер = &Номер";
		Запрос.УстановитьПараметр("Номер", Таблица[0].Значение);
	ИначеЕсли (Вид = "Договоры") Тогда
		Условие = Условие + ?(Условие <> "", " И ", " ГДЕ ");
		Условие = Условие + Вид + ".НомерДоговора = &НомерДоговора";
		Запрос.УстановитьПараметр("НомерДоговора", Таблица.Найти("НомерДоговора").Значение);
	ИначеЕсли (Вид = "Адреса") Тогда
		Если Таблица.Найти("Адрес") <> Неопределено Тогда
			Условие = Условие + ?(Условие <> "", " И ", " ГДЕ ");
			Условие = Условие + Вид + ".Адрес = &Адрес";
			Запрос.УстановитьПараметр("Адрес", Таблица.Найти("Адрес").Значение);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Условие;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Если Создавать Тогда // Создать если не найден
			ТекЭлемент = Справочники[Вид].СоздатьЭлемент();
			ВладелецП = Справочники.Должники.ПустаяСсылка();
			Для каждого СтрокаТЗ Из Таблица Цикл
				Если (Вид = "ДополнительныеДанные") Тогда
					Попытка
						Если СтрокаТЗ.Реквизит = "Владелец" Тогда
							ВладелецП = СтрокаТЗ.Значение.Ссылка;
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Попытка
					Если Вид = "Адреса" И СтрокаТЗ.Реквизит = "Регион" Тогда
						
						// Добавлять не будем - регион по коду ФССП
						
						
						
						
						
						НайденныйРегион = Справочники.Регионы.НайтиПоНаименованию(СтрокаТЗ.Значение,Истина);
						
						
						Если НайденныйРегион.Пустая() Тогда
							
							
							кодФССП= НайтиКодФССПРег(СтрокаТЗ.Значение);
							
							
							НайденныйРегион= РегионПоКодуФССП(кодФССП); 
							
							
							
							//НайденныйРегион = Справочники.Регионы.СоздатьЭлемент();
							//НайденныйРегион.Наименование = СтрокаТЗ.Значение;
							//НайденныйРегион.Записать();
							//НайденныйРегион = НайденныйРегион.Ссылка;
							//
							
						КонецЕсли;
						ТекЭлемент[СтрокаТЗ.Реквизит] = НайденныйРегион;
					Иначе	
						ТекЭлемент[СтрокаТЗ.Реквизит] = СтрокаТЗ.Значение;
					КонецЕсли;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			Если (Вид = "Адреса") ИЛИ (Вид = "Телефоны") Тогда
			    ТекЭлемент.Тип = Таблица[0].Тип;
			КонецЕсли; 
			Если (Вид = "ДополнительныеДанные") Тогда
				ТекЭлемент.Реквизит = Таблица[0].Тип;
				ТекЭлемент.Владелец = ВладелецП;
				ТекЭлемент.Наименование = Таблица[0].Значение; // +Крылов 2011.02.04 СтрокаТЗ.Значение; 
				СпрПров = Справочники.ДополнительныеДанные;
				ТекДоп = СпрПров.НайтиПоНаименованию(СокрЛП(ТекЭлемент.Наименование),Истина,,ВладелецП);
				Если ТекДоп = Справочники.ДополнительныеДанные.ПустаяСсылка() Тогда
					ТекЭлемент.Записать();
					ТекЭлемент = ТекЭлемент.Ссылка;
				Иначе
					ТекЭлемент = ТекДоп.Ссылка;
				КонецЕсли;
			Иначе
				ТекЭлемент.Записать();
				ТекЭлемент = ТекЭлемент.Ссылка;
				Найден = Ложь;
			КонецЕсли; 
			
			
		Иначе
			ТекЭлемент = Справочники[Вид].ПустаяСсылка();
		КонецЕсли; 
	Иначе
		ТекЭлемент = Результат[0].ИскомыйЭлемент;
		ОбновлениеДанныхОбъекта(ТекЭлемент, Таблица);
	КонецЕсли; 
	
	Возврат ТекЭлемент;
КонецФункции // НайтиЭлементСправочника()


&НаСервереБезКонтекста
Функция РегионПоКодуФССП(кодфссп)

	
	ссылкаРег=Неопределено;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регионы.Наименование КАК Наименование,
		|	Регионы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Регионы КАК Регионы
		|ГДЕ
		|	Регионы.КодРегионаФССП = &КодРегионаФССП";
	
	Запрос.УстановитьПараметр("КодРегионаФССП", кодфссп);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		 ссылкаРег=ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	 Возврат ссылкаРег;  

КонецФункции // ()



&НаСервереБезКонтекста
Функция  НайтиКодФССПРег(стр)

	кодФссп="";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыРегионовФССП.Наименование КАК Наименование,
		|	КодыРегионовФССП.КодРегионаФССП КАК КодРегионаФССП,
		|	КодыРегионовФССП.Синоним КАК Синоним
		|ИЗ
		|	Справочник.КодыРегионовФССП КАК КодыРегионовФССП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		
    		СтрКодФССП=Выборка.Синоним;
			индексстр=Найти(ВРег(стр), ВРег(СтрКодФССП));

			Если индексстр<>0 Тогда
				
				// Нашли
			 	кодФссп=Выборка.КодРегионаФССП;
				
			Иначе
				
				СтрКодФССП7=Лев(Выборка.Синоним,7);
				
				индексстр=Найти(ВРег(стр), ВРег(СтрКодФССП7));
				
				      Если индексстр<>0 Тогда

						  кодФссп=Выборка.КодРегионаФССП;
						  
					  Иначе
						  
						  
					  КонецЕсли;	  
					  	  
				
				
				
		    КонецЕсли;
			
		
		
	КонецЦикла;
	
	Возврат кодФссп;
	

КонецФункции // ()




// Добавить данные в документ из таблицы
&НаСервереБезКонтекста
Функция ДобавитьСтрокуВДокумент(Документ, Таблица)
	СтрокаДокумента = Документ.Должники.Добавить();
		
	Для каждого СтрокаТЗ Из Таблица Цикл
		СтрокаДокумента[СтрокаТЗ.Реквизит] = СтрокаТЗ.Значение;
		Попытка
			Если СтрокаТЗ.Реквизит = "Договор" Тогда
				СтрокаДокумента.Должник = СтрокаДокумента.Договор.Владелец.Ссылка;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецФункции // ЗаписатьДокумент()

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаИзТаблицы(Таблица, Реквизит)
	// Найти реквизит в таблице
	НайденнаяСтрока = Таблица.Найти(Реквизит, "Реквизит");
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденнаяСтрока.Значение;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ОткрытьФайлДанных(ИмяФайла, Ошибка = "") Экспорт
	Перем ФД;
	
	//НачатьПроверкуСуществования(); использовать если нужна проверка файла
	//// Проверка файла на существование
	//ВыбФайл = Новый Файл(ИмяФайла);
	//Если (ВыбФайл.Существует()) И (ВыбФайл.ЭтоФайл()) Тогда
	//Иначе
	//	Ошибка = "Файл не найден!";
	//	Возврат Ложь;
	//КонецЕсли;
	
	Попытка
		ФД = Новый COMОбъект("Excel.Application");
		ФД.Workbooks.Open(ИмяФайла);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Ошибка = ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ФД = Неопределено;
	КонецПопытки;
	
	Возврат ФД;
КонецФункции

// Формат строки таблицы колонок
//.ТаблицаШаблона                        
//.Реквизит
//.Тип  - (справочник) Это тип телефона или тип адреса или тип дополнительного реквизита
//.Заголовок
//.НомерКолонки
// И получить таблицу колонок
// (номер колонки файла и соответствие реквизиту)
&НаКлиенте
Функция ПроверитьСоответствиеШаблону(ФайлДанных, ШаблонСсылка) Экспорт
	
	
	//Вот тут преобразуем в массив первую строку файла
	МассивЗаголовков = Новый Массив;
	СтрокаЗаголовокФайла = 1;
	ТекКолонка = 1;
	Пока СокрЛП(Строка(ФайлДанных.Cells(СтрокаЗаголовокФайла, ТекКолонка).Value)) <> "" Цикл
		л_Заголовок = СвернутьТекст(Строка(ФайлДанных.Cells(СтрокаЗаголовокФайла, ТекКолонка).Value));
		МассивЗаголовков.Добавить(л_Заголовок);
		ТекКолонка = ТекКолонка+1;
	КонецЦикла;

	Возврат ПроверитьСоответствиеШаблонуНаСервере(МассивЗаголовков,ШаблонСсылка);	  
	
КонецФункции // ПроверитьСоответствиеШаблону()

// Добавить дополнительные реквизиты в таблицу
&НаСервереБезКонтекста
Процедура ДобавитьДополнительныеРеквизитыВТаблицу(ТаблицаДолжников, ТаблицаДолжниковСтрока, ДанныеДополнительныеКолонки);
	
	Для каждого СтрокаДопКолонка Из ДанныеДополнительныеКолонки Цикл
		// Добавить колонки
		Если ТаблицаДолжников.Колонки.Найти(СтрокаДопКолонка.Реквизит) = Неопределено Тогда
		    ТаблицаДолжников.Колонки.Добавить(СтрокаДопКолонка.Реквизит);
		КонецЕсли; 
		
		// Установить значения
		ТаблицаДолжниковСтрока[СтрокаДопКолонка.Реквизит] = СтрокаДопКолонка.Значение;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСоответствиеШаблонуНаСервере(МассивЗаголовков,ШаблонСсылка)
	СтруктураВозврата = Новый Структура;
	//Перем ОбщаяТаблица, Шаблон;
	
	Шаблон = ШаблонСсылка.ПолучитьОбъект(); 	
	
	ОбщаяТаблица = ПолучитьОбщуюТаблицуШаблона(Шаблон);

	// Пройдёмся по колонкам из файла
	ТекКолонка = 1;
	Для Каждого ЭлМасс Из МассивЗаголовков Цикл
		
		// Для не пустого заголовка
		Если ЭлМасс <> "" Тогда
			ПроставитьНомерКолонкиВТаблице(ЭлМасс, ТекКолонка, ОбщаяТаблица);
		КонецЕсли; 
		
		ТекКолонка = ТекКолонка + 1;
	КонецЦикла;

	// Проверка - для всех ли колонок из шаблона нашли соответствие в файле
	// методом свёртки тз
	ТаблицаКолонок = ОбщаяТаблица.Скопировать(); 
	
	// При свёртке если НомерКолонки=0 - значит мы так и не нашли данную колонку в файле
	ТаблицаКолонок.Свернуть("ТаблицаШаблона, Реквизит, Тип, НомерКолонки");
	
	ЕстьНеНайденныеКолонки = 0;
	Для каждого СтрокаТЗ Из ТаблицаКолонок Цикл
		Если СтрокаТЗ.НомерКолонки = 0 Тогда
			ЕстьНеНайденныеКолонки = 1;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст ="Не найдено соответствие для реквизита: " + СтрокаТЗ.Реквизит + " из таблицы: " + СтрокаТЗ.ТаблицаШаблона; 
			Сообщение.Сообщить();
			//Сообщить("Не найдено соответствие для реквизита: " + СтрокаТЗ.Реквизит + " из таблицы: " + СтрокаТЗ.ТаблицаШаблона, СтатусСообщения.Важное);
		КонецЕсли; 
	КонецЦикла; 
	
	СоответствиеКолонок = Новый Соответствие;
	Для Каждого ТекКолонка Из ТаблицаКолонок.Колонки Цикл
		СоответствиеКолонок.Вставить(ТекКолонка.Имя,ТаблицаКолонок.ВыгрузитьКолонку(ТекКолонка));
	КонецЦикла;	
	
	Если ЕстьНеНайденныеКолонки = 0 Тогда
		СоответствиеКолонок = Новый Соответствие;
		Для Каждого ТекКолонка Из ТаблицаКолонок.Колонки Цикл
			СоответствиеКолонок.Вставить(ТекКолонка.Имя,ТаблицаКолонок.ВыгрузитьКолонку(ТекКолонка));
		КонецЦикла;
		СтруктураВозврата.Вставить("Рез",Истина);
		СтруктураВозврата.Вставить("ТаблицаКолонок",СоответствиеКолонок);
	Иначе
		СтруктураВозврата.Вставить("Рез",Ложь);
		СтруктураВозврата.Вставить("ТаблицаКолонок",Неопределено);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция ПроставитьНомерКолонкиВТаблице(Заголовок, НомерКолонки, ОбщаяТаблица)
	Перем ПараметрыОтбора, НайденныеСтроки;
	
	// Найдём строки в общей таблице, где есть данный заголовок
	// их может быть несколько
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Заголовок", Заголовок);
	НайденныеСтроки = ОбщаяТаблица.НайтиСтроки(ПараметрыОтбора);
	
	// Проставить НомерКолонки
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		СтрокаТЗ.НомерКолонки = НомерКолонки;
	КонецЦикла; 
	
КонецФункции // ПроставитьНомерКолонкиВТаблице()

&НаСервереБезКонтекста
Функция ПолучитьОбщуюТаблицуШаблона(Шаблон)
	Перем ОбщаяТаблица;
	ОбщаяТаблица = Новый ТаблицаЗначений;
	
	ОбщаяТаблица.Колонки.Добавить("ТаблицаШаблона");
	ОбщаяТаблица.Колонки.Добавить("Тип");
	ОбщаяТаблица.Колонки.Добавить("Реквизит");
	ОбщаяТаблица.Колонки.Добавить("Заголовок");
	ОбщаяТаблица.Колонки.Добавить("НомерКолонки");
	
	// Загрузить табличную часть в общую таблицу
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.Должники, 				"Должники");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.Договоры, 				"Договоры");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.Телефоны, 				"Телефоны");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.Адреса, 				"Адреса");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.Реестр, 				"Реестр");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.ОбновлениеРеестра, 	"ОбновлениеРеестра");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.Платежи, 				"Платежи");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.ДополнительныеКолонки, "ДополнительныеКолонки");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.Контакты, "Контакты");
	ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, Шаблон.ДокументКонтакт, "Контакт");
	
	Возврат ОбщаяТаблица;
КонецФункции // ПолучитьОбщуюТаблицуШаблона()

&НаСервереБезКонтекста
Процедура ДобавитьТЧкОбщейТаблице(ОбщаяТаблица, ТЧ, НазваниеТЧ)

	Для каждого СтрокаТЧ Из ТЧ Цикл
		// Свернуть заголовки, запятые оставить
		Если НазваниеТЧ = "Контакты" Тогда
			НоваяСтрока = ОбщаяТаблица.Добавить();
			НоваяСтрока.ТаблицаШаблона 	= НазваниеТЧ;
			НоваяСтрока.Реквизит 		= "ДокументКонтакт";
			НоваяСтрока.Заголовок 		= СтрокаТЧ.КомментарийКонтакт;
			НоваяСтрока.НомерКолонки 	= 0;
		Иначе
			Заголовки = СвернутьТекст(СтрокаТЧ.Заголовки, Ложь);
			МассивЗаголовков = СтрРазделить(Заголовки, "#");
			
			Если МассивЗаголовков.Количество() > 0 Тогда
				Для каждого ЭлМассива Из МассивЗаголовков Цикл
					НоваяСтрока = ОбщаяТаблица.Добавить();
					НоваяСтрока.ТаблицаШаблона 	= НазваниеТЧ;
					НоваяСтрока.Реквизит 		= СтрокаТЧ.Реквизит;
					НоваяСтрока.Заголовок 		= ЭлМассива;
					НоваяСтрока.НомерКолонки 	= 0;
				// Если в табличной части есть колонка тип
					Попытка
						НоваяСтрока.Тип = СтрокаТЧ.Тип;
					Исключение
					КонецПопытки;
				
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Обрабатывает строку:
// убирает пробелы, 
// конвертирует в нижний регистр,
// убирает знаки препинания ".,;"
&НаСервереБезКонтекста
Функция СвернутьТекст(Знач Текст, Запятые = Истина)
	Текст = НРег(Текст);
	// +Крылов
	//Текст = СтрЗаменить(Текст, " ", "");
	//Текст = СтрЗаменить(Текст, ".", "");
	//Текст = СтрЗаменить(Текст, ";", "");
	//Если Запятые Тогда
	//	Текст = СтрЗаменить(Текст, ",", "");
	//КонецЕсли;
	// -Крылов
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	
	Возврат Текст;
КонецФункции // СвернутьТекст()

&НаСервереБезКонтекста
Функция СоздатьТаблицуРеквизитов(Вид, Шаблон = Неопределено)
	Перем Таблица;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Реквизит");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("Поиск");
	Таблица.Колонки.Добавить("Тип");
	
	Если Вид = "Должники" Тогда
		ДобавитьДанныеВТаблицу(Таблица, "", "Фамилия", 		Истина);
		ДобавитьДанныеВТаблицу(Таблица, "", "Имя", 			Истина);
		ДобавитьДанныеВТаблицу(Таблица, "", "Отчество", 	Истина);
		ДобавитьДанныеВТаблицу(Таблица, "", "ДатаРождения", Истина);
		ДобавитьДанныеВТаблицу(Таблица, "", "НомерПаспорта", Истина);
	ИначеЕсли Вид = "ДолжникиОбновление" Тогда
	ИначеЕсли Вид = "Договоры" Тогда
		ДобавитьДанныеВТаблицу(Таблица, "", "НомерДоговора",Истина);
		ДобавитьДанныеВТаблицу(Таблица, "", "Владелец",		Истина);
	ИначеЕсли Вид = "ДоговорыОбновление" Тогда
		ДобавитьДанныеВТаблицу(Таблица, "", "НомерДоговора",Истина);
	ИначеЕсли Вид = "Реестр" Тогда
	ИначеЕсли Вид = "Контакт" Тогда
	ИначеЕсли Вид = "ОбновлениеРеестра" Тогда
	ИначеЕсли Вид = "Платежи" Тогда
	ИначеЕсли Вид = "ДанныеДополнительныеКолонки" Тогда
		Типы = Шаблон.ДополнительныеКолонки.Выгрузить();
		Для каждого СтрокаТипы Из Типы Цикл
			СтрокаТипы.Тип = СтрокаТипы.Реквизит;
		КонецЦикла; 
		Типы.Свернуть("Тип");
		Для каждого СтрокаТипы Из Типы Цикл
			ДобавитьДанныеВТаблицу(Таблица, "", "Владелец",		Истина, СтрокаТипы.Тип);
			ДобавитьДанныеВТаблицу(Таблица, "", "Реквизит",		Истина, СтрокаТипы.Тип);
		КонецЦикла; 
//		ДобавитьДанныеВТаблицу(Таблица, "", "Владелец",		Истина);
//		ДобавитьДанныеВТаблицу(Таблица, "", "Реквизит",		Истина);
	ИначеЕсли Вид = "Телефоны" Тогда
		// Определить загружаемые типы
		Типы = Шаблон.Телефоны.Выгрузить();
		Типы.Свернуть("Тип");
		
		Для каждого СтрокаТипы Из Типы Цикл
			ДобавитьДанныеВТаблицу(Таблица, "", "Владелец",		Истина, СтрокаТипы.Тип);
			ДобавитьДанныеВТаблицу(Таблица, "", "Номер",		Истина, СтрокаТипы.Тип);
		КонецЦикла; 
	ИначеЕсли Вид = "Адреса" Тогда
		// Определить загружаемые типы
		Типы = Шаблон.Адреса.Выгрузить();
		Типы.Свернуть("Тип");
		
		Для каждого СтрокаТипы Из Типы Цикл
			ДобавитьДанныеВТаблицу(Таблица, "", "Владелец",		Истина, СтрокаТипы.Тип);
			ДобавитьДанныеВТаблицу(Таблица, "", "Адрес",		Истина, СтрокаТипы.Тип);
		КонецЦикла; 
		
	ИначеЕсли Вид = "Контакты" Тогда
		ДобавитьДанныеВТаблицу(Таблица, "", "КонтактКомментарий",	Истина);
	ИначеЕсли Вид = "ДоговорЦессии" Тогда
		ДобавитьДанныеВТаблицу(Таблица, "", "НомерДоговора",Истина);
		ДобавитьДанныеВТаблицу(Таблица, "", "ДатаЦессии",Истина);
		ДобавитьДанныеВТаблицу(Таблица, "", "Владелец",		Истина);	
	Иначе
		ДобавитьДанныеВТаблицу(Таблица, "", "Наименование",	Истина);
	КонецЕсли; 

	Возврат Таблица;
КонецФункции // СоздатьТаблицуРеквизитов()

// Упрощённый вариант
// Для справочников с одним реквизитом - НАИМЕНОВАНИЕ
&НаСервереБезКонтекста
Функция НайтиЭлементСправочникаПоНаименованию(Вид, Наименование, Создавать = Ложь) 
	Перем тз;
	
	// Не создавать пустые элементы
	Если ПустаяСтрока(Наименование) Тогда
	    Возврат Справочники[Вид].ПустаяСсылка();
	КонецЕсли; 
	
	Таблица = СоздатьТаблицуРеквизитов(Вид);
	
	ДобавитьДанныеВТаблицу(Таблица, Наименование, "Наименование");
	
	Возврат НайтиЭлементСправочника(Таблица, Вид, Создавать);
	
КонецФункции // НайтиЭлементСправочникаПоНаименованию()

&НаСервереБезКонтекста
Функция СтрокуВВалюту(ЗНАЧ Строка) Экспорт
	
	Строка = СтрЗаменить(Строка," ","");
	Строка = СтрЗаменить(Строка,".","");
	
	ПредставленияРубль = Новый Массив;
	ПредставленияРубль.Добавить("RUR");
	ПредставленияРубль.Добавить("руб");
	ПредставленияРубль.Добавить("рубли");
	ПредставленияРубль.Добавить("р");
	ПредставленияРубль.Добавить("810");
	
	ПредставленияДоллар = Новый Массив;
	ПредставленияДоллар.Добавить("USD");
	ПредставленияДоллар.Добавить("$");
	ПредставленияДоллар.Добавить("840");
	ПредставленияДоллар.Добавить("долл");
	
	Если ПредставленияРубль.Найти(Строка) <> Неопределено Тогда
		Возврат Справочники.Валюты.Рубль;
	ИначеЕсли ПредставленияДоллар.Найти(Строка) <> Неопределено Тогда
		Возврат Справочники.Валюты.Доллар;
	Иначе
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокуВДату(ЗНАЧ Строка) Экспорт
	
	Если ПустаяСтрока(Строка) Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка," ","");
	Строка = СтрЗаменить(Строка,"/",".");
	Строка = СтрЗаменить(Строка,";",".");
	Строка = СтрЗаменить(Строка,",",".");
	
	Разделитель = Найти(Строка,".");
	Если Разделитель = 0 Тогда
		
		// представление даты числом
		ЧислоДней = ЧислоСПроверкой(Строка);
		Если ЧислоДней = 0 Тогда
			Возврат '00010101';
		КонецЕсли;
		Результат = '19000101' + ЧислоСПроверкой(Строка);

	Иначе
		
		// разобрать дату по частям
		// 1-я часть
		ПерваяЧастьДаты = Лев(Строка, Разделитель-1);
		Строка = Прав(Строка, СтрДлина(Строка) - Разделитель);
		
		// 2-я часть
		Разделитель = Найти(Строка,".");
		Если Разделитель = 0 Тогда
			Возврат '00010101';
		КонецЕсли;
		ВтораяЧастьДаты = Лев(Строка, Разделитель-1);
		Строка = Прав(Строка, СтрДлина(Строка) - Разделитель);
		
		// 3-я часть
		ТретьяЧастьДаты = Строка;
		
		// получение числовых представлений частей даты
		ПерваяЧастьДатыЧислом = ЧислоСПроверкой(ПерваяЧастьДаты);
		ВтораяЧастьДатыЧислом = ЧислоСПроверкой(ВтораяЧастьДаты);
		ТретьяЧастьДатыЧислом = ЧислоСПроверкой(ТретьяЧастьДаты);
		Если ПерваяЧастьДатыЧислом = 0 Или ВтораяЧастьДатыЧислом = 0 Или ТретьяЧастьДатыЧислом = 0 Тогда
			Возврат '00010101';
		КонецЕсли;
		
		// возврат результата
		ЭтоЕвропейскоеПредставление = ?(СтрДлина(ПерваяЧастьДаты)=4,Истина,Ложь);
		Если ЭтоЕвропейскоеПредставление Тогда
			Возврат Дата(ПерваяЧастьДатыЧислом,ВтораяЧастьДатыЧислом,ТретьяЧастьДатыЧислом);
		Иначе 
			Возврат Дата(ТретьяЧастьДатыЧислом,ВтораяЧастьДатыЧислом,ПерваяЧастьДатыЧислом);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЧислоСПроверкой(Строка)
	
	Попытка
		Возврат Число(Строка);
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСправочникПоРеквизитам(Данные, Реквизиты)
	
	Запрос = Новый Запрос;
	СсылкаСтрока = "";
	Если ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		Запрос.УстановитьПараметр("Данные", Данные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Данные.Ссылка
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	&Данные КАК Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.Ссылка
		|ИЗ
		|	ВТ_Данные КАК Данные
		|ГДЕ
		|	ИСТИНА";
		СсылкаСтрока = "Ссылка.";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.Ссылка
		|ИЗ
		|	Справочник." + Данные + " КАК Данные
		|ГДЕ
		|	ИСТИНА";
	КонецЕсли;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Запрос.УстановитьПараметр(Реквизит.Ключ, Реквизит.Значение);
		Запрос.Текст = Запрос.Текст + "
		|	И Данные." + СсылкаСтрока + Реквизит.Ключ + " = &" + Реквизит.Ключ;
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокуВПредставлениеТелефона(ЗНАЧ Строка)
	
	Строка = УбратьНеЦифрыИзСтроки(Строка);
	
	Если СтрДлина(Строка) = 10 Тогда
		Строка = "8" + Строка;
	ИначеЕсли СтрДлина(Строка) = 7 Тогда 
		Строка = "8495" + Строка;
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьЭлемент(Спр, Данные)
	ТекОбъект = Спр.СоздатьЭлемент();
	Для каждого СтрокаТЗ Из Данные Цикл
		
		ТекОбъект[СтрокаТЗ.Реквизит] = СтрокаТЗ.Значение;
	КонецЦикла;
	ТекОбъект.Записать();
	Возврат ТекОбъект.Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЧисло(Символ)
	Возврат НЕ(ЧислоСПроверкой(Символ)=0 И Символ <> "0");
КонецФункции

&НаСервереБезКонтекста
Функция УбратьНеЦифрыИзСтроки(ЗНАЧ Строка) Экспорт
	СтрокаКопия = Строка;
	Строка = "";
	Для Н = 1 По СтрДлина(СтрокаКопия) Цикл
		ТекСимвол = Сред(СтрокаКопия,Н,1);
		Если ЭтоЧисло(ТекСимвол) Тогда
			Строка = Строка + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

// функция нужна для таблиц с типами: телефонов, адресов и т.п.
// Возвращаемое значение:
//   массив ТЗ
&НаСервереБезКонтекста
Функция РазделитьНаТаблицыПоТипам(Таблица)
	Перем МассивТЗ;
	Перем ПараметрыОтбора;
	
	МассивТЗ = Новый Массив;
	
	// Получим список уникальных типов
	Типы = Новый ТаблицаЗначений;
	Типы = Таблица.Скопировать(,"Тип");
	Типы.Свернуть("Тип", "");
	
	Для каждого СтрокаТип Из Типы Цикл
		// Формируем отбор
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Тип", СтрокаТип.Тип);
		
		// Копируем в новую таблицу только строки соответствующие текущему типу
		ТекТаблица = Новый ТаблицаЗначений;
		ТекТаблица = Таблица.Скопировать(ПараметрыОтбора);
		
		// Добавляем в массив
		МассивТЗ.Добавить(ТекТаблица);
	КонецЦикла; 

	Возврат МассивТЗ;
КонецФункции // РазделитьНаТаблицыПотипам()

&НаСервереБезКонтекста
Функция ДобавитьСтрокуВДокументК(Документ, Таблица)
//	СтрокаДокумента = Документ.Должники.Добавить();
		
	Для каждого СтрокаТЗ Из Таблица Цикл
		Попытка
			Документ[СтрокаТЗ.Реквизит] = СтрокаТЗ.Значение;
		Исключение
		КонецПопытки;
		Попытка
			Если СтрокаТЗ.Реквизит = "ТипКонтакта" Тогда
				ТекЗнач = Справочники.ТипыКонтактов.НайтиПоНаименованию(СтрокаТЗ.Значение);
				Документ.ТипКонтакта = ТекЗнач;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка
			Если СтрокаТЗ.Реквизит = "ПричинаНеплатежа" Тогда
				ТекЗнач = Справочники.ПричиныНеплатежа.НайтиПоНаименованию(СтрокаТЗ.Значение);
				Документ.ТипКонтакта = ТекЗнач;
			КонецЕсли;
		Исключение
		КонецПопытки;
		Попытка
			Если СтрокаТЗ.Реквизит = "Статус" Тогда
				ТекЗнач = Справочники.Статусы.НайтиПоНаименованию(СтрокаТЗ.Значение);
				Документ.ТипКонтакта = ТекЗнач;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецФункции // ЗаписатьДокумент()

&НаСервере
Процедура ПрименитьСоответствияНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСоответствия(Команда)
	НомерСтроки = 0;
	ИзменятьНомерПаспорта = Ложь;
	
	СписокВариантовОтветов = Новый СписокЗначений;
	СписокВариантовОтветов.Добавить("Да", "Да");
	СписокВариантовОтветов.Добавить("ДаДляВсех", "Да, для всех");
	СписокВариантовОтветов.Добавить("Нет", "Нет");
	
	Для Каждого СтрРез Из Объект.ТаблицаДопПроверки Цикл
		Если СтрРез.Соответствие Тогда
			Если НЕ ИзменятьНомерПаспорта И НЕ ПустаяСтрока(СтрРез.НомерПаспорта) И СтрРез.НомерПаспортаФайл <> СтрРез.НомерПаспорта Тогда
				ТекстВопроса = "Для должника " + Строка(СтрРез.Ссылка) + " номер паспорта в базе и в файле отличается.
					|Записать в базу номер паспорта из файла?";
				Ответ = Вопрос(ТекстВопроса, СписокВариантовОтветов);
				
				Если Ответ = "ДаДляВсех" Тогда
					ИзменятьНомерПаспорта = Истина;
				ИначеЕсли Ответ = "Да" Тогда
					ИзменитьПаспортДолжника(СтрРез.Ссылка, СтрРез.НомерПаспортаФайл);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИзменятьНомерПаспорта Тогда
				ИзменитьПаспортДолжника(СтрРез.Ссылка, СтрРез.НомерПаспортаФайл);
			КонецЕсли;
			СтрРез.СоздаватьДолжника = Ложь;
		Иначе
			СтрРез.СоздаватьДолжника = Истина;
		КонецЕсли;
		
	КонецЦикла;
	Элементы.СтраницыОбработки.ТекущаяСтраница = Элементы.Основная;
	ВыполнитьОбработку(Команда);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДолжникаНаСервере(ДанныеДолжника)
	Возврат СоздатьЭлемент(Справочники.Должники, ДанныеДолжника);
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьПаспортДолжника(Ссылка, НомерПаспортаФайл)
	ОбъектДолжник = Ссылка.ПолучитьОбъект();
	ОбъектДолжник.НомерПаспорта = НомерПаспортаФайл;
	ОбъектДолжник.Записать();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для Каждого Стр Из Объект.ТаблицаДопПроверки Цикл
		Стр.Соответствие = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого Стр Из Объект.ТаблицаДопПроверки Цикл
		Стр.Соответствие = Ложь;
	КонецЦикла;
КонецПроцедуры
