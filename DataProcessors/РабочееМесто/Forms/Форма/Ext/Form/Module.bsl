&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим(Истина);
	
	глДневнаяНорма = ПараметрыСеанса.глДневнаяНорма;
	КоллективнаяРабота = ПараметрыСеанса.Пользователь.КоллективнаяРабота;
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	Объект.Сотрудник = ПараметрыСеанса.Пользователь;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьНадписьСтатистика();
	ПодключитьОбработчикОжидания("ОбновитьНадписьСтатистика", 60);
	ОбновитьДанные();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Должники");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Должники.СледующийКонтакт");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = НачалоТекущегоДня;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.НавахоБелый);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Должники");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Должники.СледующийКонтакт");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = НачалоТекущегоДня;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Должники");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Должники.СледующийКонтакт");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = НачалоТекущегоДня;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Должники");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Должники.Новый");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ЖелтоЗеленый);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Должники");
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Должники.Регион");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = списокПозднихРегионов;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ГрифельноСерый);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьСтатистика()
	ОбновитьНадписьСтатистикаНаСервере();
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСтатистикаНаСервере()
	пВремяСеанса = ПараметрыСеанса.ВремяСеанса;
	Часов = Цел(пВремяСеанса / 60);
	ВремяСеанса = Формат(Часов, "ЧЦ=2; ЧН=0") + " ч. " + Формат(пВремяСеанса - Часов * 60, "ЧЦ=2; ЧН=00; ЧВН=") + " мин.";
	Выполнено = ОбщийМодульИнформация.ПолучитьКоличествоКонтактовВДень(ТекущаяДата(), Объект.Сотрудник);
	НадписьСтатистика = СтрШаблон("Время сеанса: %1, Задание: %2 из %3.", ВремяСеанса, Выполнено, глДневнаяНорма);
	Объект.НадписьСтатистика = НадписьСтатистика;
	// обновить запрещенные часовые пояса
	// если текущая дата + пояс больше 22-30 то запрещено
	Час = Час(ТекущаяДатаСеанса()); Минута = Минута(ТекущаяДатаСеанса());
	Если Минута < 30 Тогда
		ДопустимыйЧасовойПояс = 22 - Час + 1;// 22:20 - 18:20 = 4 + 1.
	Иначе
		ДопустимыйЧасовойПояс = 22 - Час;
	КонецЕсли; 
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Регионы.Ссылка КАК Регион
	               |ИЗ
	               |	Справочник.Регионы КАК Регионы
	               |ГДЕ
	               |	Регионы.ВремяннойПояс >= &ДопустимыйЧасовойПояс";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДопустимыйЧасовойПояс", ДопустимыйЧасовойПояс);
	ТЗ = Запрос.Выполнить().Выгрузить();
	массивРегионов = ТЗ.ВыгрузитьКолонку("Регион");
	списокПозднихРегионов.ЗагрузитьЗначения(массивРегионов);
	
КонецПроцедуры // ОбновитьНадписьСтатистика()

&НаКлиенте
Процедура ОбработатьКомандуФормы(Команда)
	Если Команда.Имя = "ОбновитьДанные" Тогда
		ОбновитьДанные();
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЗадание;
	ИначеЕсли Команда.Имя = "ДобавитьВЗадание" Тогда
		ДобавитьДолжникаВЗадание(ТекущаяДата());
	ИначеЕсли Команда.Имя = "ПолучитьНовогоДолжника" Тогда
		ПолучитьНовогоДолжника();// не нашел
	ИначеЕсли Команда.Имя = "ОбновитьСвободныйПул" Тогда
		ОбновитьСвободныйПул();// не нашел
	ИначеЕсли Команда.Имя = "РасширенныйПоиск" Тогда
		РасширенныйПоиск();// не нашел
	ИначеЕсли Команда.Имя = "СменитьРежимРаботы" Тогда
		СменитьРежимРаботы();
	ИначеЕсли Команда.Имя = "ПечатьКарточки" Тогда
		НапечататьКарточку();
	ИначеЕсли Команда.Имя = "ВыйтиИзПрограммы" Тогда
		ЗавершитьРаботуСистемы(Истина);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвободныйПул()
	Возврат;
	//тзЗадание = Привязка.ПолучитьТаблицуСвободногоПула(Отдел, ТекущаяДата());
	//СвободныйПул = тзЗадание.Скопировать();
	//СвободныйПул.ОбновитьСтроки(); 
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатистику()
	тзСтатистика = ОбщийМодульИнформация.СтатистикаОператора(Объект.Сотрудник, ТекущаяДатаСеанса());
	МакетСтатистика = Обработки.РабочееМесто.ПолучитьМакет("Статистика");
	ОбластьСтатистика = МакетСтатистика.ПолучитьОбласть("Статистика");
	
	Если тзСтатистика.Количество() > 0 Тогда
		Статистика = тзСтатистика[0];
		ОбластьСтатистика.Параметры.Заполнить(Статистика);
	КонецЕсли; 
	
	ТаблицаСтатистики.Очистить();
	ТаблицаСтатистики.Вывести(ОбластьСтатистика);
КонецПроцедуры

&НаСервере
Процедура ПеренестиПросроченныеПланирования()
	
	РазрешенныеСтатусы = Новый СписокЗначений;
	РазрешенныеСтатусы.Добавить(Справочники.Статусы.ОплатилЧастично);
	РазрешенныеСтатусы.Добавить(Справочники.Статусы.Прогноз);
	РазрешенныеСтатусы.Добавить(Справочники.Статусы.ОбещаниеОплатить);
	
	ДокПлан = Документы.Планирование.СоздатьДокумент();
	ДокПлан.Дата = НачалоДня(ТекущаяДата());
	ДокПлан.Сотрудник = ПараметрыСеанса.Пользователь;
	ДокПлан.Комментарий = "Автоматический перенос просрочки";
	
	
	Для Каждого ТекСтр Из Объект.Должники Цикл
		Если ТекСтр.СледующийКонтакт < НачалоДня(ТекущаяДата()) Тогда
			Если РазрешенныеСтатусы.НайтиПоЗначению(ТекСтр.Статус) <> Неопределено Тогда
				Если ДокПлан.Должники.Найти(Текстр.Должник) = Неопределено Тогда
					НовСтр = ДокПлан.Должники.Добавить();
					НовСтр.Должник = Текстр.Должник;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Автоматически перенесена на сегодня дата планирования по должнику: %1 со статусом: %2.", ТекСтр.Должник, ТекСтр.Статус));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокПлан.Должники.Количество() > 0 Тогда
		ДокПлан.Записать();
		ДокПлан.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	Перем МенеджерВременныхТаблиц;
	
	ЭтоВыезднойОтдел = ?(ПараметрыСеанса.Отдел.РольОтдела = Перечисления.РольОтдела.Выездной, Истина, Ложь);
	
	// Задание сотрудника
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыСеанса.Пользователь.КоллективнаяРабота = Ложь Тогда
		ЗапросыФильтра.ДобавитьВиртуальнуюТаблицуДолжниковСотрудникаНеАрхивные(МенеджерВременныхТаблиц, Объект.Сотрудник, ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ПараметрыСеанса.Пользователь.КоллективнаяРабота Тогда
		тзЗаданиеСтруктура = Привязка.ПолучитьРасширенныеДанныеПоТаблицеДолжниковР(МенеджерВременныхТаблиц, "ДолжникиСотрудника", ТекущаяДатаСеанса(), Объект.Сотрудник);
		тзЗадание = тзЗаданиеСтруктура.Должники;
		Объект.ДолжникиНаСегодня.Загрузить(тзЗаданиеСтруктура.ДолжникиНаСегодня);
	Иначе
		тзЗадание = Привязка.ПолучитьРасширенныеДанныеПоТаблицеДолжниковР(МенеджерВременныхТаблиц, "ДолжникиСотрудника", ТекущаяДатаСеанса(), Объект.Сотрудник);
	КонецЕсли;
	
	тзЗадание.Сортировать("СледующийКонтакт Возр, НаименованиеД Возр");
	Объект.Должники.Загрузить(тзЗадание);
	
	ОбновитьСтатистику();
	
	Если ЭтоВыезднойОтдел Тогда
		ОбновитьВыезд();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПривязкаСотрудникСрезПоследних.Должник КАК Должник
	               |ПОМЕСТИТЬ ВТ_Должники
	               |ИЗ
	               |	РегистрСведений.ПривязкаСотрудник.СрезПоследних КАК ПривязкаСотрудникСрезПоследних
	               |ГДЕ
	               |	ПривязкаСотрудникСрезПоследних.СотрМенеджер = &СотрМенеджер
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Должник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПланированиеКонтактовСрезПоследних.Должник КАК Должник,
	               |	ПланированиеКонтактовСрезПоследних.ДатаПланирования КАК Дата
	               |ИЗ
	               |	РегистрСведений.ПланированиеКонтактов.СрезПоследних(
	               |			,
	               |			Должник В
	               |				(ВЫБРАТЬ
	               |					ВТ_Должники.Должник
	               |				ИЗ
	               |					ВТ_Должники)) КАК ПланированиеКонтактовСрезПоследних
	               |ГДЕ
	               |	НАЧАЛОПЕРИОДА(ПланированиеКонтактовСрезПоследних.ДатаПланирования, ДЕНЬ) = &ТекДата
	               |	И ПланированиеКонтактовСрезПоследних.ДатаПланирования <> &ТекДата";
	Запрос.УстановитьПараметр("СотрМенеджер", Объект.Сотрудник);
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДатаСеанса()));
	ТЗ = Запрос.Выполнить().Выгрузить();
	ДолжникиНаТекущийДень.Загрузить(ТЗ);
	ПеренестиПросроченныеПланирования();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыезд()
	
	//СписокДолжников = ДолжникиСотрудника.Выгрузить().ВыгрузитьКолонку("Должник");
	//тзДанные = ДанныеПоВыездам.ПолучитьСводнуюТаблицуДляВыездаССуммами(КонецНедели(ТекущаяДатаСеанса()), Объект.Сотрудник, СписокДолжников);
	//
	//Выезд = тзДанные.Скопировать();
	//ВыездСводная = тзДанные.Скопировать();
	//
КонецПроцедуры

&НаСервере
Процедура ПолучитьНовогоДолжника()
	НовыйДолжник = Привязка.ПолучитьНовогоДолжника();
	Если ЗначениеЗаполнено(НовыйДолжник) Тогда
		НоваяСтрока = Объект.Должники.Вставить(0);
		НоваяСтрока.Должник = НовыйДолжник;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишниеИзСпискаДолжников(Должник = Неопределено, ТаблицаДолжники = Неопределено)
	
	ТекущиеДанные = Элементы.Должники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяГруппаОтбора = ТекущиеДанные.Группа;
	
	Если НЕ ЗначениеЗаполнено(мТекущаяГруппаОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = ?(ТаблицаДолжники = Неопределено, Объект.Должники, ТаблицаДолжники);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Должники", Таблица);
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Группа", мТекущаяГруппаОтбора);
	Запрос.УстановитьПараметр("Статус", мТекущаяГруппаОтбора.Статус);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	СписокСотрудников = мТекущаяГруппаОтбора.Сотрудники.ВыгрузитьКолонку("Сотрудник");
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	СписокРеестров = мТекущаяГруппаОтбора.Реестры.ВыгрузитьКолонку("Реестр");
	Запрос.УстановитьПараметр("СписокРеестров", СписокРеестров);
	
	Условие = "";
	
	Если ТаблицаДолжники <> Неопределено Тогда
		Условие = "
			|	И ВТ_Должники.СледующийКонтактНовый = &ТекущаяДата
			|	И ВТ_Должники.СотрудникНовый = &Сотрудник";
	ИначеЕсли мТекущаяГруппаОтбора.УсловиеОтбора = Перечисления.УсловияОтбораГруппДолжников.ТекущаяДата Тогда
		Условие = "
			|	И ВТ_Должники.СледующийКонтактНовый = &ТекущаяДата
			|	И ВТ_Должники.СотрудникНовый = &Сотрудник";
	ИначеЕсли мТекущаяГруппаОтбора.УсловиеОтбора = Перечисления.УсловияОтбораГруппДолжников.Просроченные Тогда
		Условие = "
			|	И ВТ_Должники.СледующийКонтактНовый < &ТекущаяДата
			|	И ВТ_Должники.СотрудникНовый = &Сотрудник";
	ИначеЕсли мТекущаяГруппаОтбора.УсловиеОтбора = Перечисления.УсловияОтбораГруппДолжников.Будущие Тогда
		Условие = "
			|	И ВТ_Должники.СледующийКонтактНовый > &ТекущаяДата
			|	И ВТ_Должники.СотрудникНовый = &Сотрудник";
	ИначеЕсли мТекущаяГруппаОтбора.УсловиеОтбора = Перечисления.УсловияОтбораГруппДолжников.Незакрепленные Тогда
		Если СписокРеестров.Количество() > 0 Тогда
			Условие = Условие + "
				|	И ВТ_Должники.Реестр В (&СписокРеестров)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должники.Должник,
	|	Должники.Статус,
	|	Должники.Сотрудник,
	|	Должники.СледующийКонтакт
	|ПОМЕСТИТЬ ВТ_Должники
	|ИЗ
	|	&Должники КАК Должники
	|ГДЕ 
	|	Должники.Группа = &Группа " + ?(Должник = Неопределено, "", "И Должники.Должник = &Должник") + "
	|;" + ?(СписокРеестров.Количество() > 0,"
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДолжники.Должник КАК Должник,
	|	РеестрДолжники.Ссылка КАК Реестр
	|ПОМЕСТИТЬ ВТ_ДолжникиРеестры
	|ИЗ
	|	Документ.Реестр.Должники КАК РеестрДолжники
	|ГДЕ
	|	РеестрДолжники.Ссылка.Проведен
	|	И РеестрДолжники.Должник В
	|			(ВЫБРАТЬ
	|				ВТ_Должники.Должник
	|			ИЗ
	|				ВТ_Должники)
	|	И РеестрДолжники.Ссылка В(&СписокРеестров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Должник
	|;","") + " 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Должники.Должник,
	|	Должники.Статус,
	|	Должники.Сотрудник,
	|	Должники.СледующийКонтакт,
	|	ЕСТЬNULL(СтатусыДолжниковСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.Статусы.ПустаяСсылка)) КАК СтатусНовый,
	|	ПривязкаСрезПоследних.СотрМенеджер КАК СотрудникНовый,
	|	ПланированиеКонтактовСрезПервых.ДатаПланирования КАК СледующийКонтактНовый
	|" + ?(СписокРеестров.Количество() > 0,",	ВТ_ДолжникиРеестры.Реестр","") + "
	|ПОМЕСТИТЬ ВТ_ДолжникиСДанными
	|ИЗ
	|	ВТ_Должники КАК Должники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланированиеКонтактов.СрезПоследних(
	|				&Дата,
	|				Должник В
	|					(ВЫБРАТЬ
	|						ВТ_Должники.Должник
	|					ИЗ
	|						ВТ_Должники)) КАК ПланированиеКонтактовСрезПервых
	|		ПО Должники.Должник = ПланированиеКонтактовСрезПервых.Должник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДолжников.СрезПоследних(
	|				&Дата,
	|				Должник В
	|					(ВЫБРАТЬ
	|						ВТ_Должники.Должник
	|					ИЗ
	|						ВТ_Должники)) КАК СтатусыДолжниковСрезПоследних
	|		ПО Должники.Должник = СтатусыДолжниковСрезПоследних.Должник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаСотрудник.СрезПоследних(
	|				&Дата,
	|				Должник В
	|					(ВЫБРАТЬ
	|						ВТ_Должники.Должник
	|					ИЗ
	|						ВТ_Должники)) КАК ПривязкаСрезПоследних
	|		ПО Должники.Должник = ПривязкаСрезПоследних.Должник
	|" + ?(СписокРеестров.Количество() > 0,"
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолжникиРеестры КАК ВТ_ДолжникиРеестры
	|		ПО Должники.Должник = ВТ_ДолжникиРеестры.Должник","") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Должники.Должник
	|ИЗ
	|	ВТ_ДолжникиСДанными КАК ВТ_Должники
	|ГДЕ
	|	НЕ (ВТ_Должники.СтатусНовый = &Статус " + Условие + ")";
	
	Если ТаблицаДолжники <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТ_Должники.СтатусНовый = &Статус", "ИСТИНА");
	КонецЕсли;
	
	МассивДолжников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Должник");
	
	Для Каждого Стр Из МассивДолжников Цикл
		Строки = Таблица.НайтиСтроки(Новый Структура("Должник", Стр));
		Для Н = 1 По Строки.Количество() Цикл
			СтрокаДляУдаления = Строки[Строки.Количество() - Н];
			
			Если СтрокаДляУдаления.Группа <> мТекущаяГруппаОтбора Тогда
				Продолжить;
			КонецЕсли;
			
			Таблица.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ОбновитьДанные();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДолжникаВЗадание(ВыбДата)
	ТекущееЗадание = ПолучитьТекущееЗадание(ВыбДата, Объект.Сотрудник);
	
	ФормаТекЗадания = ПолучитьФорму("Документ.ЗаданиеНаВыезд.ФормаОбъекта", Новый Структура("Ключ", ТекущееЗадание));
	ДанныеФормы = ФормаТекЗадания.Объект; // Получаем объект формы в переменную
	ПараметрыЗаполнения = Новый Структура("Должник, РежимРаботы, Дата", Элементы.Должники.ТекущиеДанные.Должник, ПланироватьРежимРаботы, НаДату);
	ЗаполнитьЗаданиеДанными(ДанныеФормы, ПараметрыЗаполнения); // Заполняем документ на сервере
	КопироватьДанныеФормы(ДанныеФормы, ФормаТекЗадания.Объект); // копируем наш объект в объект формы и далее открываем ее
	
	ФормаТекЗадания.Открыть();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаданиеДанными(ДанныеФормы, ПараметрыЗаполнения)
	
	НоваяСтрока = ДанныеФормы.Должники.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущееЗадание(ВыбДата, Сотрудник)
	ДатаЗадания = КонецНедели(ВыбДата);
	Отбор = Новый Структура("Сотрудник", Сотрудник);
	Выборка = Документы.ЗаданиеНаВыезд.Выбрать(ДатаЗадания, ДатаЗадания, Отбор);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции // ПолучитьТекущееЗадание()
 
Процедура ОткрытьТекущееЗадание()
	ТекущееЗадание = ПолучитьТекущееЗадание(ТекущаяДата(), Объект.Сотрудник);
	Если НЕ ТекущееЗадание = Неопределено Тогда
		ТекущееЗадание.ПолучитьФорму().Открыть();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтфильроватьОтображение(Команда)
	Отбор = ПередачаДолжников.Отбор;
	Отбор.Элементы.Очистить();
	
	Если Команда.Имя = "Выезд" Тогда
		РольОтдела = ПредопределенноеЗначение("Перечисление.РольОтдела.Выездной");//
	ИначеЕсли Команда.Имя = "УточнениеИнформации" Тогда
		РольОтдела = ПредопределенноеЗначение("Перечисление.РольОтдела.Информационный");
	ИначеЕсли Команда.Имя = "ПрекращениеРаботы" Тогда
		РольОтдела = ПредопределенноеЗначение("Перечисление.РольОтдела.ПрекращениеРаботы");
	ИначеЕсли Команда.Имя = "ЗапросВБанк" Тогда
		РольОтдела = ПредопределенноеЗначение("Перечисление.РольОтдела.Прочее");//
	ИначеЕсли Команда.Имя = "ПоказатьВсе" Тогда
		Отбор.Элементы.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Команда.Имя = "Выезд" Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подписан");
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РольОтдела");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = РольОтдела;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтказПередачи");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйПоиск()
	//Форма = ПолучитьФорму("Отчет.ПоискДолжника.Форма");
	ОткрытьФорму("Отчет.ПоискДолжника.Форма.ФормаОтчета");
	//Форма.Открыть();
КонецПроцедуры

&НаСервере
Процедура СменитьРежимРаботы()
	ТекСотр = ПараметрыСеанса.Пользователь;
	СотрудникОбъект = ТекСотр.ПолучитьОбъект();
	СотрудникОбъект.КоллективнаяРабота = Не СотрудникОбъект.КоллективнаяРабота;
	СотрудникОбъект.Записать();
	ОбновитьДанные();
КонецПроцедуры // СменитьРежимРаботы();

&НаКлиенте
Процедура ДолжникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если КоллективнаяРабота Тогда
		Таблица = ?(Элемент.Имя = "ДолжникиНаСегодня", Объект.ДолжникиНаСегодня, Неопределено);
		УдалитьЛишниеИзСпискаДолжников(, Таблица);
		Если Таблица.Количество() = 0 Тогда
			Оп = Новый ОписаниеОповещения("ПослеУдаления", ЭтаФорма);
			ПоказатьВопрос(Оп, "Текущее задание выполнено. Сформировать новое?", РежимДиалогаВопрос.ДаНет)
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ДолжникиКомментарий" Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ДолжникиНовый" Тогда
		Элемент.ТекущиеДанные.Новый = НЕ Элемент.ТекущиеДанные.Новый;
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Попытка
			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Должник) Тогда
				ОкнаКлиентскогоПриложения = ПолучитьОкна();
				Для каждого ОкноКП Из ОкнаКлиентскогоПриложения Цикл
					Если Не ОкноКП.Основное Тогда
						Если ОкноКП.Содержимое[0].КлючУникальности = ЭтаФорма.УникальныйИдентификатор Тогда
							Должник = ОкноКП.Содержимое[0].Объект.Ссылка;
							ПараметрыФормы = Новый Структура("Ключ", Должник);
							ФормаДолжника = ПолучитьФорму("Справочник.Должники.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
							ФормаДолжника.Закрыть();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Должник = Элемент.ТекущиеДанные.Должник;
				ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Должник);
				ФормаДолжника = ПолучитьФорму("Справочник.Должники.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
				ФормаДолжника.Открыть();
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьКарточку()
	МассивДолжников = Новый Массив;
	ВыделенныеСтроки = Элементы.Должники.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			СтрокаДолжника = Объект.Должники.НайтиПоИдентификатору(ВыделеннаяСтрока);
			МассивДолжников.Добавить(СтрокаДолжника.Должник);
		КонецЦикла;
	Иначе
		МассивДолжников = Объект.Должники.Выгрузить("Должник");
	КонецЕсли;
	Для Каждого Должник Из МассивДолжников Цикл
		Если Должник.Пустая() Тогда
			Сообщить("Не выбран должник.");
			Возврат;	
		КонецЕсли; 
		
		Таблица = Новый ТабличныйДокумент;
		
		ЗаполнитьКарточкуНаСервере(Таблица, Должник);
		
		Таблица.Защита = Истина;
		Таблица.ТолькоПросмотр = Истина;
		Таблица.Показать("Карточка " + Строка(Должник));
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуНаСервере(Таблица, Знач ТекДолжник)
	
	ОбработкаОтчета = Отчеты.КарточкаДолжника.Создать();
	ОбработкаОтчета.Должник = ТекДолжник;
	ОбработкаОтчета.КарточкаДолжника(Таблица, ТекДолжник);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтр(Команда)
	// Вставить содержимое обработчика.
	//Сообщить("Ок");
	
	ОткрытьФорму("Обработка.РабочееМесто.Форма.ФильтрВыбор",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРешений(Команда)
	// Вставить содержимое обработчика.
	
     	   Shell = Новый COMОбъект("WScript.Shell");
           дирМоиД=Shell.SpecialFolders.Item("MyDocuments");

			//программаОбр=дирМоиД+"\WindowsFormsTest.exe";
		   
			//программаОбр=программаОбр;
			
			
			 
	          стрДолжники=Объект.Должники.НайтиПоИдентификатору(Элементы.Должники.ТекущаяСтрока);

		   
			Если Х2=Истина  Тогда
			   
			    прогрпуть="D:\public\Distr";
		 
		        
    			 программаОбр=прогрпуть+"\WindowsFormsTest.exe "+стрДолжники.Должник+" "+стрДолжники.ВсегоЗадолженность;
		   
		   Иначе
			   
			   
			   программаОбр=дирМоиД+"\WindowsFormsTest.exe "+стрДолжники.Должник+" "+стрДолжники.ВсегоЗадолженность;
			   
		   КонецЕсли; 

		   
    	    Shell.Run(программаОбр,1, 0);

			
	
	
	
КонецПроцедуры



