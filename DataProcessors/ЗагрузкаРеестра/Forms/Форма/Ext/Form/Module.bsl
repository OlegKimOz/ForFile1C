
&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбФайла 	 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок				= "Выберите файл для загрузки:";
	ДиалогВыбФайла.ПолноеИмяФайла			= Объект.ИмяФайла; //АДРЕС
	ДиалогВыбФайла.Фильтр					= "Excel (*.xlsx)|*.xls*";
	ДиалогВыбФайла.Расширение				= "xlsx";
	ДиалогВыбФайла.МножественныйВыбор		= Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр	= Ложь;
	ДиалогВыбФайла.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтаФорма));
	

	
КонецПроцедуры


&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДопПарметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранныеФайлы) и ВыбранныеФайлы.Количество() > 0 Тогда
		 Объект.ИмяФайла = ВыбранныеФайлы[0];
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайл(Команда)
	
	//  Пройду по шаблону
	
	 стрДолж=ПолучитьКолонкиДолжник(Объект.ИмяШаблона);

	 трДоговор=ПолучитьКолонкиДоговор(Объект.ИмяШаблона);

	 трТелефоны=ПолучитьКолонкиТелефоны(Объект.ИмяШаблона);
	 
	 трАдреса=ПолучитьКолонкиАдреса(Объект.ИмяШаблона);  
	 
	 трРеестр=ПолучитьКолонкиРеестр(Объект.ИмяШаблона);
	 
	 трДополнительныеКол=ПолучитьКолонкиДополнительные(Объект.ИмяШаблона);
	 
	 трДоговорЦессии=ПолучитьКолонкиДоговорЦессии(Объект.ИмяШаблона);
	 
	 трПоручители= ПолучитьКолонкиПоручители(Объект.ИмяШаблона);
	 
	 
	 
		 
	 загодин=Ложь;
	 
	 
	  фамилия= стрДолж["Фамилия"];
	  
	  имя=стрДолж["Имя"];
	  отчество=стрДолж["Отчество"];
	  
	  
	  Если фамилия=имя Тогда
	      //Значит  один заголовок для Должника
	      должникЗаг=фамилия;
	      загодин=Истина;
	  Иначе
	      
		   //должникЗаг= стрДолж["Фамилия"]+" "+стрДолж["Имя"]+" "+ стрДолж["Отчество"];
	  КонецЕсли;	  
	    
	  
	  массивЗаг=Новый Массив;
	  

	  
	  Для каждого стр Из стрДолж Цикл
	  
		  Если стр.Ключ<>"Имя" И стр.Ключ<>"Отчество" Тогда
			  
			   массивЗаг.Добавить(стр);
			   
			   СписокПолейДолжник.Добавить(стр.Ключ);
		  	
		  
		  КонецЕсли;
	  
	  КонецЦикла;
	  
	  
	  Для каждого стр Из трДоговор Цикл
	  
			  
			   массивЗаг.Добавить(стр);
		  	   СписокПолейДоговор.Добавить(стр.Ключ);
		  
	  КонецЦикла;

	  
	  Для каждого стр Из трТелефоны Цикл
		  
		  массивЗаг.Добавить(стр);
		  
		  СписокПолейТелефоны.Добавить(стр.Значение,стр.Ключ);

		  
	  КонецЦикла;
	  

	   Для каждого стр Из трАдреса Цикл
		  
		  массивЗаг.Добавить(стр);
		  
		  СписокПолейАдреса.Добавить(стр.Значение,стр.Ключ);
		  
		  
		  
	  КонецЦикла;
	  

	   Для каждого стр Из  трРеестр Цикл
		  
		  массивЗаг.Добавить(стр);
		  СписокПолейРеестр.Добавить(стр.Ключ);

		  
		  
	  КонецЦикла;
	  
	  Если Цессия=Ложь  Тогда
		  
		  
		   Для каждого стр Из  трДоговорЦессии Цикл
		  
						
		  	    массивЗаг.Добавить(стр);
			    СписокПолейДоговорЦессии.Добавить(стр.Ключ);

		  
		  
	       КонецЦикла;
	  
		    
		  
		  
	  КонецЕсли;
	  
	  
	  
	  
	  
	   Для каждого стр Из  трДополнительныеКол Цикл
		  
					  массивЗаг.Добавить(стр);
					  
					  СписокПолейДопДанные.Добавить(стр.Значение,стр.Ключ);
		  
		  
	  КонецЦикла;
	  
	  
	  
	   Для каждого стр Из  трПоручители Цикл
		  
					  массивЗаг.Добавить(стр);
					  
					  СписокПолейПоручители.Добавить(стр.Ключ);
		  
		  
	  КонецЦикла;
	  

	  
	  

	
	  
	   	      // запишу врем файл и передам его  обработчику
	  
     	   Shell = Новый COMОбъект("WScript.Shell");
           дирМоиД=Shell.SpecialFolders.Item("MyDocuments");

		   имяэксел=Объект.ИмяФайла;
		   
		   Если Х2=Истина  Тогда
			   
			    прогрпуть="D:\public\Distr";
		 
		        имяфайлатемп=прогрпуть+"\должРеестр.txt";

				
				имяфайлатемпответ=прогрпуть+"\должРеестр_out.txt";

    			 программаОбр=прогрпуть+"\ParseExcel86.exe";
		   
		   Иначе
			   
			   имяфайлатемп=дирМоиД+"\должРеестр.txt";
			   
			   имяфайлатемпответ=дирМоиД+"\должРеестр_out.txt";

			   программаОбр=дирМоиД+"\ExcelParse.exe";
			   
		   КонецЕсли; 
		   
		   
		   
		     
		   ФайлТемп = Новый ЗаписьТекста(имяфайлатемп);
		   
		   Для каждого масстр Из массивЗаг  Цикл
			   
			   
				 //ФайлТемп.ЗаписатьСтроку(масстр.Значение);   
				 
				  Если ТипЗнч(масстр.Значение) = Тип("Массив")  Тогда
				  
				  	 ФайлТемп.ЗаписатьСтроку(масстр.Значение[1]); 
				  
				  Иначе
				  
				  	 ФайлТемп.ЗаписатьСтроку(масстр.Значение);
				  

		  
		            КонецЕсли;

			 
			 
			 
		   
		   КонецЦикла;
		   
		   ФайлТемп.ЗаписатьСтроку(Объект.ИмяФайла);
		   
		   ФайлТемп.Закрыть();


		   
		   
			
			 программаОбр=программаОбр+" "+"10";
			 
	    	 
			 Shell.Run(программаОбр,0, 1);

	  
			 // код 240 символа
			 
			 //  обработаем вернувшийся файл     долждопд_out.txt
			 
			 

 			   мСтрокФайла = Новый Массив();
			   
			   ВыбранныйФайл = Новый Файл(имяфайлатемпответ);
			   Если ВыбранныйФайл.Существует() Тогда
				   
				   	ПрочитанныйТекст = Новый ЧтениеТекста(имяфайлатемпответ, КодировкаТекста.UTF8);
												
					Строка = ПрочитанныйТекст.ПрочитатьСтроку();
												//а не был ли файл пуст?
												
					Если Строка <> Неопределено Тогда

						 Если Лев(Строка, 4)<>"---ð"  Тогда
						 
						 	   мСтрокФайла.Добавить(Строка);
						 
						 КонецЕсли; 
						 //---ð---ð
						 
						 
						
					     
					КонецЕсли;
					

					Пока Строка <> Неопределено Цикл
                       Строка = ПрочитанныйТекст.ПрочитатьСтроку();
					   Если Строка <> Неопределено Тогда
						      Если Лев(Строка, 4)<>"---ð"  Тогда
						 
						 	   мСтрокФайла.Добавить(Строка);
						 
						    КонецЕсли; 
						 
						   
					        
					     КонецЕсли;
					КонецЦикла;

				   
				   
			   КонецЕсли;
		 
			  			 
	  
	          ПостроитьТаблицу(массивЗаг);
			  
			  //ПостроитьТаблицуТемп(массивЗаг);
     
			 
			   должДанныет=Новый Структура;
			  
			  
			  Для каждого стрд  Из мСтрокФайла Цикл
				  
				     должДанныет=РазбитьСтроку(стрд,массивЗаг);
				   
				   	Запись=ТЧ.Добавить();
				     Для каждого мстр Из должДанныет Цикл
						 
						стрк=мстр.Ключ; 
					
						
						Запись[Строка(стрк)]=мстр.Значение; 	
					 
					 КонецЦикла;
					 
					 
				  
				  
			  КонецЦикла;

	
	
	
КонецПроцедуры


&НаКлиенте
Функция РазбитьСтроку(стрк,массивзаг)

    должДанные=Новый Структура;

	Попытка
	
		    Разделитель = Символ(240);
		    Строки = СтрЗаменить(стрк, Разделитель, Символы.ПС);
		    Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл
				
				
				  Если ТипЗнч(массивзаг[Индекс-1]) = Тип("Массив")  Тогда
					  
					  темпстр=массивзаг[Индекс-1].Значение[1];
					  
					  //ТЗ.Колонки.Добавить(мас.Ключ,ОписаниеТиповС,Строка(мас.Значение[1]),150);
				  
				  Иначе
				  
				  	 темпстр=массивзаг[Индекс-1].Ключ;
				  

				  
				  КонецЕсли;
				  
				 	   
						
				
				
				    темпстр=массивзаг[Индекс-1].Ключ;
						
				
				должДанные.Вставить(темпстр,СтрПолучитьСтроку(Строки, Индекс));
				
		    КонецЦикла;
			

	
    Исключение
		
		Сообщить(стрк);
		
	
	КонецПопытки;
	
		
	
	Возврат должДанные; 	

КонецФункции // ()


&НаСервере
Функция ПостроитьТаблицуТемп(СтрМ)

    КС = Новый КвалификаторыСтроки(150);
    Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

	
	 ТЗ = РеквизитФормыВЗначение("ТЧТЕМП");
	
	 //ТЗ = Новый ТаблицаЗначений;
	 
	 
	 инд=0;
     Для каждого мас Из СтрМ Цикл
		  
		  //инд=инд+1;
		  //строк=Строка(инд);
		  //
		  
	
		  Если ТипЗнч(мас.Значение) = Тип("Массив")  Тогда
		  
		  	  ТЗ.Колонки.Добавить(мас.Ключ,ОписаниеТиповС,Строка(мас.Значение[1]),150);
		  
		  Иначе
		  
		  	 ТЗ.Колонки.Добавить(мас.Ключ,ОписаниеТиповС,Строка(мас.Значение),150);
		  

		  
		  КонецЕсли;
		  
		 	   
					 
	
		 
     	
     
     КонецЦикла;
     
       
     
     
     
     
     //Опишем массив реквизитов
    МассивРеквизитов = Новый Массив;
    МассивТипаВыбора = Новый Массив;
    МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
    ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
    
    //Добавим в массив реквизитов таблицу значений
    МассивРеквизитов.Добавить(Новый РеквизитФормы("ДанныеФайлаТемп", ОписаниеТипаВыбора));
  
	//Добавим в массив реквизитов колонки таблицы
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТЧТЕМП"));
		
	КонецЦикла;
  
    ИзменитьРеквизиты(МассивРеквизитов);
    
     //Добавим Таблицу на форму
    ТаблицаДанныхФайлаТемп             = Элементы.Добавить("ТаблицаДанныхФайлаТемп", Тип("ТаблицаФормы"),ЭтаФорма.Элементы.ГруппаДолжникиДляЗаписи);
    ТаблицаДанныхФайлаТемп.ПутьКДанным = "ТЧТЕМП";
    ТаблицаДанныхФайлаТемп.Отображение = ОтображениеТаблицы.Список;
	ТаблицаДанныхФайлаТемп.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаДанныхФайлаТемп.Видимость=Ложь;
	
	//ТаблицаДанныхФайла.Родитель=ЭтаФорма.Элементы.ГруппаОбработка;
	
    //Добавим колонки
    Для Каждого Колонка Из ТЗ.Колонки Цикл
        НовыйЭлемент = Элементы.Добавить("Колонка" + Колонка.Имя, Тип("ПолеФормы"), ТаблицаДанныхФайлаТемп);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
        НовыйЭлемент.ПутьКДанным = "ТЧТЕМП." + Колонка.Имя;
		НовыйЭлемент.Заголовок=Колонка.Заголовок;
		
    КонецЦикла;  
    ЗначениеВРеквизитФормы(ТЗ,"ТЧТЕМП");
    
	
	
	
	
      	 

	
	
	
	
КонецФункции // ()


&НаСервере
Функция ПостроитьТаблицу(СтрМ)

	
	КС = Новый КвалификаторыСтроки(250);
    Массив = Новый Массив;
    Массив.Добавить(Тип("Строка"));
    ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);

	
	 ТЗ = РеквизитФормыВЗначение("ТЧ");
	
	 //ТЗ = Новый ТаблицаЗначений;
	 
	 
	 //инд=0;
	 
     Для каждого мас Из СтрМ Цикл
		  
		  //инд=инд+1;
		  //строк=Строка(инд);
		  //
		  
	
		  Если ТипЗнч(мас.Значение) = Тип("Массив")  Тогда
		  
		  	  ТЗ.Колонки.Добавить(мас.Ключ,ОписаниеТиповС,Строка(мас.Значение[1]),250);
		  
		  Иначе
		  
		  	 ТЗ.Колонки.Добавить(мас.Ключ,ОписаниеТиповС,Строка(мас.Значение),250);
		  

		  
		  КонецЕсли;
		  
		 	   
					 
	
		 
     	
     
     КонецЦикла;
     
       
     ТЗ.Колонки.Добавить("ЗаписыватьВ",Новый ОписаниеТипов("Число"),"Записавать",2);
     
     
     
     //Опишем массив реквизитов
    МассивРеквизитов = Новый Массив;
    МассивТипаВыбора = Новый Массив;
    МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
    ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
    
    //Добавим в массив реквизитов таблицу значений
    МассивРеквизитов.Добавить(Новый РеквизитФормы("ДанныеФайла", ОписаниеТипаВыбора));
  
	//Добавим в массив реквизитов колонки таблицы
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТЧ"));
		
	КонецЦикла;
  
    ИзменитьРеквизиты(МассивРеквизитов);
    
     //Добавим Таблицу на форму
    ТаблицаДанныхФайла             = Элементы.Добавить("ТаблицаДанныхФайла", Тип("ТаблицаФормы"),ЭтаФорма.Элементы.ГруппаОбработка);
    ТаблицаДанныхФайла.ПутьКДанным = "ТЧ";
    ТаблицаДанныхФайла.Отображение = ОтображениеТаблицы.Список;
	ТаблицаДанныхФайла.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	
	
	//ТаблицаДанныхФайла.Родитель=ЭтаФорма.Элементы.ГруппаОбработка;
	
    //Добавим колонки
    Для Каждого Колонка Из ТЗ.Колонки Цикл
        НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), ТаблицаДанныхФайла);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
        НовыйЭлемент.ПутьКДанным = "ТЧ." + Колонка.Имя;
		НовыйЭлемент.Заголовок=Колонка.Заголовок;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
    КонецЦикла;  
    ЗначениеВРеквизитФормы(ТЗ,"ТЧ");
    
	
	
	
	
      	 
	
	
КонецФункции // ()


&НаСервере
Функция ПолучитьКолонкиПоручители (стр)

	 догПоручители= Новый Структура;
	 
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловПоручители.Реквизит КАК Реквизит,
		|	ШаблоныФайловПоручители.Заголовок КАК Заголовок
		|ИЗ
		|	Справочник.ШаблоныФайлов.Поручители КАК ШаблоныФайловПоручители
		|ГДЕ
		|	ШаблоныФайловПоручители.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		//догПоручители.Вставить(ВыборкаДетальныеЗаписи.Реквизит+"Справочник",ВыборкаДетальныеЗаписи.Заголовок);
		 догПоручители.Вставить(ВыборкаДетальныеЗаписи.Реквизит,ВыборкаДетальныеЗаписи.Заголовок);
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат догПоручители;
	
	

КонецФункции // ()



&НаСервере
Функция ПолучитьКолонкиДоговорЦессии(стр)
	
      должДоговорЦессии=Новый Структура;

	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловДоговорЦессии.Реквизит КАК Реквизит,
		|	ШаблоныФайловДоговорЦессии.Заголовок КАК Заголовок
		|ИЗ
		|	Справочник.ШаблоныФайлов.ДоговорЦессии КАК ШаблоныФайловДоговорЦессии
		|ГДЕ
		|	ШаблоныФайловДоговорЦессии.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		 должДоговорЦессии.Вставить(ВыборкаДетальныеЗаписи.Реквизит+"Справочник",ВыборкаДетальныеЗаписи.Заголовок);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат должДоговорЦессии;
	
	
КонецФункции // ()


&НаСервере
Функция ПолучитьКолонкиДополнительные(стр)

	    должДополнительные=Новый Структура;
		
		
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловДополнительныеКолонки.Реквизит КАК Реквизит,
		|	ШаблоныФайловДополнительныеКолонки.Заголовки КАК Заголовки,
		|	ШаблоныФайловДополнительныеКолонки.Тип КАК Тип
		|ИЗ
		|	Справочник.ШаблоныФайлов.ДополнительныеКолонки КАК ШаблоныФайловДополнительныеКолонки
		|ГДЕ
		|	ШаблоныФайловДополнительныеКолонки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	инд=0;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
  		  массивДопКол=Новый Массив(3);
		  массивДопКол[0]=ВыборкаДетальныеЗаписи.Реквизит;
		  массивДопКол[1]=ВыборкаДетальныеЗаписи.Заголовки;
		  массивДопКол[2]=ВыборкаДетальныеЗаписи.Тип;
		  
		  ключСтр="ДополнительныеКолонки"+Строка(инд);
		  
		  должДополнительные.Вставить(ключСтр,массивДопКол);
		  
		  инд=инд+1;

		
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	Возврат должДополнительные;

	
КонецФункции // ()


&НаСервере
Функция ПолучитьКолонкиАдреса(стр)
	
	     должАдреса=Новый Структура;

		  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловАдреса.Реквизит КАК Реквизит,
		|	ШаблоныФайловАдреса.Заголовки КАК Заголовки,
		|	ШаблоныФайловАдреса.Тип КАК Тип
		|ИЗ
		|	Справочник.ШаблоныФайлов.Адреса КАК ШаблоныФайловАдреса
		|ГДЕ
		|	ШаблоныФайловАдреса.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	инд=0;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		  массивАдрес=Новый Массив(3);
		  массивАдрес[0]=ВыборкаДетальныеЗаписи.Реквизит;
		  массивАдрес[1]=ВыборкаДетальныеЗаписи.Заголовки;
		  массивАдрес[2]=ВыборкаДетальныеЗаписи.Тип;
		  
		  ключСтр=ВыборкаДетальныеЗаписи.Реквизит+инд;
		  
		  должАдреса.Вставить(ключСтр,массивАдрес);
		  
		  инд=инд+1;

		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат должАдреса;	 
	
КонецФункции // ()


&НаСервере
Функция ПолучитьКолонкиРеестр(стр)
	
	  должРеестр=Новый Структура;

	  
	    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловРеестр.Реквизит КАК Реквизит,
		|	ШаблоныФайловРеестр.Заголовки КАК Заголовки
		|ИЗ
		|	Справочник.ШаблоныФайлов.Реестр КАК ШаблоныФайловРеестр
		|ГДЕ
		|	ШаблоныФайловРеестр.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		  должРеестр.Вставить(ВыборкаДетальныеЗаписи.Реквизит,ВыборкаДетальныеЗаписи.Заголовки);
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	  Возврат должРеестр;
	
	
КонецФункции // ()



&НаСервере
Функция ПолучитьКолонкиТелефоны(стр)

	должТелефоны=Новый Структура;
	
	
	
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловТелефоны.Реквизит КАК Реквизит,
		|	ШаблоныФайловТелефоны.Заголовки КАК Заголовки,
		|	ШаблоныФайловТелефоны.Тип КАК Тип
		|ИЗ
		|	Справочник.ШаблоныФайлов.Телефоны КАК ШаблоныФайловТелефоны
		|ГДЕ
		|	ШаблоныФайловТелефоны.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	инд=0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		  массивТелефон=Новый Массив(3);
		  массивТелефон[0]=ВыборкаДетальныеЗаписи.Реквизит;
		  массивТелефон[1]=ВыборкаДетальныеЗаписи.Заголовки;
		  массивТелефон[2]=ВыборкаДетальныеЗаписи.Тип;
		  
		  ключСтр=ВыборкаДетальныеЗаписи.Реквизит+инд;
		  
		  должТелефоны.Вставить(ключСтр,массивТелефон);
		  
		  инд=инд+1;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


     Возврат должТелефоны;	
	

КонецФункции // ()



&НаСервере
Функция ПолучитьКолонкиДолжник(стр)

		
	//    Получить должника Колонку
	
	должФИО=Новый Структура;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловДолжники.Реквизит КАК Реквизит,
		|	ШаблоныФайловДолжники.Заголовки КАК Заголовки
		|ИЗ
		|	Справочник.ШаблоныФайлов.Должники КАК ШаблоныФайловДолжники
		|ГДЕ
		|	ШаблоныФайловДолжники.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	    должФИО.Вставить(ВыборкаДетальныеЗаписи.Реквизит,ВыборкаДетальныеЗаписи.Заголовки);
	 
		
	КонецЦикла;

	
	Возврат должФИО;
	  
	
	

КонецФункции // ()


&НаСервере
Функция ПолучитьКолонкиДоговор(стр)

	должДоговор=Новый Структура;

	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныФайловДоговоры.Реквизит КАК Реквизит,
		|	ШаблоныФайловДоговоры.Заголовки КАК Заголовки
		|ИЗ
		|	Справочник.ШаблоныФайлов.Договоры КАК ШаблоныФайловДоговоры
		|ГДЕ
		|	ШаблоныФайловДоговоры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		   должДоговор.Вставить(ВыборкаДетальныеЗаписи.Реквизит,ВыборкаДетальныеЗаписи.Заголовки);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	Возврат должДоговор;
	
	
КонецФункции // ()






&НаКлиенте
Процедура Записать(Команда)
	// Вставить содержимое обработчика.
	
	ЗаписьНаСервере(Объект.Банк);
	
		
	
	
	
	
КонецПроцедуры



&НаСервере
Процедура ЗаписьНаСервере(банк)

	
	
	
	
	Для каждого стр  Из ТЧ Цикл
		
		  ссылкаДолж=Неопределено;
		
			 должникДанныеСтруктура=Новый Структура;

			 
			  индиф=стр.ПолучитьИдентификатор();
			 
			 
			  Для каждого сппол  Из СписокПолейДолжник  Цикл
				 
				 должникДанныеСтруктура.Вставить(сппол.Значение,стр[сппол.Значение]);
			 
			  КонецЦикла;

				 Если должникДанныеСтруктура["Фамилия"]<>"" Тогда
				 
				 	  ссылкаДолж= ЗаписатьДолжник(должникДанныеСтруктура,СписокПолейАдреса,стр,индиф);
				 
				 КонецЕсли;
				 
				 
					  Если ссылкаДолж<>Неопределено  Тогда
					  //  
					  //  			 договорДанныеСтруктура=Новый Структура;
					  //  			 
					  //  			 Для каждого спполДог  Из СписокПолейДоговор  Цикл
					  //  				 
					  //  				 договорДанныеСтруктура.Вставить(спполДог.Значение,стр[спполДог.Значение]);
					  //  			 
					  //  			 КонецЦикла;
					  //  			 
					  //  		 
					  //  			 ссылкаДог=ЗаписатьДоговор(ссылкаДолж, договорДанныеСтруктура,банк);
					  //  			 
					  //  			 
					  //  			 
					  //  			 адресаДанныеСтруктура=Новый Структура;
					  //  			 Для каждого спполАдр  Из СписокПолейАдреса  Цикл
					  //  				 
					  //  				 адресМассив=Новый Массив(3);
					  //  				 адресМассив[0]=спполАдр.Значение[0];  // реквизит
					  //  				 адресМассив[1]=стр[спполАдр.Представление];  // значение
					  //  				 адресМассив[2]=спполАдр.Значение[2];   // тип
					  //  				 
					  //  				 
					  //  			    адресаДанныеСтруктура.Вставить(спполАдр.Представление,адресМассив); 
					  //  				//стр[сппол.Значение[1]] 
					  //  				 
					  //  			 КонецЦикла;	 
					  //  			 
					  //  			 ЗаписатьАдреса(ссылкаДолж,адресаДанныеСтруктура);
					  //  			   
					  //  			 
					  //  			 
					  //  			 телефоныДанныеСтруктура=Новый Структура;
					  //  			 
					  //  			  Для каждого спполТел  Из СписокПолейТелефоны  Цикл
					  //                   телефоныМассив=Новый Массив(3);
					  //  				 телефоныМассив[0]=спполТел.Значение[0];  // реквизит
					  //  				 телефоныМассив[1]=стр[спполТел.Представление];  // значение
					  //  				 телефоныМассив[2]=спполТел.Значение[2];   // тип
					  //  				 
					  //                   телефоныДанныеСтруктура.Вставить(спполТел.Представление,телефоныМассив);          
					  //  				 
					  //  				  
					  //  			  КонецЦикла;
					  //  			 
					  //  			  ЗаписатьТелефоны(ссылкаДолж,телефоныДанныеСтруктура);
					  //  			  
					  //  			  
					  //  			  
					  //  			  
					  //  			  дополнительныеДанныеСтруктура=Новый Структура;
					  //  			  
					  //  			  Для каждого спполДопДанные  Из СписокПолейДопДанные  Цикл
					  //  				    допДанныеМассив=Новый Массив(3);
					  //  				    допДанныеМассив[0]=спполДопДанные.Значение[0];  // реквизит
					  //  				    допДанныеМассив[1]=стр[спполДопДанные.Представление];  // значение
					  //  				    допДанныеМассив[2]=спполДопДанные.Значение[2];   // тип

					  //  					дополнительныеДанныеСтруктура.Вставить(спполДопДанные.Представление, допДанныеМассив);
					  //  			  	  
					  //  			  КонецЦикла;

					  //  			  ЗаписатьДополнительныеДанные(ссылкаДолж,дополнительныеДанныеСтруктура);
					  //  			   
					  //  			   
					  //  			  
					  //  			  
					  //  			  
					  //  			    договорЦессииСтруктура=Новый Структура;
					  //  			  
					  //      		   Для каждого спполДогЦессии  Из СписокПолейДоговорЦессии  Цикл
					  //  				   
					  //  				       договорЦессииСтруктура.Вставить(спполДогЦессии.Значение,стр[спполДогЦессии.Значение]);
					  //  				   
					  //  				   
					  //  	           КонецЦикла;

					  //  			   
					  //  			   ЗаписатьДоговорЦессии(ссылкаДог,договорЦессииСтруктура);
					  //  			   
					 Иначе
							
							
					//  Построю таблицу
					
					   									
									
							
						
					КонецЕсли; 
								 
							 
					 
						  			  
		
     КонецЦикла;
		   
		   
     ЭтаФорма.Элементы.ГруппаДолжникиДляЗаписи.Видимость=истина;
	

КонецПроцедуры


&НаСервере
Процедура ЗаписатьПоручителей(договор, поручСтруктура)

	    ссылкаПоручитель=Неопределено;
		
		
					  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Поручители.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Поручители КАК Поручители
					|ГДЕ
					|	Поручители.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец", договор);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					ссылкаПоручитель=ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				Если ссылкаПоручитель=Неопределено Тогда
				
					   спрПоручители=Справочники.Поручители.СоздатьЭлемент();
					
					   спрПоручители.Владелец=договор.Ссылка;
					   
					   Для каждого элемСтрукур  Из поручСтруктура  Цикл
						   
						   спрПоручители[элемСтрукур.Ключ]=элемСтрукур.Значение;
						   
					   	
					   
					   КонецЦикла; 
					   
					
					спрПоручители.Записать();   
					   
				КонецЕсли;
				
				
	

КонецПроцедуры




&НаСервере
Функция ЗаписатьДоговорЦессии(договор,догЦессииСтрукт)

	   ссылкаДоговорЦессии=Неопределено;  
			   
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДоговорЦессии.НомерДоговора КАК НомерДоговора,
				|	ДоговорЦессии.ДатаЦессии КАК ДатаЦессии,
				|	ДоговорЦессии.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ДоговорЦессии КАК ДоговорЦессии
				|ГДЕ
				|	ДоговорЦессии.Владелец.Ссылка = &Владелец
				|	И ДоговорЦессии.ДатаЦессии = &ДатаЦессии
				|	И ДоговорЦессии.НомерДоговора = &НомерДоговора";
			
				
				   
			 Запрос.УстановитьПараметр("Владелец", договор.Ссылка);
			Запрос.УстановитьПараметр("ДатаЦессии",СтроковыеФункцииКлиентСервер.СтрокаВДату(догЦессииСтрукт.ДатаЦессииСправочник));
			Запрос.УстановитьПараметр("НомерДоговора", догЦессииСтрукт.НомерДоговораСправочник);
					
			
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				ссылкаДоговорЦессии=ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			
			
			Если ссылкаДоговорЦессии=Неопределено  Тогда
				
				 спрДогЦессии=Справочники.ДоговорЦессии.СоздатьЭлемент();
				 
				 спрДогЦессии.Владелец=договор.Ссылка;
				 
				 спрДогЦессии.ДатаЦессии=СтроковыеФункцииКлиентСервер.СтрокаВДату(догЦессииСтрукт.ДатаЦессииСправочник);
				 
				 спрДогЦессии.НомерДоговора=догЦессииСтрукт.НомерДоговораСправочник;
				 
				 спрДогЦессии.Записать();
				 
				 
				
				
			
			КонецЕсли;
			
	
	
	

КонецФункции // ()




&НаСервере
Функция  ЗаписатьДополнительныеДанные(долж,допДанСтрукт)

	     Для каждого стр  Из допДанСтрукт Цикл

			     стТип=Справочники.ДополнительныеРеквизиты.НайтиПоНаименованию(стр.Значение[0]);
				 
				 допДанныеТемп="";
				 
							
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	ДополнительныеДанные.Ссылка КАК Ссылка,
							|	ДополнительныеДанные.Наименование КАК Наименование
							|ИЗ
							|	Справочник.ДополнительныеДанные КАК ДополнительныеДанные
							|ГДЕ
							|	ДополнительныеДанные.Владелец.Ссылка = &Владелец
							|	И ДополнительныеДанные.Реквизит = &Реквизит";
						
						
							Запрос.УстановитьПараметр("Владелец", долж.Ссылка);
							Запрос.УстановитьПараметр("Реквизит", стТип);
									
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							   допДанныеТемп=ВыборкаДетальныеЗаписи.Наименование;
							
						КонецЦикла;
						
						
						Если допДанныеТемп="" Тогда
							
							Если стр.Значение[1]<>"---" Тогда
								
								спрДопДанные=Справочники.ДополнительныеДанные.СоздатьЭлемент();
								
								спрДопДанные.Наименование=стр.Значение[1];
								
								спрДопДанные.Владелец=долж.Ссылка;
								
								спрДопДанные.Реквизит=стТип;
								
								
								спрДопДанные.Записать();


							
							КонецЕсли;	
								
														
							
							
						
						КонецЕсли;
						
									 
	
	     КонецЦикла; 

	

КонецФункции // ()



&НаСервере
Функция ЗаписатьТелефоны(долж,телСтрукт)

	 Для каждого стр  Из телСтрукт Цикл
	 
		стТип=Справочники.ТипыТелефонов.НайтиПоНаименованию(стр.Значение[2]); 
		 
		телТемп="";
		
		
				       	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Телефоны.Номер КАК Номер,
				|	Телефоны.Тип КАК Тип
				|ИЗ
				|	Справочник.Телефоны КАК Телефоны
				|ГДЕ
				|	Телефоны.Владелец.Ссылка = &Владелец
				|	И Телефоны.Тип = &Тип";
			
			Запрос.УстановитьПараметр("Владелец", долж.Ссылка);
			Запрос.УстановитьПараметр("Тип", стТип);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				телТемп=ВыборкаДетальныеЗаписи.Номер;
				
				
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

				 
			Если телТемп="" ИЛИ телТемп<>стр.Значение[1]  Тогда
				
				 Если стр.Значение[1]<>"---" Тогда
				 
					    спрТелофоны=Справочники.Телефоны.СоздатьЭлемент();
  				  	спрТелофоны.Номер=стр.Значение[1];
					спрТелофоны.Тип=стТип;
					спрТелофоны.Владелец=долж.Ссылка;
					спрТелофоны.Записать();
					

					 
					 
				 
				 КонецЕсли;
				
								
			КонецЕсли;
			
		 
		 
		 
	 
	 КонецЦикла; 
	
	
	

КонецФункции // ()





&НаСервере
Функция ЗаписатьАдреса(долж, адресСтрукт)

    типРегистрации=Справочники.ТипыАдресов.НайтиПоНаименованию("Регистрации",Истина);	
	
	ссылкаАдресТипРегистрации=Неопределено;
	
   Для каждого стр  Из адресСтрукт Цикл
   
	      	
	  стТип=Справочники.ТипыАдресов.НайтиПоНаименованию(стр.Значение[2]);
	  
	  адресТемп="";
	  
	   			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Адреса.Адрес КАК Адрес,
				|	Адреса.Тип КАК Тип,
				|	Адреса.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Адреса КАК Адреса
				|ГДЕ
				|	Адреса.Владелец = &Владелец
				|	И Адреса.Тип = &Тип";
			
			Запрос.УстановитьПараметр("Владелец", долж);
			Запрос.УстановитьПараметр("Тип", стТип);
			

			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				Если Выборка.Тип=типРегистрации Тогда
				    ссылкаАдресТипРегистрации=Выборка.Ссылка;
					
				
				КонецЕсли;
				
				адресТемп=Выборка.Адрес;
				
			КонецЦикла;
			
			
			Если  адресТемп="" ИЛИ адресТемп<>стр.Значение[1]  Тогда
				
				//   запишу в справочник адреса
				
				   Если стр.Значение[1]<>"---" Тогда
			            спрАдрес=Справочники.Адреса.СоздатьЭлемент();
						спрАдрес.Адрес=стр.Значение[1];
						спрАдрес.Наименование=стр.Значение[1];
						спрАдрес.Тип=стТип;
						спрАдрес.Владелец=долж.Ссылка;
						спрАдрес.Записать();
						
						Если стТип=типРегистрации Тогда
						
							ссылкаАдресТипРегистрации=спрАдрес.Ссылка;
						
						КонецЕсли;
						   
						
				   КонецЕсли;
				
										
			КонецЕсли;
			
			
			
			
   
   КонецЦикла;	
	

   //  в адрес с типом регистрации - заполню поля ?
   
     Если ссылкаАдресТипРегистрации<>Неопределено Тогда
	 
	 	   ИсправитьАдресРегистрации(ссылкаАдресТипРегистрации, долж);

	 
	 КонецЕсли;
   
          
   
	
	

КонецФункции // ()


&НаСервере
Процедура ИсправитьАдресРегистрации(ссылкаАдрес, ссылкаВладелец)

	      типРегистрации=Справочники.ТипыАдресов.НайтиПоНаименованию("Регистрации",Истина);
		  типДом=Справочники.ТипыАдресов.НайтиПоНаименованию("Дом",Истина);
		  типИндекс=Справочники.ТипыАдресов.НайтиПоНаименованию("Индекс",Истина);
		  типРайон=Справочники.ТипыАдресов.НайтиПоНаименованию("Район",Истина);
		  типТипДома=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип дома",Истина);
		  типТипРегиона=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип региона",Истина);
		  типРегионТекст=Справочники.ТипыАдресов.НайтиПоНаименованию("Регион текст",Истина);
		  типТипН_П=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип н/п",Истина);
		  типТипРайона=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип района",Истина);
		  типСтрана=Справочники.ТипыАдресов.НайтиПоНаименованию("Страна",Истина);
		  типУлица=Справочники.ТипыАдресов.НайтиПоНаименованию("Улица",Истина);
		  типТипУлицы=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип улицы",Истина);
		  типНаселенныйПункт=Справочники.ТипыАдресов.НайтиПоНаименованию("Населенный пункт",Истина);
		  типФедеральныйОкруг=Справочники.ТипыАдресов.НайтиПоНаименованию("Федеральный округ",Истина);
		  типТипКорпуса_Строения=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип корпуса / строения",Истина);
		  типТип_Квартиры=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип квартиры",Истина);
		  типКорпус_Строение=Справочники.ТипыАдресов.НайтиПоНаименованию("Корпус / строение",Истина);
		  типКвартира=Справочники.ТипыАдресов.НайтиПоНаименованию("Квартира",Истина);
		  типАдминистративный_Округ=Справочники.ТипыАдресов.НайтиПоНаименованию("Административный округ",Истина);
          типТип_Города=Справочники.ТипыАдресов.НайтиПоНаименованию("Тип города",Истина);
		  типГород=Справочники.ТипыАдресов.НайтиПоНаименованию("Город",Истина);
		  типРайон_Города=Справочники.ТипыАдресов.НайтиПоНаименованию("Район города",Истина);
		  
		  
		   НачатьТранзакцию();
		  Попытка
		  
		  	   об=ссылкаАдрес.ПолучитьОбъект();
		   
			   об.Индекс= ПолучитьЗначениеТипа(типИндекс, ссылкаВладелец);
			   
			   Если Не ЗначениеЗаполнено(об.Регион)   Тогда
			   
			   	 об.Регион=НайтиРегионПоТексту(ПолучитьЗначениеТипа(типРегионТекст, ссылкаВладелец));
			   
			   КонецЕсли;
			   
			   
			   
			   
			   
			   
			   об.ТипРегиона= ПолучитьЗначениеТипа(типТипРегиона, ссылкаВладелец);
			   об.РегионТекст= ПолучитьЗначениеТипа(типРегионТекст, ссылкаВладелец);
			   об.Страна= ПолучитьЗначениеТипа(типСтрана, ссылкаВладелец);
			   об.ТипРайона= ПолучитьЗначениеТипа(типТипРайона, ссылкаВладелец);
			   об.Район= ПолучитьЗначениеТипа(типРайон, ссылкаВладелец);
			   об.ТипГорода= ПолучитьЗначениеТипа(типТип_Города, ссылкаВладелец);
			   об.Город= ПолучитьЗначениеТипа(типГород, ссылкаВладелец);
			   об.ТипНаселенногоПункта= ПолучитьЗначениеТипа(типТипН_П, ссылкаВладелец);
			   об.НаселенныйПункт= ПолучитьЗначениеТипа(типНаселенныйПункт, ссылкаВладелец);
			   об.ТипУлицы= ПолучитьЗначениеТипа(типТипУлицы, ссылкаВладелец);
			   об.Улица= ПолучитьЗначениеТипа(типУлица, ссылкаВладелец);
			   об.ТипДома= ПолучитьЗначениеТипа(типТипДома, ссылкаВладелец);
			   об.Дом= ПолучитьЗначениеТипа(типДом, ссылкаВладелец);
			   об.ТипКорпусаСтроения= ПолучитьЗначениеТипа(типТипКорпуса_Строения, ссылкаВладелец);
			   об.КорпусСтроение= ПолучитьЗначениеТипа(типКорпус_Строение, ссылкаВладелец);
			   об.ТипКвартиры= ПолучитьЗначениеТипа(типТип_Квартиры, ссылкаВладелец);
			   об.Квартира= ПолучитьЗначениеТипа(типКвартира, ссылкаВладелец);
			   об.АдмОкруг= ПолучитьЗначениеТипа(типАдминистративный_Округ, ссылкаВладелец);
			   
			   об.РайонГорода= ПолучитьЗначениеТипа(типРайон_Города, ссылкаВладелец);
			   
			  
			   		   
			   об.Записать();

			   ЗафиксироватьТранзакцию();
		  
		  Исключение
			    ОтменитьТранзакцию();
			    ТекстОшибки = ОписаниеОшибки();
				Сообщить(ТекстОшибки);
			  
		  КонецПопытки;
	
	    		   
	
	    	                   
	
	

КонецПроцедуры

&НаСервере
Функция НайтиРегионПоТексту(стрТекст)

	 ссылкаРегион=Неопределено;
	
	           	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Регионы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Регионы КАК Регионы
		|ГДЕ
		|	Регионы.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование","%"+ стрТекст+"%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ссылкаРегион=ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат  ссылкаРегион;
	

КонецФункции // ()

 
	  

&НаСервере
Функция ПолучитьЗначениеТипа(ссылкаТип, ссылкаВладелец)
	
	    данныеАдрес="";
	
	
	        	               	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Адреса.Тип КАК Тип,
						|	Адреса.Адрес КАК Адрес
						|ИЗ
						|	Справочник.Адреса КАК Адреса
						|ГДЕ
						|	Адреса.Владелец = &Владелец
						|	И Адреса.Тип = &Тип";
					
					Запрос.УстановитьПараметр("Владелец", ссылкаВладелец);
					Запрос.УстановитьПараметр("Тип", ссылкаТип);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						данныеАдрес=ВыборкаДетальныеЗаписи.Адрес;
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	    Возврат данныеАдрес;

КонецФункции // ()




&НаСервере
Функция ЗаписатьДоговор(долж,дог,банк)

	НачатьТранзакцию();

	   ссылкаДоговор=Неопределено;
	   
		  // проверю есть ли такой договор
		  
			  			
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Договоры.НомерДоговора КАК НомерДоговора,
					|	Договоры.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Договоры КАК Договоры
					|ГДЕ
					|	Договоры.Владелец.Ссылка = &Владелец
					|	И Договоры.НомерДоговора = &НомерДоговора";
				
				
				    Запрос.УстановитьПараметр("Владелец", долж.Ссылка);
				 	Запрос.УстановитьПараметр("НомерДоговора",дог["НомерДоговора"]);
					
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					ссылкаДоговор=Выборка.Ссылка;
					
				КонецЦикла;
			
				
		Если ссылкаДоговор=Неопределено Тогда
			
			   // создать элемент справочника
			  спрДоговор=Справочники.Договоры.СоздатьЭлемент();
			  
			   Для  каждого полеДог  Из СписокПолейДоговор  Цикл

				   
				    Если полеДог.Значение = "ДатаФинансирования" ИЛИ полеДог.Значение = "ДатаВозникновенияДолга" ИЛИ полеДог.Значение = "ДатаВозникновенияДолга" ИЛИ полеДог.Значение = "ДатаРасчетаЗадолженности"  Тогда

				   
				   	  спрДоговор[полеДог.Значение]= СтроковыеФункцииКлиентСервер.СтрокаВДату(дог[полеДог.Значение]);

				   
				   Иначе
				   
				   	    спрДоговор[полеДог.Значение]=дог[полеДог.Значение];

				   
					КонецЕсли;
					
					Если полеДог.Значение = "ТипКредита" Тогда
						
						// Найти тип договора
						 типКр= НайтиТипКредита(дог[полеДог.Значение]);
						
						 
						
				    КонецЕсли;
				   
				   
				   
				   
			   КонецЦикла;
			
			   спрДоговор.Владелец=долж.Ссылка;
			   
			   
			   
			    спрДоговор.ТипКредита=типКр;
			   
			   
			   спрДоговор.Банк=банк;
			   
			   спрДоговор.Записать();
			   
			   
			   
			   
			ссылкаДоговор=спрДоговор.Ссылка;
			
			
			   
		КонецЕсли;		
			
			
			
	ЗафиксироватьТранзакцию();
		
			
	  Возврат ссылкаДоговор;		

КонецФункции // ()


Функция НайтиТипКредита(стр)

	   спрТипыКредитов=Неопределено;
	   
	   спрТипыКредитов=Справочники.ТипыКредитов.НайтиПоНаименованию(стр,Истина);
	   
	   Если  спрТипыКредитов =Справочники.ТипыКредитов.ПустаяСсылка() Тогда
		   
		     спрТипыКредитов=Справочники.ТипыКредитов.СоздатьЭлемент();
			 
			 спрТипыКредитов.Наименование=стр;
			 
			 спрТипыКредитов.Записать();
			 
		   
	   
	   КонецЕсли;
	   
	   
	Возврат спрТипыКредитов;
	
	

КонецФункции // ()




&НаСервере
Функция ЗаписатьДолжник(долж,адресСтр,стр,инд)

	 Разделитель = " ";
	 Строки=СтрЗаменить(долж["Фамилия"],Разделитель,Символы.ПС);
	 фиоМассив=Новый Массив;
	 
	 Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл

		    фиоМассив.Добавить(СтрПолучитьСтроку(Строки,Индекс));
	 
	 КонецЦикла;

	 адрРегистрации="";
	 
	 Для каждого адр  Из адресСтр  Цикл
		 
		   //   найду колонку с Адрес регистрации
		  Если адр.Значение[2].Наименование="Регистрации" Тогда
		  
					адрРегистрации=стр[адр.Представление];
					//стр[адр.Представление]
		  
		  КонецЕсли; 
		   
			 	
	 
	 КонецЦикла;
	 
	 
	 
	паспортСтрока = СтрЗаменить(долж["НомерПаспорта"]," " , "");  
	  	
		 
	 датаРожд= СтроковыеФункцииКлиентСервер.СтрокаВДату(долж["ДатаРождения"]);
	 
	 
	 
	 ссылкаДолжник=Неопределено;
	 
	 //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должники КАК Должники
		|ГДЕ
		|	Должники.Наименование = &Наименование
		|	";
	
	
	 
	 Запрос.УстановитьПараметр("Наименование", долж["Фамилия"]);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		   ссылкаДолжник=ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	 
	 
	 
	////{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	//// Данный фрагмент построен конструктором.
	//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Должники.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Справочник.Должники КАК Должники
	//	|ГДЕ
	//	|	Должники.Наименование = &Наименование
	//	|	И Должники.ДатаРождения = &ДатаРождения";
	//
	//
	// Запрос.УстановитьПараметр("ДатаРождения", датаРожд);
	// Запрос.УстановитьПараметр("Наименование", долж["Фамилия"]);

	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//	   ссылкаДолжник=ВыборкаДетальныеЗаписи.Ссылка;
	//	
	//КонецЦикла;
	//
	////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА



	
	 //     
	 //Запрос.УстановитьПараметр("ДатаРождения", датаРожд);
	 //Запрос.УстановитьПараметр("Наименование", долж["Фамилия"]);
	 //   ссылкаДолжник=ВыборкаДетальныеЗаписи.Ссылка;
	
////	

	
//
	   Если ссылкаДолжник=Неопределено  Тогда 
		   
			 //Этого запишу
			 
			 
			      
			 //
			 //      ТемСтр=ТЧТЕМП.Добавить();
			 //      
			 //      ЗаполнитьЗначенияСвойств(ТемСтр, стр);
			 //      
			 текЗапись=ТЧ.НайтиПоИдентификатору(инд);
			 
			//Если Не текЗапись.ЗаписыватьВ=1 Тогда
			//
			//	 текЗапись.ЗаписыватьВ=1
			//	
			//
			//КонецЕсли; 
			// 
			 
			 
			 
			 
			 //   		   //// создать элемент справочника
						   // 		  спрДолжник=Справочники.Должники.СоздатьЭлемент();
						   // 		  
						   // 		  
						   // 		  Для  каждого полеД  Из  СписокПолейДолжник Цикл
						   // 			  
						   // 			  
						   // 			  Если полеД.Значение="Регион" Тогда
						   // 			  
						   // 				//  вытащу регион 
						   // 				 регСсылка= РегионПоСтроке(долж[полеД.Значение]);
						   // 				 
						   // 				 спрДолжник[полеД.Значение]=регСсылка;
						   // 				
						   // 				  
						   // 			  ИначеЕсли полеД.Значение="ДатаРождения"  Тогда 
						   // 				  
						   // 				  
						   // 			  	   спрДолжник[полеД.Значение]=СтроковыеФункцииКлиентСервер.СтрокаВДату(долж["ДатаРождения"]);
						   // 				   
						   // 			   ИначеЕсли полеД.Значение="НомерПаспорта"  Тогда 
						   // 				   
						   // 				   спрДолжник[полеД.Значение]=паспортСтрока;
						   // 				   
						   // 				   
						   // 			  Иначе	   

						   // 			       спрДолжник[полеД.Значение]=долж[полеД.Значение];
						   // 			  КонецЕсли;
						   // 			  
						   // 		  КонецЦикла;
						   // 		  
						   // 		  
						   // 		  
						   // 		   спрДолжник.Фамилия= фиоМассив[0];
						   // 		   спрДолжник.Имя=фиоМассив[1];
						   // 		   спрДолжник.Отчество=фиоМассив[2];
						   // 	       спрДолжник.Записать();
						   // 	      ссылкаДолжник=спрДолжник;
									  
									  
 	   Иначе
									  
		   
		   // заполню таблицу соответствия
		   
		        ЗаписьСо=Объект.ТЧСоответствия.Добавить();
				
				ЗаписьСо.ДолжникВБазе=ссылкаДолжник;
				ЗаписьСо.ДолжникВФайле=долж["Фамилия"];
				ЗаписьСо.ФайлДатаРождения=долж["ДатаРождения"];
				ЗаписьСо.ВБазеДатаРождения=ДатаРожденияДолжника(ссылкаДолжник);
				
				ЗаписьСо.ФайлПаспорт=долж["НомерПаспорта"];
				ЗаписьСо.ФайлАдресРегистрации=адрРегистрации;
                ЗаписьСо.ИДСтроки=инд;
				
				
		   
		   
									  
			  
			  
 	   КонецЕсли;
	   
	   
	   
	   
	 Возврат  ссылкаДолжник;
	

КонецФункции // ЗаписатьДолжник()

&НаСервере
Функция ДатаРожденияДолжника(долж)

	   датаРож=Неопределено;
	
			         	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Должники.ДатаРождения КАК ДатаРождения
				|ИЗ
				|	Справочник.Должники КАК Должники
				|ГДЕ
				|	Должники.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", долж);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				датаРож= ВыборкаДетальныеЗаписи.ДатаРождения;
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	    Возврат  датаРож;

КонецФункции // ()




&НаСервере
Функция РегионПоСтроке(регстр)

	регионСсылка=Неопределено;
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыРегионовФССП.Наименование КАК Наименование,
		|	КодыРегионовФССП.КодРегионаФССП КАК КодРегионаФССП,
		|	КодыРегионовФССП.Синоним КАК Синоним
		|ИЗ
		|	Справочник.КодыРегионовФССП КАК КодыРегионовФССП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		
		СтрКодФССП=Лев(Выборка.Синоним,10);

		индексстр=Найти(ВРег(регстр), ВРег(СтрКодФССП));
		
		Если индексстр<>0 Тогда
			
						
							    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Регионы.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.Регионы КАК Регионы
						|ГДЕ
						|	Регионы.КодРегионаФССП = &КодРегионаФССП";
					
					Запрос.УстановитьПараметр("КодРегионаФССП", Выборка.КодРегионаФССП);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						
						регионСсылка=ВыборкаДетальныеЗаписи.Ссылка;
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	Возврат регионСсылка;
	
	

КонецФункции // ()

&НаКлиенте
Процедура СоздатьРеестр(Команда)
	// Вставить содержимое обработчика.
	
	
	//
	  
	     Для каждого  темпСтр  Из Объект.ТЧСоответствия  Цикл
		 
			    Если  темпСтр.Есть Тогда
					
					 текЗапись=ТЧ.НайтиПоИдентификатору(темпСтр.ИДСтроки);
			         текЗапись.ЗаписыватьВ=1;
			  
					
				
				КонецЕсли;
			 
		 
		 КонецЦикла;
	
		 
		 СоздатьРеестрНаСервере(Объект.Банк);
		 
	
	
КонецПроцедуры



&НаСервере
Функция СоздатьРеестрНаСервере(банк)
	
	      таблицаДолжникиРеестр = Новый ТаблицаЗначений;
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("Должник",Новый ОписаниеТипов("СправочникСсылка.Должники"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("Договор",Новый ОписаниеТипов("СправочникСсылка.Договоры"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("ТекущийОсновнойДолг",Новый ОписаниеТипов("Число"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("ТекущиеПроценты",Новый ОписаниеТипов("Число"));

		  таблицаДолжникиРеестр.Колонки.Добавить("ВсегоЗадолженность",Новый ОписаниеТипов("Число"));

		  таблицаДолжникиРеестр.Колонки.Добавить("ПросроченныеПроценты",Новый ОписаниеТипов("Число"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("ПросроченныйОсновнойДолг",Новый ОписаниеТипов("Число"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("Неустойка",Новый ОписаниеТипов("Число"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("Госпошлина",Новый ОписаниеТипов("Число"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("Прочее",Новый ОписаниеТипов("Число"));
		  
		  таблицаДолжникиРеестр.Колонки.Добавить("ДатаРасчетаЗадолженности",Новый ОписаниеТипов("Дата"));

		  таблицаДолжникиРеестр.Колонки.Добавить("ДнейПросрочки",Новый ОписаниеТипов("Число"));
		  
		  

		  
	
   //НачатьТранзакцию();

		  
		  
		  
	
	  Для каждого стр  Из ТЧ Цикл
		  
				     ссылкаДолж=Неопределено;
				
					 должникДанныеСтруктура=Новый Структура;

					 
					  индиф=стр.ПолучитьИдентификатор();
					 
					 
					  Для каждого сппол  Из СписокПолейДолжник  Цикл
						 
						 должникДанныеСтруктура.Вставить(сппол.Значение,стр[сппол.Значение]);
					 
					  КонецЦикла;

					  
					   Если должникДанныеСтруктура["Фамилия"]<>"" Тогда
							
							ссылкаДолж= ПолучитьСсылкуДолжника(должникДанныеСтруктура,СписокПолейАдреса,стр,индиф);
						 
					   КонецЕсли;

			   
			              Если ссылкаДолж<>Неопределено  Тогда
					    
					    			 договорДанныеСтруктура=Новый Структура;
					    			 
					    			 Для каждого спполДог  Из СписокПолейДоговор  Цикл
					    				 
					    				 договорДанныеСтруктура.Вставить(спполДог.Значение,стр[спполДог.Значение]);
					    			 
					    			 КонецЦикла;
					    			 
					    		 
					    			 ссылкаДог=ЗаписатьДоговор(ссылкаДолж, договорДанныеСтруктура,банк);
					    			 
					    			 
					    			 
					    			 адресаДанныеСтруктура=Новый Структура;
					    			 Для каждого спполАдр  Из СписокПолейАдреса  Цикл
					    				 
					    				 адресМассив=Новый Массив(3);
					    				 адресМассив[0]=спполАдр.Значение[0];  // реквизит
					    				 адресМассив[1]=стр[спполАдр.Представление];  // значение
					    				 адресМассив[2]=спполАдр.Значение[2];   // тип
					    				 
					    				 
					    			    адресаДанныеСтруктура.Вставить(спполАдр.Представление,адресМассив); 
					    				//стр[сппол.Значение[1]] 
					    				 
					    			 КонецЦикла;	 
					    			 
					    			 ЗаписатьАдреса(ссылкаДолж,адресаДанныеСтруктура);
					    			   
					    			 
					    			 
					    			 телефоныДанныеСтруктура=Новый Структура;
					    			 
					    			  Для каждого спполТел  Из СписокПолейТелефоны  Цикл
					                     телефоныМассив=Новый Массив(3);
					    				 телефоныМассив[0]=спполТел.Значение[0];  // реквизит
					    				 телефоныМассив[1]=стр[спполТел.Представление];  // значение
					    				 телефоныМассив[2]=спполТел.Значение[2];   // тип
					    				 
					                     телефоныДанныеСтруктура.Вставить(спполТел.Представление,телефоныМассив);          
					    				 
					    				  
					    			  КонецЦикла;
					    			 
					    			  ЗаписатьТелефоны(ссылкаДолж,телефоныДанныеСтруктура);
					    			  
					    			  
					    			  
					    			  
					    			  дополнительныеДанныеСтруктура=Новый Структура;
					    			  
					    			  Для каждого спполДопДанные  Из СписокПолейДопДанные  Цикл
					    				    допДанныеМассив=Новый Массив(3);
					    				    допДанныеМассив[0]=спполДопДанные.Значение[0];  // реквизит
					    				    допДанныеМассив[1]=стр[спполДопДанные.Представление];  // значение
					    				    допДанныеМассив[2]=спполДопДанные.Значение[2];   // тип

					    					дополнительныеДанныеСтруктура.Вставить(спполДопДанные.Представление, допДанныеМассив);
					    			  	  
					    			  КонецЦикла;

					    			  ЗаписатьДополнительныеДанные(ссылкаДолж,дополнительныеДанныеСтруктура);
					    			   
					    			   
					    			  
					    			  
									  
									Если Цессия=Ложь Тогда
									
										      договорЦессииСтруктура=Новый Структура;
							    			  
							        		   Для каждого спполДогЦессии  Из СписокПолейДоговорЦессии  Цикл
							    				   
							    				       договорЦессииСтруктура.Вставить(спполДогЦессии.Значение,стр[спполДогЦессии.Значение]);
							    				   
							    				   
							    	           КонецЦикла;

							    			   
							    			   ЗаписатьДоговорЦессии(ссылкаДог,договорЦессииСтруктура);

									
									КонецЕсли;  
					    			  									   
									 
									поручителиСтруктура=Новый Структура;
									Для каждого  спполПоручители Из СписокПолейПоручители  Цикл
										
										 
										
										   поручителиСтруктура.Вставить(спполПоручители.Значение,стр[спполПоручители.Значение]);
									
									КонецЦикла;
									
									 ЗаписатьПоручителей(ссылкаДог, поручителиСтруктура);
									

									   
									   
									   //   Запишу таблицу реестра
									   
									   реестрДолжникиСтруктура=Новый Структура;
									   
									    									   
                                        стрРеестрДолжник= таблицаДолжникиРеестр.Добавить();
										
										
										темпДолжник =Справочники.Должники;
										
										стрРеестрДолжник.Должник=ссылкаДолж;
										
										стрРеестрДолжник.Договор=ссылкаДог;
										
										
										Попытка
											 
											
											     Для каждого спполреестрДолжники  Из СписокПолейРеестр  Цикл
								    				   
								    				       реестрДолжникиСтруктура.Вставить(спполреестрДолжники.Значение,стр[спполреестрДолжники.Значение]);
														   
														   
														   Если ТипЗнч(стрРеестрДолжник[спполреестрДолжники.Значение]) = Тип("Число")  Тогда
															   
															     темпЧисло=СтрЗаменить(стр[спполреестрДолжники.Значение]," ","");
																 
																  
															   
															     стрРеестрДолжник[спполреестрДолжники.Значение]=Число(Формат(темпЧисло,"ЧГ="));
															   
															   
																 
															 Иначе 
																стрРеестрДолжник[спполреестрДолжники.Значение]=стр[спполреестрДолжники.Значение]; 
																 
															 КонецЕсли;	
															 
													       		   
														   
								    				   
								    	           КонецЦикла;

										
									    Исключение
												   
											ТекстОшибки = ОписаниеОшибки();
											Сообщить(стр.Фамилия);
											Сообщить(ТекстОшибки);
											Сообщить(спполреестрДолжники.Значение);
											
											
										
										КонецПопытки;
										
									  
									   
							
						
					КонецЕсли; 
								 
		  
	
		  КонецЦикла;
		   
		  
		  //  создать документ реестр
		  
	

		  
		  докРеестрСтр=Документы.Реестр.СоздатьДокумент();
		  
		  докРеестрСтр.Банк=Объект.Банк;
		  
		  
		  докРеестрСтр.Дата=ТекущаяДата();
		  докРеестрСтр.ДатаЗагрузки=ТекущаяДата();
		  
		  докРеестрСтр.Должники.Загрузить(таблицаДолжникиРеестр);
		  
		  
		  
		  докРеестрСтр.Записать();
		  
		  
		//ЗафиксироватьТранзакцию();
  
		  
	
	      Сообщить("Ок");

КонецФункции // ()









&НаСервере
Функция  ПолучитьСсылкуДолжника(долж,адресСтр,стр,инд)
 НачатьТранзакцию();

	
				 Разделитель = " ";
				 Строки=СтрЗаменить(долж["Фамилия"],Разделитель,Символы.ПС);
				 фиоМассив=Новый Массив;
				 
				 индексМассива=СтрЧислоСтрок(Строки);
				 
				 Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл

					    фиоМассив.Добавить(СтрПолучитьСтроку(Строки,Индекс));
				 
				 КонецЦикла;

				 адрРегистрации="";
				 
				 Для каждого адр  Из адресСтр  Цикл
					 
					   //   найду колонку с Адрес регистрации
					  Если адр.Значение[2].Наименование="Регистрации" Тогда
					  
								адрРегистрации=стр[адр.Представление];
								//стр[адр.Представление]
					  
					  КонецЕсли; 
					   
						 	
				 
				 КонецЦикла;
				 
				 
				 
				паспортСтрока = СтрЗаменить(долж["НомерПаспорта"]," " , "");  
				  	
					 
				 датаРожд= СтроковыеФункцииКлиентСервер.СтрокаВДату(долж["ДатаРождения"]);
				 
				 ссылкаДолжник=Неопределено;

				 //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Должники.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Должники КАК Должники
					|ГДЕ
					|	Должники.Наименование = &Наименование
					|	";
				
				
				 //Запрос.УстановитьПараметр("ДатаРождения", датаРожд);
				 Запрос.УстановитьПараметр("Наименование", долж["Фамилия"]);

				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					   ссылкаДолжник=ВыборкаДетальныеЗаписи.Ссылка;
					
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
				
				//
				//	 //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				//// Данный фрагмент построен конструктором.
				//// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				//
				//Запрос = Новый Запрос;
				//Запрос.Текст = 
				//	"ВЫБРАТЬ
				//	|	Должники.Ссылка КАК Ссылка
				//	|ИЗ
				//	|	Справочник.Должники КАК Должники
				//	|ГДЕ
				//	|	Должники.Наименование ПОДОБНО &Наименование
				//	|	И Должники.ДатаРождения = &ДатаРождения";
				//
				//
				// Запрос.УстановитьПараметр("ДатаРождения", датаРожд);
				// Запрос.УстановитьПараметр("Наименование", долж["Фамилия"]);

				//
				//РезультатЗапроса = Запрос.Выполнить();
				//
				//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				//
				//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
				//	   ссылкаДолжник=ВыборкаДетальныеЗаписи.Ссылка;
				//	
				//КонецЦикла;
				//
				////}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА



				 Если ссылкаДолжник=Неопределено  ИЛИ стр.ЗаписыватьВ=1  Тогда 

					 
					          
			 
			    		   //// создать элемент справочника
						    		  спрДолжник=Справочники.Должники.СоздатьЭлемент();
						    		  
						    		  
						    		  Для  каждого полеД  Из  СписокПолейДолжник Цикл
						    			  
						    			  
						    			  Если полеД.Значение="Регион" Тогда
						    			  
						    				//  вытащу регион 
						    				 регСсылка= РегионПоСтроке(долж[полеД.Значение]);
						    				 
						    				 спрДолжник[полеД.Значение]=регСсылка;
						    				
						    				  
										 ИначеЕсли полеД.Значение="ДатаРождения"  Тогда 
											   Если СтроковыеФункцииКлиентСервер.СтрокаВДату(долж["ДатаРождения"])= Дата('0001.01.01') Тогда
												   
												      стркДата=Лев(долж["ДатаРождения"],10);
													  спрДолжник[полеД.Значение]=СтроковыеФункцииКлиентСервер.СтрокаВДату( стркДата);  
												   
											   Иначе
												   
											       спрДолжник[полеД.Значение]=СтроковыеФункцииКлиентСервер.СтрокаВДату(долж["ДатаРождения"]);
											   КонецЕсли;

						    				  
											  
						    				   
						    			   ИначеЕсли полеД.Значение="НомерПаспорта"  Тогда 
						    				   
						    				   спрДолжник[полеД.Значение]=паспортСтрока;
						    				   
						    				   
						    			  Иначе	   

						    			       спрДолжник[полеД.Значение]=долж[полеД.Значение];
						    			  КонецЕсли;
						    			  
						    		  КонецЦикла;
						    		  
									  
									        
										  //индексМассива
										  
											  
											  Если индексМассива=3 Тогда
											       спрДолжник.Фамилия= фиоМассив[0];
											  	   спрДолжник.Имя= фиоМассив[1];
											       спрДолжник.Отчество= фиоМассив[2];
											  КонецЕсли;
											  
											    Если индексМассива=2 Тогда
											       спрДолжник.Фамилия= фиоМассив[0];
											  	   спрДолжник.Имя= фиоМассив[1];
											       
											  КонецЕсли;
											  

									  
								    		   
											   
										   спрДолжник.Записать();
									   
									   
									   
									   
									   
									   
									   
									   
									 ссылкаДолжник=спрДолжник.Ссылка;

					 
					 
					 
					 
				  КонецЕсли; 

	ЗафиксироватьТранзакцию();
	
	      		  
	
	    Возврат  ссылкаДолжник;
		
		

КонецФункции // ()

&НаСервере
Процедура ЗаписатьВсехНаСервере()
	  Для каждого стр Из Объект.ТЧСоответствия  Цикл
		  стр.Есть=Истина;
	  
	  КонецЦикла;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьВсех(Команда)
	ЗаписатьВсехНаСервере();
КонецПроцедуры














