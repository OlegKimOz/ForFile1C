//&НаСервере
//Перем ТаблицаВрем;

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогФильтр = "Excel|*.xls*";
	ДиалогРасширение = "xlsx";
	ДиалогВыбФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбФайла.Заголовок =	"Выберите файл для загрузки:";
	ДиалогВыбФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогВыбФайла.Фильтр = ДиалогФильтр;
	//ДиалогВыбФайла.Расширение = ДиалогРасширение;
	ДиалогВыбФайла.МножественныйВыбор = Ложь;
	ДиалогВыбФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбФайла.ИндексФильтра = 0;
	ДиалогВыбФайла.ПроверятьСуществованиеФайла = Истина;
	Если ДиалогВыбФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Прочитать(Команда)
	
	ФайлВыгрузки = Новый Файл(ИмяФайла);
	Если ФайлВыгрузки.Существует() Тогда
		РасширениеФайла = ФайлВыгрузки.Расширение;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПослеПомещенияФайла", ЭтотОбъект);
		НачатьПомещениеФайла(ОповещениеОЗавершении,,ИмяФайла, Ложь, ЭтаФорма.УникальныйИдентификатор);
		//ПрочитатьФайлНаСервере(НовоеИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлНаСервере(АдресФайлаВХранилище)
	
	Если АдресФайлаВХранилище = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сначала нужно передать файл с клиента на сервер.");
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	Если ДвоичныеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Похоже файл уже был удалён из хранилища.");
		Возврат;
	КонецЕсли;
	
	НовоеИмя = ПолучитьИмяВременногоФайла(".xlsx");
	ДвоичныеДанные.Записать(НовоеИмя);
	
	ТаблицаВрем = ЗагрузитьМетодом_EXCEL1C(НовоеИмя);
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаВрем, ЭтаФорма.УникальныйИдентификатор);
	
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("№ ф103");
	СписокКолонок.Добавить("ШПИ");
	СписокКолонок.Добавить("Статус");
	СписокКолонок.Добавить("Дата изменения статуса");
	СписокКолонок.Добавить("Комментарий/Номер заказа");
	СписокКолонок.Добавить("Дата сдачи отправления");
	СписокКолонок.Добавить("Вид документа");
	СписокКолонок.Добавить("ФИО получателя");//Адресат
	СписокКолонок.Добавить("Адрес получателя");
	//СписокКолонок.Добавить("Фио", "Должник");
	//СписокКолонок.Добавить("НомерКД");
	//СписокКолонок.Добавить("Сотрудник");
	
	Если Ложь Тогда ТаблицаФайла = Новый ТаблицаЗначений; КонецЕсли;
	СтрокаЗаголовков = ТаблицаВрем.Получить(0);// первая строка заголовки
	
	Элементы.ТаблицаНастройкиКолонкаИзФайла.СписокВыбора.Очистить();
	
	Для сч = 0 По ТаблицаВрем.Колонки.Количество() -1 Цикл
		текЗаголовок = СтрокаЗаголовков.Получить(сч);
		СписокКолонокТаблицы.Добавить(текЗаголовок, сч);
		Элементы.ТаблицаНастройкиКолонкаИзФайла.СписокВыбора.Добавить(сч, текЗаголовок);
	КонецЦикла;
	
	ТаблицаНастройки.Очистить();
	
	ВсеКолонкиНастроены = Истина;
	Для Каждого НужнаяКолонка Из СписокКолонок Цикл
		НовСтрока = ТаблицаНастройки.Добавить();
		НовСтрока.НеобходимаяКолонка = НужнаяКолонка.Значение;
		
		НайденнаяКолонка = СписокКолонокТаблицы.НайтиПоЗначению(НужнаяКолонка.Значение);
		Если НайденнаяКолонка = Неопределено Тогда
			ВсеКолонкиНастроены = Ложь;
			Продолжить;
		Иначе
			НовСтрока.КолонкаИзФайла = НайденнаяКолонка.Значение;
			НовСтрока.НомерКолонки = НайденнаяКолонка.Представление
		КонецЕсли;
	КонецЦикла;
	
	
	Если ВсеКолонкиНастроены Тогда
		ПрочитатьНаСервере();
	Иначе
		Элементы.Группа1.ТекущаяСтраница = Элементы.грНастройка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаСервере()
	
	СоответствиеСтадий = Новый Соответствие;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	НазванияДокументов.НазваниеДокумента КАК НазваниеДокумента00,
	               |	НазванияДокументов.РасширениеНазвания КАК РасширениеНазвания,
	               |	НазванияДокументов.Ссылка КАК Ссылка,
	               |	НазванияДокументов.Стадия КАК Стадия,
	               |	НазванияДокументов.ТипДокумента КАК ТипДокумента,
	               |	НазванияДокументов.НазваниеДокумента + "" "" + НазванияДокументов.РасширениеНазвания КАК НазваниеДокумента
	               |ИЗ
	               |	Справочник.НазванияДокументов КАК НазванияДокументов";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтадии = Новый Структура("Стадия, НазваниеДокумента, Ссылка");
		ЗаполнитьЗначенияСвойств(СтруктураСтадии, Выборка);
		СоответствиеСтадий.Вставить(НРег(Выборка.НазваниеДокумента), СтруктураСтадии);
	КонецЦикла;
	
	СоответсвиеКолонок = Новый Соответствие;
	Для Каждого СтрокаНастроек Из ТаблицаНастройки Цикл
		Если ЗначениеЗаполнено(СтрокаНастроек.НомерКолонки) Тогда
			СоответсвиеКолонок.Вставить(СтрокаНастроек.НомерКолонки, СтрокаНастроек.НеобходимаяКолонка);
		КонецЕсли;
	КонецЦикла;
	
	ТЗ_Данные.Очистить();
	Если Ложь Тогда ТаблицаВрем = Новый ТаблицаЗначений; КонецЕсли;
	ТаблицаВрем = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТаблицаВрем = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо перечитать файл.");
	КонецЕсли;
	
	Для НомерСтроки = 2 По ТаблицаВрем.Количество() - 1 Цикл
		СтруктураЗаполнения = Новый Структура;
		// получить стрoку с указанным номером и преобразуем её в массив
		Строка = ТаблицаВрем.Получить(НомерСтроки);
		НоваяСтрочка = ТЗ_Данные.Добавить();
		
		Для Каждого ЗначениеСоответсвия Из СоответсвиеКолонок Цикл
			ИмяКолонки = ЗначениеСоответсвия.Значение;
			НомерКолонки = ЗначениеСоответсвия.Ключ;
			
			ТекущееЗначение = Строка.Получить(НомерКолонки);
			//"№ ф103" "ШПИ" "Статус" "Дата изменения статуса" "Комментарий/Номер заказа" "Фио" "Вид документа" "НомерКД" "Сотрудник"
			
			Если НРег(ИмяКолонки) = Нрег("Комментарий/Номер заказа") Тогда
				МассивДанных = СтрРазделить(ТекущееЗначение, ",", Истина);
				//(ФИОДолжника)+","+НазваниеДокумента+","+ КредитныйДоговор.НомерДоговора+","+Исполнитель+","+"%"+ GUID+"%";
				Для Сч = 0 По МассивДанных.Количество() - 1 Цикл
					ЗначениеМассива = СокрЛП(МассивДанных[Сч]);
					Если Сч = 0 Тогда // ФИОДолжника
						СтруктураЗаполнения.Вставить("ДолжникСтрокой", ЗначениеМассива);
						Должник = Справочники.Должники.НайтиПоНаименованию(ЗначениеМассива);
						СтруктураЗаполнения.Вставить("Должник", Должник);
					ИначеЕсли Сч = 1 Тогда // НазваниеДокумента
						СтруктураСтадии = СоответствиеСтадий.Получить(НРег(ЗначениеМассива));
						Если СтруктураСтадии = Неопределено Тогда
							Стадия = Перечисления.СтадияДокумента.СудебноеПроизводство;
							НазваниеДокументаСправочник = Справочники.НазванияДокументов.ПустаяСсылка();
						Иначе
							Если Ложь Тогда СтруктураСтадии = Новый Структура("Стадия, НазваниеДокумента, Ссылка"); КонецЕсли;
							Стадия = СтруктураСтадии.Стадия;
							НазваниеДокументаСправочник = СтруктураСтадии.Ссылка;
						КонецЕсли;
						СтруктураЗаполнения.Вставить("НазваниеДокументаСправочник", НазваниеДокументаСправочник);
						СтруктураЗаполнения.Вставить("НазваниеДокумента", ЗначениеМассива);
						СтруктураЗаполнения.Вставить("Стадия", Стадия);
					ИначеЕсли Сч = 2 Тогда // НомерДоговора
						СтруктураЗаполнения.Вставить("НомерДоговора", ЗначениеМассива);
						Договор = Справочники.Договоры.НайтиПоНаименованию(ЗначениеМассива);
						
						Если ЗначениеЗаполнено(Договор) = Ложь Тогда
							Договор = Справочники.Договоры.НайтиПоРеквизиту("НомерДоговора", ЗначениеМассива);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Договор) Тогда
							СтруктураЗаполнения.Вставить("Договор", Договор);
							СтруктураЗаполнения.Вставить("Должник", Договор.Владелец);
						КонецЕсли;
					ИначеЕсли Сч = 3 Тогда // Исполнитель
						Исполнитель = Справочники.Сотрудники.НайтиПоНаименованию(ЗначениеМассива);
						СтруктураЗаполнения.Вставить("ИсполнительСтрокой", ЗначениеМассива);
						Если ЗначениеЗаполнено(Исполнитель) Тогда
							СтруктураЗаполнения.Вставить("Исполнитель", Исполнитель);
						КонецЕсли;
					ИначеЕсли Сч = 4 Тогда // GUID
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НРег(ИмяКолонки) = Нрег("ФИО получателя") Тогда
				СтруктураЗаполнения.Вставить("Адресат", ТекущееЗначение);
				
			ИначеЕсли НРег(ИмяКолонки) = Нрег("ШПИ") Тогда
				СтруктураЗаполнения.Вставить("ШПИ", СтрЗаменить(ТекущееЗначение, Символы.НПП, ""));
				
			ИначеЕсли НРег(ИмяКолонки) = Нрег("Статус") Тогда
				СтруктураЗаполнения.Вставить("СтатусДоставки", ТекущееЗначение);
				
			ИначеЕсли НРег(ИмяКолонки) = Нрег("Дата сдачи отправления") Тогда
				текЧастиДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущееЗначение, ".");
				Попытка
					ТекущееЗначение = Дата(текЧастиДаты[2], текЧастиДаты[1], текЧастиДаты[0]);
				Исключение
				КонецПопытки;
				СтруктураЗаполнения.Вставить("ДатаРегистрации", ТекущееЗначение);
				
			ИначеЕсли НРег(ИмяКолонки) = Нрег("Дата изменения статуса") Тогда
				текЧастиДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущееЗначение, ".");
				Попытка
					ТекущееЗначение = Дата(текЧастиДаты[2], текЧастиДаты[1], текЧастиДаты[0]);
				Исключение
				КонецПопытки;
				СтруктураЗаполнения.Вставить("ДатаСтатуса", ТекущееЗначение);
				
			ИначеЕсли НРег(ИмяКолонки) = Нрег("№ ф103") Тогда
				СтруктураЗаполнения.Вставить("РегистрационныйНомер", ТекущееЗначение);
				
			ИначеЕсли НРег(ИмяКолонки) = Нрег("Адрес получателя") Тогда
				СтруктураЗаполнения.Вставить("АдресАдресата", ТекущееЗначение);
				
			ИначеЕсли НРег(ИмяКолонки) = Нрег("Сотрудник") Тогда
			ИначеЕсли НРег(ИмяКолонки) = Нрег("НомерКД") Тогда
			ИначеЕсли НРег(ИмяКолонки) = Нрег("Вид документа") Тогда
			КонецЕсли;
			//СтруктураЗаполнения.Вставить(ИмяКолонки, ТекущееЗначение);
		КонецЦикла;
		
		СтруктураЗаполнения.Вставить("ДатаСоздания", ТекущаяДатаСеанса());
		СтруктураЗаполнения.Вставить("Оператор", Пользователи.ТекущийПользователь());
		
		ЗаполнитьЗначенияСвойств(НоваяСтрочка, СтруктураЗаполнения);
	КонецЦикла;
	
	Элементы.грДанные.Заголовок = СтрШаблон("Данные (%1)", ТЗ_Данные.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		АдресФайлаВХранилище = Адрес;
		ПрочитатьФайлНаСервере(АдресФайлаВХранилище);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось передать файл на сервер.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	Для Каждого ЗагруженнаяСтрока Из ТЗ_Данные Цикл
		ШПИ = ЗагруженнаяСтрока.ШПИ;
		текДок = Справочники.ДокументИсходящий.НайтиПоРеквизиту("ШПИ", ШПИ);
		Если ЗначениеЗаполнено(текДок) Тогда
			ОбъектДок = текДок.ПолучитьОбъект();
		Иначе
			ОбъектДок = Справочники.ДокументИсходящий.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектДок, ЗагруженнаяСтрока);
		ОбъектДок.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	СоздатьДокументыНаСервере();
	Закрыть();
	
КонецПроцедуры

// Метод "EXCEL1C" для файлов EXCEL с расширениями: xlsx, xls, ods.
//
// Параметры:
//		ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//      ИмяЛиста - Имя листа файла (платформа 8.3.10).
//		СтрокаЗаголовка (по умолчанию = 1) - Номер строки файла типа MXL, в которой расположены заголовки колонок.
//		Не используется. 
//		В обработке 1-я строка анализируется для сопоставления колонок файла с реквизитами объектов 1С.
//		НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из файла.
//		КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из файла.
//		Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся в файле.
//		КолвоСтрокФайла - Количество строк в файле. Возвращается в вызвавшую процедуру.
//
// Возвращаемые значения:
//         ТаблицаРезультат - Результат считывания данных из файла.
//
Функция ЗагрузитьМетодом_EXCEL1C(Знач ФайлEXCEL, Знач ИмяЛиста = "", Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокФайла = 0)
	Перем ТабличныйДокумент, ОбластьФайла, КолВоКолонокФайла, ИмяКолонки, Область, ТекущаяОбласть, нСтрока, нКолонка, НоваяСтрокаТФ, ЗначениеЯчейки;
	Перем ТаблицаРезультат;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		// Выполняется долго на больших файлах.
		ТабличныйДокумент.Прочитать(ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		// СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	ОбластьФайла = ТабличныйДокумент;
	// Платформа 8.3.10 (Облать = Лист данных).
	//ОбластьФайла = ТабличныйДокумент.ПолучитьОбласть(ИмяЛиста);
	КолВоСтрокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоВертикали();
	КолВоКолонокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоГоризонтали();
	
	// Проверка заполненности листа.
	Если КолвоСтрокФайла = 0 Тогда
		// Завершение работы.
		// Закрытие Объектов.
		ТабличныйДокумент = Неопределено;
		Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
	КонецЕсли;
	
	// Создание результирующей таблицы, в которую будут записываться считанные из файла данные.
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	// Формирование колонок результирующей таблицы.
	
	// "НомерСтроки" - для наглядности и удобства.
	// В зависимости от разрабатываемой обработки.
	// "Сопоставлено" - может быть другим.
	// Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла.
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
	ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
	
	Для ит = 1 ПО КолВоКолонокФайла Цикл
		нКолонка = СтрЗаменить(ит, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// 1-я строка. Заголовки.
	НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
	НоваяСтрокаТФ.НомерСтроки = 1;
	Для ит = 1 По КолВоКолонокФайла Цикл
		нКолонка = СтрЗаменить(ит, Символы.НПП, "");
		ИмяКолонки = "N" + нКолонка;
		НоваяСтрокаТФ[ИмяКолонки] = ОбластьФайла.ПолучитьОбласть("R1" + "C" + нКолонка).ТекущаяОбласть.Текст;
		
		// Используется при формировании таблицы на форме обработки.
		ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
		ДлинаСтроки = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
		ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
	КонецЦикла;
	
	НачСтрока = ?(НачСтрока = 0, 2, НачСтрока);
	КонСтрока = ?(КонСтрока = 0, КолвоСтрокФайла, КонСтрока);
	
	Для нСтрокаТФ = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить();
		НоваяСтрокаТФ[0] = нСтрокаТФ;
		нСтрока = СтрЗаменить(нСтрокаТФ, Символы.НПП, "");
		Для нКолонкаТФ = 1 ПО КолВоКолонокФайла Цикл
			нКолонка = СтрЗаменить(нКолонкаТФ, Символы.НПП, "");
			Область = ОбластьФайла.ПолучитьОбласть("R"+нСтрока+"C"+нКолонка);
			ТекущаяОбласть = Область.ТекущаяОбласть;
			Попытка
				ЗначениеЯчейки = ТекущаяОбласть.Значение;        // Число, Дата.
			Исключение
				ЗначениеЯчейки = СокрЛП(ТекущаяОбласть.Текст);    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
				Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(ЗначениеЯчейки);
					Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда
						ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
			
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ[ИмяКолонки] = ЗначениеЯчейки;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
			ДлинаСтроки = СтрДлина(СокрЛП(НоваяСтрокаТФ[ИмяКолонки]));
			ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// ПРЕОБРАЗОВАНИЕ СТРОКИ К ТИПИЗОВАННОМУ ЗНАЧЕНИЮ 1С.
Функция ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С(Знач ИсходноеЗначение)
	
	Если НЕ ИсходноеЗначение = "" Тогда
		МассивПроверки = СтрРазделить(ИсходноеЗначение, ".");
		Если МассивПроверки.Количество() = 2 Тогда // число с разделителем точка
			Если ТолькоЦифрыИЗапятаяВСтроке(СтрЗаменить(ИсходноеЗначение, ".", ","), Истина, Ложь) Тогда
				Попытка
					Возврат Число(ИсходноеЗначение);
				Исключение
					Возврат ИсходноеЗначение
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли ТолькоЦифрыИЗапятаяВСтроке(ИсходноеЗначение, Истина, Ложь) Тогда
			Попытка
				Возврат Число(ИсходноеЗначение);
			Исключение
				Возврат ИсходноеЗначение
			КонецПопытки;
		Иначе
			Если ВРег(ИсходноеЗначение) = "ИСТИНА" ИЛИ ВРег(ИсходноеЗначение) = ("ИСТИНА"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "TRUE" ИЛИ ВРег(ИсходноеЗначение) = ("TRUE"+Символы.ПС) Тогда
				Возврат Истина;
			ИначеЕсли ВРег(ИсходноеЗначение) = "ЛОЖЬ" ИЛИ  ВРег(ИсходноеЗначение) = ("ЛОЖЬ"+Символы.ПС) ИЛИ ВРег(ИсходноеЗначение) = "FALSE" ИЛИ ВРег(ИсходноеЗначение) = ("FALSE"+Символы.ПС) Тогда
				Возврат Ложь;
			Иначе
				Возврат ИсходноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсходноеЗначение
	
КонецФункции

// Проверяет, содержит ли строка только цифры и запятую.
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки
//  УчитыватьЛидирующиеНули - Булево - Флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются
//  УчитыватьПробелы        - Булево - Флаг учета пробелов, если Истина, то пробелы при проверке игнорируются
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция ТолькоЦифрыИЗапятаяВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если Сред(СтрокаПроверки, 1, 1) = "-" Тогда
		СтрокаПроверки = Сред(СтрокаПроверки, 2, СтрДлина(СтрокаПроверки));
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", ""), ",", "")
	) = 0;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаНастройкиКолонкаИзФайлаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого КолонкаФайла Из СписокКолонокТаблицы Цикл
		Если КолонкаФайла.Представление = Строка(ВыбранноеЗначение) Тогда
			Элементы.ТаблицаНастройки.ТекущиеДанные.КолонкаИзФайла = КолонкаФайла.Значение;
			Элементы.ТаблицаНастройки.ТекущиеДанные.НомерКолонки = КолонкаФайла.Представление;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСодержимое(Команда)
	
	ПрочитатьНаСервере();
	Элементы.Группа1.ТекущаяСтраница = Элементы.грДанные;
	
КонецПроцедуры

