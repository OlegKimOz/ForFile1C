
&НаСервере
Функция АдресРегистрацииДолж(долж) Экспорт

	  //Регистрации     ФМЖ
	  
	  типРегистрация=Справочники.ТипыАдресов.НайтиПоНаименованию("Регистрации");
	  типФМЖ=Справочники.ТипыАдресов.НайтиПоНаименованию("ФМЖ");
	  
	  адрРег="";
					  
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Адреса.Адрес КАК Наименование
						|ИЗ
						|	Справочник.Адреса КАК Адреса
						|ГДЕ
						|	Адреса.Владелец = &Владелец
						|	И Адреса.Тип = &Тип";
					
					Запрос.УстановитьПараметр("Владелец", долж);
					Запрос.УстановитьПараметр("Тип", типРегистрация);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						адрРег=ВыборкаДетальныеЗаписи.Наименование;
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


		Возврат адрРег;			
	

КонецФункции // ()


&НаСервере
Функция АдресФМЖДолж(долж) Экспорт

	  //Регистрации     ФМЖ
	  
	  типРегистрация=Справочники.ТипыАдресов.НайтиПоНаименованию("Регистрации");
	  типФМЖ=Справочники.ТипыАдресов.НайтиПоНаименованию("ФМЖ");
	  
	  адрФМЖ="";
					  
					//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Адреса.Адрес КАК Наименование
						|ИЗ
						|	Справочник.Адреса КАК Адреса
						|ГДЕ
						|	Адреса.Владелец = &Владелец
						|	И Адреса.Тип = &Тип";
					
					Запрос.УстановитьПараметр("Владелец", долж);
					Запрос.УстановитьПараметр("Тип", типФМЖ);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						адрФМЖ=ВыборкаДетальныеЗаписи.Наименование;
						
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


		Возврат адрФМЖ;			
	

КонецФункции // ()


&НаСервере
Функция ТелефоныДолж(долж) Экспорт

	тел="";
	
	      	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Телефоны.Номер КАК Номер
		|ИЗ
		|	Справочник.Телефоны КАК Телефоны
		|ГДЕ
		|	Телефоны.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		тел=тел+ВыборкаДетальныеЗаписи.Номер+" ,";
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	  телДлина=СтрДлина(тел);
	  
	  тел=Лев(тел,телДлина-2);  
	  
	
	Возврат тел; 
	
	
КонецФункции // ()

&НаСервере
Функция МестоРожденияДолж(долж) Экспорт
	  
	  типРекв=Справочники.ДополнительныеРеквизиты.НайтиПоНаименованию("Место рождения");
	  
	  местоРожд="";
	   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеДанные.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДополнительныеДанные КАК ДополнительныеДанные
		|ГДЕ
		|	ДополнительныеДанные.Владелец = &Владелец
		|	И ДополнительныеДанные.Реквизит = &Реквизит";
	
	Запрос.УстановитьПараметр("Владелец", долж);
	Запрос.УстановитьПараметр("Реквизит", типРекв);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		местоРожд=ВыборкаДетальныеЗаписи.Наименование;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	  
	  
	 Возврат  местоРожд;
	
	
КонецФункции // ()


&НаСервере
Функция ДнейПросрочкиНачало(договорДл,датаЗагрузки) Экспорт

	днейПр=Неопределено;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДоговоровСрезПервых.ДнейПросрочки КАК ДнейПросрочки
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПервых(&МоментВремени, ) КАК ДанныеДоговоровСрезПервых
		|ГДЕ
		|	ДанныеДоговоровСрезПервых.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", договорДл);
	Запрос.УстановитьПараметр("МоментВремени", датаЗагрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		днейПр=ВыборкаДетальныеЗаписи.ДнейПросрочки;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА



	Возврат днейПр;
	
	
	
КонецФункции // ()	


&НаСервере
Функция СуммаДолгаНаДатуЗагр(договорДл,датаЗагрузки) Экспорт

	 всегоЗадолж=0;
	
	      	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДоговоровСрезПервых.ВсегоЗадолженность КАК ВсегоЗадолженность,
		|	ДанныеДоговоровСрезПервых.Период КАК Период
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПервых(&МоментВремени, ) КАК ДанныеДоговоровСрезПервых
		|ГДЕ
		|	ДанныеДоговоровСрезПервых.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", договорДл);
	Запрос.УстановитьПараметр("МоментВремени", датаЗагрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		всегоЗадолж=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	 Если всегоЗадолж=0 Тогда
		 
	            //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДанныеДоговоровСрезПоследних.ВсегоЗадолженность КАК ВсегоЗадолженность
					|ИЗ
					|	РегистрСведений.ДанныеДоговоров.СрезПоследних(, Договор = &Договор) КАК ДанныеДоговоровСрезПоследних";
				
				Запрос.УстановитьПараметр("Договор", договорДл);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					 всегоЗадолж=ВыборкаДетальныеЗаписи.ВсегоЗадолженность;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	 	
	 
	 КонецЕсли;
		
	 Возврат всегоЗадолж;
	
КонецФункции // ()		





&НаСервере
Функция СуммаСобираемаяМесяц(ссылкаПортфель,датаНач,датаКон) Экспорт

	  // найти реестры в портфеле
	  
	     массивСсылокРеестр=Новый Массив;
		 платежиЗаМесяцСумма=0;
		 долгНаНачалоПериода=0;
		 
		 собирЗаМесяцСумма=0;
		 
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПортфелиСодержаниеРеестрыПортфеля.Реестр КАК Реестр
					|ИЗ
					|	Справочник.ПортфелиСодержание.РеестрыПортфеля КАК ПортфелиСодержаниеРеестрыПортфеля
					|ГДЕ
					|	ПортфелиСодержаниеРеестрыПортфеля.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ссылкаПортфель);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					массивСсылокРеестр.Добавить(ВыборкаДетальныеЗаписи.Реестр);
					
				КонецЦикла;
				
			 
				Для каждого стр Из  массивСсылокРеестр Цикл
					
					
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	РеестрДолжники.Должник КАК Должник,
							|	РеестрДолжники.Договор КАК Договор,
							|	РеестрДолжники.ВсегоЗадолженность КАК ВсегоЗадолженность
							|ИЗ
							|	Документ.Реестр.Должники КАК РеестрДолжники
							|ГДЕ
							|	РеестрДолжники.Ссылка = &Ссылка";
						
						Запрос.УстановитьПараметр("Ссылка", стр);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						Выборка= РезультатЗапроса.Выбрать();
						
						Пока Выборка.Следующий() Цикл
							
							
							платежиЗаМесяцСумма=платежиЗаМесяцСумма+ ЗапросыВФССП.СуммаПлатежейЗаМесяц(Выборка.Должник,датаНач,датаКон,Выборка.Договор);
							долгНаНачалоПериода=долгНаНачалоПериода+ СуммаДолгаНаДатуЗагр(Выборка.Договор, датаНач);
							
						КонецЦикла;
						
				
				КонецЦикла;
				
				
				Если долгНаНачалоПериода<>0 Тогда
				
					   	собирЗаМесяцСумма=платежиЗаМесяцСумма/долгНаНачалоПериода*100;
				
				КонецЕсли;
				
				
		Возврат собирЗаМесяцСумма;		

КонецФункции // ()

&НаСервере
Функция СуммаСобираемаяМесяцСправочник(ссылкаПортфель,годЗ,месяцЗ) Экспорт
	
	        собМесяц=0;
	  
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СобираемостьГод.Ссылка КАК Ссылка,
						|	СобираемостьГод.Наименование КАК Наименование,
						|	СобираемостьГод.Портфель КАК Портфель,
						|	СобираемостьГод.СобирМесЯнварь КАК СобирМесЯнварь,
						|	СобираемостьГод.СобирОбщаяЯнварь КАК СобирОбщаяЯнварь,
						|	СобираемостьГод.СобирМесФевраль КАК СобирМесФевраль,
						|	СобираемостьГод.СобирОбщаяФевраль КАК СобирОбщаяФевраль,
						|	СобираемостьГод.СобирМесМарт КАК СобирМесМарт,
						|	СобираемостьГод.СобирОбщаяМарт КАК СобирОбщаяМарт,
						|	СобираемостьГод.СобирМесАпрель КАК СобирМесАпрель,
						|	СобираемостьГод.СобирОбщаяАпрель КАК СобирОбщаяАпрель,
						|	СобираемостьГод.СобирМесМай КАК СобирМесМай,
						|	СобираемостьГод.СобирОбщаяМай КАК СобирОбщаяМай,
						|	СобираемостьГод.СобирМесИюнь КАК СобирМесИюнь,
						|	СобираемостьГод.СобирОбщаяИюнь КАК СобирОбщаяИюнь,
						|	СобираемостьГод.СобирМесИюль КАК СобирМесИюль,
						|	СобираемостьГод.СобирОбщаяИюль КАК СобирОбщаяИюль,
						|	СобираемостьГод.СобирМесАвгуст КАК СобирМесАвгуст,
						|	СобираемостьГод.СобирОбщаяАвгуст КАК СобирОбщаяАвгуст,
						|	СобираемостьГод.СобирМесСентябрь КАК СобирМесСентябрь,
						|	СобираемостьГод.СобирОбщаяСентябрь КАК СобирОбщаяСентябрь,
						|	СобираемостьГод.СобирМесОктябрь КАК СобирМесОктябрь,
						|	СобираемостьГод.СобирОбщаяОктябрь КАК СобирОбщаяОктябрь,
						|	СобираемостьГод.СобирМесНоябрь КАК СобирМесНоябрь,
						|	СобираемостьГод.СобирОбщаяНоябрь КАК СобирОбщаяНоябрь,
						|	СобираемостьГод.СобирМесДекабрь КАК СобирМесДекабрь,
						|	СобираемостьГод.СобирОбщаяДекабрь КАК СобирОбщаяДекабрь,
						|	СобираемостьГод.Год КАК Год
						|ИЗ
						|	Справочник.СобираемостьГод КАК СобираемостьГод
						|ГДЕ
						|	СобираемостьГод.Год = &Год
						|	И СобираемостьГод.Портфель = &Портфель";
					
					Запрос.УстановитьПараметр("Год", годЗ);
					Запрос.УстановитьПараметр("Портфель", ссылкаПортфель);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					поле="СобирМес"+месяцЗ;
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						собМесяц=ВыборкаДетальныеЗаписи[поле];   
						
						
						
					КонецЦикла;
					
					
		Возврат собМесяц;			
					
	
КонецФункции // ()
	

&НаСервере
Функция СуммаСобираемаяОбщаяСправочник(ссылкаПортфель,годЗ,месяцЗ) Экспорт
	
	        собМесяц=0;
	  
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	СобираемостьГод.Ссылка КАК Ссылка,
						|	СобираемостьГод.Наименование КАК Наименование,
						|	СобираемостьГод.Портфель КАК Портфель,
						|	СобираемостьГод.СобирМесЯнварь КАК СобирМесЯнварь,
						|	СобираемостьГод.СобирОбщаяЯнварь КАК СобирОбщаяЯнварь,
						|	СобираемостьГод.СобирМесФевраль КАК СобирМесФевраль,
						|	СобираемостьГод.СобирОбщаяФевраль КАК СобирОбщаяФевраль,
						|	СобираемостьГод.СобирМесМарт КАК СобирМесМарт,
						|	СобираемостьГод.СобирОбщаяМарт КАК СобирОбщаяМарт,
						|	СобираемостьГод.СобирМесАпрель КАК СобирМесАпрель,
						|	СобираемостьГод.СобирОбщаяАпрель КАК СобирОбщаяАпрель,
						|	СобираемостьГод.СобирМесМай КАК СобирМесМай,
						|	СобираемостьГод.СобирОбщаяМай КАК СобирОбщаяМай,
						|	СобираемостьГод.СобирМесИюнь КАК СобирМесИюнь,
						|	СобираемостьГод.СобирОбщаяИюнь КАК СобирОбщаяИюнь,
						|	СобираемостьГод.СобирМесИюль КАК СобирМесИюль,
						|	СобираемостьГод.СобирОбщаяИюль КАК СобирОбщаяИюль,
						|	СобираемостьГод.СобирМесАвгуст КАК СобирМесАвгуст,
						|	СобираемостьГод.СобирОбщаяАвгуст КАК СобирОбщаяАвгуст,
						|	СобираемостьГод.СобирМесСентябрь КАК СобирМесСентябрь,
						|	СобираемостьГод.СобирОбщаяСентябрь КАК СобирОбщаяСентябрь,
						|	СобираемостьГод.СобирМесОктябрь КАК СобирМесОктябрь,
						|	СобираемостьГод.СобирОбщаяОктябрь КАК СобирОбщаяОктябрь,
						|	СобираемостьГод.СобирМесНоябрь КАК СобирМесНоябрь,
						|	СобираемостьГод.СобирОбщаяНоябрь КАК СобирОбщаяНоябрь,
						|	СобираемостьГод.СобирМесДекабрь КАК СобирМесДекабрь,
						|	СобираемостьГод.СобирОбщаяДекабрь КАК СобирОбщаяДекабрь,
						|	СобираемостьГод.Год КАК Год
						|ИЗ
						|	Справочник.СобираемостьГод КАК СобираемостьГод
						|ГДЕ
						|	СобираемостьГод.Год = &Год
						|	И СобираемостьГод.Портфель = &Портфель";
					
					Запрос.УстановитьПараметр("Год", годЗ);
					Запрос.УстановитьПараметр("Портфель", ссылкаПортфель);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					поле="СобирОбщая"+месяцЗ;
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						собМесяц=ВыборкаДетальныеЗаписи[поле];   
						
						
						
					КонецЦикла;
					
					
		Возврат собМесяц;			
					
	
КонецФункции // ()
	
	



&НаСервере
Функция СуммаСобираемаяОбщаяНарИтогом(ссылкаПортфель,датаНач,датаКон) Экспорт

    	 массивСсылокРеестр=Новый Массив;
		 платежиЗаПериодСумма=0;
		 
		 долгНаДатуЗагрузки=0;
		 
		 собирОбщаяСумма=0;

		 
		        Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПортфелиСодержаниеРеестрыПортфеля.Реестр КАК Реестр
					|ИЗ
					|	Справочник.ПортфелиСодержание.РеестрыПортфеля КАК ПортфелиСодержаниеРеестрыПортфеля
					|ГДЕ
					|	ПортфелиСодержаниеРеестрыПортфеля.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", ссылкаПортфель);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					массивСсылокРеестр.Добавить(ВыборкаДетальныеЗаписи.Реестр);
					
				КонецЦикла;
				

		         
				Для каждого стр Из  массивСсылокРеестр Цикл
					
					
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	РеестрДолжники.Должник КАК Должник,
							|	РеестрДолжники.Договор КАК Договор,
							|	РеестрДолжники.Ссылка.ДатаПередачи КАК ДатаПередачи,
							|	РеестрДолжники.ВсегоЗадолженность КАК ВсегоЗадолженность
							|ИЗ
							|	Документ.Реестр.Должники КАК РеестрДолжники
							|ГДЕ
							|	РеестрДолжники.Ссылка = &Ссылка";
						
						Запрос.УстановитьПараметр("Ссылка", стр);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						Выборка= РезультатЗапроса.Выбрать();
						
						Пока Выборка.Следующий() Цикл
							
							
							платежиЗаПериодСумма=платежиЗаПериодСумма+ЗапросыВФССП.СуммаПлатежейЗаМесяц(Выборка.Должник,Выборка.ДатаПередачи,датаКон,Выборка.Договор); ;
							
							долгНаДатуЗагрузки=долгНаДатуЗагрузки+ Выборка.ВсегоЗадолженность;
							
						КонецЦикла;
						
				
					КонецЦикла;
					
					
	            Если долгНаДатуЗагрузки<>0 Тогда
				
					собирОбщаяСумма=платежиЗаПериодСумма/долгНаДатуЗагрузки*100;
				
				КонецЕсли;
					
					
					
	 Возврат собирОбщаяСумма;				
				

 КонецФункции // ()
 
 
 
&НаСервере
Функция ФИОСПИ(стр) Экспорт
	
	   фио="";
	   поз=0; 
	
	   Для Индекс = 0 По СтрДлина(стр)-1 Цикл
		   
		     сим=Сред(стр, Индекс, 1);
			
			 Если  (КодСимвола(сим)>=48 И КодСимвола(сим)<=57) ИЛИ сим="+"  Тогда
				 
			   поз=Индекс;	 
			   Прервать;
			   
			 
			 КонецЕсли;
			 
        КонецЦикла;
		
		
	  фио=Лев(стр,поз-1);	
	  
	  
	  
	 Возврат фио;

КонецФункции // ()


&НаСервере
Функция ДоговорыДолж(долж) Экспорт
	
	
	  догСтр="";
	
	
	    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Договоры.НомерДоговора КАК НомерДоговора
					|ИЗ
					|	Справочник.Договоры КАК Договоры
					|ГДЕ
					|	Договоры.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец", долж);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					догСтр=догСтр+ВыборкаДетальныеЗаписи.НомерДоговора+";";
					
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		 		
		догСтр=Лев(догСтр,СтрДлина(догСтр)-1);		
				
				
	Возврат догСтр;			
				
КонецФункции // ()


&НаСервере
Функция ПрикрепленныеФайлыДолжник(долж,датаНачала, датаКонец)  Экспорт
	
	   файлыСтр="";
	                 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	СведенияОФайлах.Наименование КАК Наименование,
								|	СведенияОФайлах.ВладелецФайла КАК ВладелецФайла,
								|	СведенияОФайлах.ДатаСоздания КАК ДатаСоздания
								|ИЗ
								|	РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
								|ГДЕ
								|	СведенияОФайлах.ВладелецФайла = &ВладелецФайла
								|	И СведенияОФайлах.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаКонец";
							
							Запрос.УстановитьПараметр("ВладелецФайла", долж);
							Запрос.УстановитьПараметр("ДатаКонец", датаКонец);
							Запрос.УстановитьПараметр("ДатаНачала", датаНачала);
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
								
								 файлыСтр=файлыСтр+ВыборкаДетальныеЗаписи.Наименование+";";
							КонецЦикла;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

							файлыСтр=Лев(файлыСтр,СтрДлина(файлыСтр)-1);
							
	    Возврат файлыСтр;
	
	

КонецФункции // ()




&НаСервере
Функция СПИТелефон1(стр) Экспорт
   
	   тел1="";
	   поз=0; 
	
	   Для Индекс = 0 По СтрДлина(стр)-1 Цикл
		   
		     сим=Сред(стр, Индекс, 1);
			
			 Если  (КодСимвола(сим)>=48 И КодСимвола(сим)<=57) ИЛИ сим="+"  Тогда
				 
			   поз=Индекс;	 
			   Прервать;
			   
			 
			 КонецЕсли;
			 
        КонецЦикла;

		
	  стрТемп= Прав(стр,СтрДлина(стр)-поз);
	 
	  //стрТемп=СтрЗаменить(стрТемп,"<br>"," ");
	  
	  
	  
	  стрТемп=СтрЗаменить(стрТемп,"(","");
	  стрТемп=СтрЗаменить(стрТемп,")","");
      стрТемп=СтрЗаменить(стрТемп,"-","");
	  
	  
	  Индекс = Найти(стрТемп, "<br>");
	  
	  
	  стр=Лев(стрТемп,Индекс-1);
	   
	  
	   стр=СтрЗаменить(стр,"+","");
	  
      Возврат стр;	
		
	
	
КонецФункции // ()
 
 

&НаСервере
Функция СПИТелефон2(стр) Экспорт
   
	   тел2="";
	   поз=0; 
	
	   Для Индекс = 0 По СтрДлина(стр)-1 Цикл
		   
		     сим=Сред(стр, Индекс, 1);
			
			 Если  (КодСимвола(сим)>=48 И КодСимвола(сим)<=57) ИЛИ сим="+"  Тогда
				 
			   поз=Индекс;	 
			   Прервать;
			   
			 
			 КонецЕсли;
			 
        КонецЦикла;

		
	  стрТемп= Прав(стр,СтрДлина(стр)-поз);
	 
	  //стрТемп=СтрЗаменить(стрТемп,"<br>"," ");
	  
	  стрТемп=СтрЗаменить(стрТемп,"(","");
	  стрТемп=СтрЗаменить(стрТемп,")","");
      стрТемп=СтрЗаменить(стрТемп,"-","");
	  
	  
	  Индекс = Найти(стрТемп, "<br>");
	  
	  трм=СтрЧислоВхождений(стрТемп,"<br>");
	  
	  Если трм>1 Тогда
	  
		    стрТемп=Прав(стрТемп,СтрДлина(стрТемп)-Индекс-3);
			
			
			Индекс = Найти(стрТемп, "<br>");
			
			тел2=Лев(стрТемп,Индекс-1);
			
			
			
	  КонецЕсли;
	  
	   тел2=СтрЗаменить(тел2,"+","");
	  
      Возврат тел2;	
		
	
	
КонецФункции // ()
 
 

&НаСервере
Функция СПИТелефон3(стр) Экспорт
   
	   тел2="";
	   поз=0; 
	
	   Для Индекс = 0 По СтрДлина(стр)-1 Цикл
		   
		     сим=Сред(стр, Индекс, 1);
			
			 Если  (КодСимвола(сим)>=48 И КодСимвола(сим)<=57) ИЛИ сим="+"  Тогда
				 
			   поз=Индекс;	 
			   Прервать;
			   
			 
			 КонецЕсли;
			 
        КонецЦикла;

		
	  стрТемп= Прав(стр,СтрДлина(стр)-поз);
	 
	  //стрТемп=СтрЗаменить(стрТемп,"<br>"," ");
	  
	  стрТемп=СтрЗаменить(стрТемп,"(","");
	  стрТемп=СтрЗаменить(стрТемп,")","");
      стрТемп=СтрЗаменить(стрТемп,"-","");
	  
	  
	  Индекс = Найти(стрТемп, "<br>");
	  
	  трм=СтрЧислоВхождений(стрТемп,"<br>");
	  
	  Если трм>=2 Тогда
	  
		    стрТемп=Прав(стрТемп,СтрДлина(стрТемп)-Индекс-3);
			
			
			Индекс = Найти(стрТемп, "<br>");
			
			
			
			тел2=Прав(стрТемп,СтрДлина(стрТемп)-Индекс-3);
			//
			//Индекс = Найти(тел2, " ");
			//
			//тел2=Лев(стрТемп,Индекс-1);
			
			
	  КонецЕсли;
	  
	  тел2=СтрЗаменить(тел2,"+","");
	  
      Возврат тел2;	
		
	
	
КонецФункции // ()


&НаСервере
Процедура ПересчетСобираемости2019() Экспорт
	
	              ВыборГода="2019";
             	   ссылкиМассив=Новый Массив;

	
	                      //  Очищу СобираемостьГод по этому году
	    			
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	СобираемостьГод.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.СобираемостьГод КАК СобираемостьГод
							|ГДЕ
							|	СобираемостьГод.Год = &Год";
						
						Запрос.УстановитьПараметр("Год", "2019");
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							
						обУд=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
						
						обУд.Удалить();
							
						КонецЦикла;
						
									
					//  Создам   СобираемостьГод по этому году   Запишу все портфели 
						
								
								Запрос = Новый Запрос;
								Запрос.Текст = 
									"ВЫБРАТЬ
									|	ПортфелиСодержание.Ссылка КАК Ссылка
									|ИЗ
									|	Справочник.ПортфелиСодержание КАК ПортфелиСодержание";
								
								РезультатЗапроса = Запрос.Выполнить();
								
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									// Вставить обработку выборки ВыборкаДетальныеЗаписи
									
									ЗаписьСп=Справочники.СобираемостьГод.СоздатьЭлемент();
									
									ЗаписьСп.Год=ВыборГода;
									ЗаписьСп.Наименование=ВыборГода;
									
									ЗаписьСп.Портфель=ВыборкаДетальныеЗаписи.Ссылка;
									
									
									ЗаписьСп.Записать();
									
									ссылкиМассив.Добавить(ЗаписьСп);
									
								КонецЦикла;
						
								
								
					     	
							
							
		
								
						// Посчитаю Собираемость по этому году по месяцам
						
						 Для каждого стр Из ссылкиМассив Цикл
							 
							 
							 
						    январьНачало=стр.Год+"0101"; 
							январьНачалоД=Дата(январьНачало);
							
							январьКонец=стр.Год+"0131"; 
							январьКонецД=Дата(январьКонец);
							
							
							февральНачало=стр.Год+"0101"; 
							февральНачалоД=Дата(февральНачало);
							
							
							ЧислоДнейФевраль=День(КонецМесяца(Дата(стр.Год,2,1,1,1,1)));
							
							февральКонец=стр.Год+"02"+Строка(ЧислоДнейФевраль); 
							февральКонецД=Дата(февральКонец);
							
							
							мартНачало=стр.Год+"0301"; 
							мартНачалоД=Дата(мартНачало);
							
							мартКонец=стр.Год+"0331"; 
							мартКонецД=Дата(мартКонец);
							

							апрельНачало=стр.Год+"0401"; 
							апрельНачалоД=Дата(апрельНачало);
							
							апрельКонец=стр.Год+"0430"; 
							апрельКонецД=Дата(апрельКонец);
							
							
							майНачало=стр.Год+"0501"; 
							майНачалоД=Дата(майНачало);
							
							майКонец=стр.Год+"0531"; 
							майКонецД=Дата(майКонец);
							
							
							июньНачало=стр.Год+"0601"; 
							июньНачалоД=Дата(июньНачало);
							
							июньКонец=стр.Год+"0630"; 
							июньКонецД=Дата(июньКонец);
							
							
							июльНачало=стр.Год+"0701"; 
							июльНачалоД=Дата(июльНачало);
							
							июльКонец=стр.Год+"0731"; 
							июльКонецД=Дата(июльКонец);
							
							
							августНачало=стр.Год+"0801"; 
							августНачалоД=Дата(августНачало);
							
							августКонец=стр.Год+"0831"; 
							августКонецД=Дата(августКонец);
							
							
							
							сентябрьНачало=стр.Год+"0901"; 
							сентябрьНачалоД=Дата(сентябрьНачало);
							
							сентябрьКонец=стр.Год+"0930"; 
							сентябрьКонецД=Дата(сентябрьКонец);
							
							
							октябрьНачало=стр.Год+"1001"; 
							октябрьНачалоД=Дата(октябрьНачало);
							
							октябрьКонец=стр.Год+"1031"; 
							октябрьКонецД=Дата(октябрьКонец);
							
							
							ноябрьНачало=стр.Год+"1101"; 
							ноябрьНачалоД=Дата(ноябрьНачало);
							
							ноябрьКонец=стр.Год+"1130"; 
							ноябрьКонецД=Дата(ноябрьКонец);
							
							
							декабрьНачало=стр.Год+"1201"; 
							декабрьНачалоД=Дата(декабрьНачало);
							
							декабрьКонец=стр.Год+"1231"; 
							декабрьКонецД=Дата(декабрьКонец);
							
							
							
							
							
							
							стр.СобирМесЯнварь=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,январьНачалоД,январьКонецД);
							стр.СобирМесФевраль=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,февральНачалоД,февральКонецД);
							стр.СобирМесМарт=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,мартНачалоД,мартКонецД);
							стр.СобирМесАпрель=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,апрельНачалоД,апрельКонецД);
							стр.СобирМесМай=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,майНачалоД,майКонецД);
							стр.СобирМесИюнь=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,июньНачалоД,июньКонецД);
							стр.СобирМесИюль=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,июльНачалоД,июльКонецД);
							стр.СобирМесАвгуст=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,августНачалоД,августКонецД);
							стр.СобирМесСентябрь=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,сентябрьНачалоД,сентябрьКонецД);
							
							стр.СобирМесОктябрь=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,октябрьНачалоД,октябрьКонецД);
							
							стр.СобирМесНоябрь=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,ноябрьНачалоД,ноябрьКонецД);
							
							стр.СобирМесДекабрь=ФункцииДляОтчетов.СуммаСобираемаяМесяц(стр.Портфель,декабрьНачалоД,декабрьКонецД);
							
							
							
							
							стр.СобирОбщаяЯнварь=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,январьНачалоД,январьКонецД);
							стр.СобирОбщаяФевраль=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,февральНачалоД,февральКонецД);
							стр.СобирОбщаяМарт=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,мартНачалоД,мартКонецД);
							стр.СобирОбщаяАпрель=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,апрельНачалоД,апрельКонецД);
							
							стр.СобирОбщаяМай=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,майНачалоД,майКонецД);
							стр.СобирОбщаяИюнь=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,июньНачалоД,июньКонецД);
							стр.СобирОбщаяИюль=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,июльНачалоД,июльКонецД);
							стр.СобирОбщаяАвгуст=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,августНачалоД,августКонецД);
							стр.СобирОбщаяСентябрь=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,сентябрьНачалоД,сентябрьКонецД);
							
							стр.СобирОбщаяОктябрь=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,октябрьНачалоД,октябрьКонецД);
							
							стр.СобирОбщаяНоябрь=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,ноябрьНачалоД,ноябрьКонецД);
							
							стр.СобирОбщаяДекабрь=ФункцииДляОтчетов.СуммаСобираемаяОбщаяНарИтогом(стр.Портфель,декабрьНачалоД,декабрьКонецД);
							
							
							
							
							
							
							
							
							 
							//портТ=стр.Портфель;		   
							   
							   
							   
							   
							   
							   
						    стр.Записать();
							   
						 	
						 
						 КонецЦикла;
								
								
			
			  	
			  
 
	
	
	

КонецПроцедуры



&НаСервере
Функция ДнейПросрочкиНаДатуЗагрузки(датазаг,дог) Экспорт
	
		
	  днейПросрочки=0;
	           	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДоговоровСрезПервых.ДнейПросрочки КАК ДнейПросрочки
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПервых(, Договор = &Договор) КАК ДанныеДоговоровСрезПервых";
	
	Запрос.УстановитьПараметр("Договор", дог);
	//Запрос.УстановитьПараметр("МоментВремени", датазаг);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		днейПросрочки=ВыборкаДетальныеЗаписи.ДнейПросрочки;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	Возврат  днейПросрочки;
	

КонецФункции // ()

&НаСервере
Функция СуммаПереданноеЗадолженности (дог) Экспорт

	       передЗад=0;
	
	        	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ДанныеДоговоровСрезПервых.ПросроченныеПроценты КАК ПросроченныеПроценты,
					|	ДанныеДоговоровСрезПервых.ПросроченныйОсновнойДолг КАК ПросроченныйОсновнойДолг
					|ИЗ
					|	РегистрСведений.ДанныеДоговоров.СрезПервых(, Договор = &Договор) КАК ДанныеДоговоровСрезПервых";
				
				Запрос.УстановитьПараметр("Договор", дог);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					передЗад=ВыборкаДетальныеЗаписи.ПросроченныеПроценты+ ВыборкаДетальныеЗаписи.ПросроченныйОсновнойДолг;
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
	Возврат передЗад;	   		 
	

КонецФункции // ()

&НаСервере
Функция ДатаПоследнегоПлатежа(долж, догов) Экспорт

	     датаЛаст=Неопределено;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ПлатежиДолжники.Должник КАК Должник,
					|	ПлатежиДолжники.Договор КАК Договор,
					|	ПлатежиДолжники.ДатаПлатежа КАК ДатаПлатежа,
					|	ПлатежиДолжники.Сумма КАК Сумма
					|ИЗ
					|	Документ.Платежи.Должники КАК ПлатежиДолжники
					|ГДЕ
					|	ПлатежиДолжники.Должник = &Должник
					|	И ПлатежиДолжники.Договор = &Договор
					|
					|УПОРЯДОЧИТЬ ПО
					|	ДатаПлатежа УБЫВ";
				
				Запрос.УстановитьПараметр("Договор", догов);
				Запрос.УстановитьПараметр("Должник", долж);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					 датаЛаст=ВыборкаДетальныеЗаписи.ДатаПлатежа;
					
				КонецЦикла;
			

					
	Возврат датаЛаст;				
	

КонецФункции // ()

&НаСервере
Функция СуммаПоследнегоПлатежа(долж, догов) Экспорт

	     суммаЛаст=Неопределено;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ПлатежиДолжники.Должник КАК Должник,
					|	ПлатежиДолжники.Договор КАК Договор,
					|	ПлатежиДолжники.ДатаПлатежа КАК ДатаПлатежа,
					|	ПлатежиДолжники.Сумма КАК Сумма
					|ИЗ
					|	Документ.Платежи.Должники КАК ПлатежиДолжники
					|ГДЕ
					|	ПлатежиДолжники.Должник = &Должник
					|	И ПлатежиДолжники.Договор = &Договор
					|
					|УПОРЯДОЧИТЬ ПО
					|	ДатаПлатежа УБЫВ";
				
				Запрос.УстановитьПараметр("Договор", догов);
				Запрос.УстановитьПараметр("Должник", долж);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					 суммаЛаст=ВыборкаДетальныеЗаписи.Сумма;
					
				КонецЦикла;
			

					
	Возврат суммаЛаст;				
	

КонецФункции // ()



&НаСервере
Функция ПолучитьБанкДолжника(долж) Экспорт

	  спрБанк=Неопределено;
	 
	       	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Договоры.Банк КАК Банк,
					|	Договоры.НомерДоговора КАК НомерДоговора
					|ИЗ
					|	Справочник.Договоры КАК Договоры
					|ГДЕ
					|	Договоры.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец", долж);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Количество()=1 Тогда
					
					 ВыборкаДетальныеЗаписи.Следующий();
					 спрБанк=ВыборкаДетальныеЗаписи.Банк;
					 
				
				КонецЕсли;
				
				//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
				//КонецЦикла;
				//
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	     Возврат спрБанк;

КонецФункции // ()



&НаСервере
Процедура ВыполнитьЗадачуБП() Экспорт
	
	
	  
						
						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						// Данный фрагмент построен конструктором.
						// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	ЗадачаПривязкаДолжника.Ссылка КАК Ссылка,
							|	ЗадачаПривязкаДолжника.БизнесПроцесс КАК БизнесПроцесс
							|ИЗ
							|	Задача.ЗадачаПривязкаДолжника КАК ЗадачаПривязкаДолжника
							|ГДЕ
							|	ЗадачаПривязкаДолжника.Выполнена = &Выполнена";
						
						Запрос.УстановитьПараметр("Выполнена", Ложь);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							Если ТипЗнч(ВыборкаДетальныеЗаписи.БизнесПроцесс)=Тип("БизнесПроцессСсылка.БизнесПроцесс_РезультатЗвонка")  Тогда
								
								    БП=ВыборкаДетальныеЗаписи.БизнесПроцесс.ПолучитьОбъект();
									
									
									Если БП.РезультатКонтактаБП=Справочники.РезультатыКонтактов.НайтиПоНаименованию("Обещание оплатить",Истина) Тогда
										
											   Если БП.ДатаОжиданияОплатил-ТекущаяДата()>7  Тогда
											
												    задачаТ=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
											
											        задачаТ.ВыполнитьЗадачу(); 
											
											   КонецЕсли;

										
									
									КонецЕсли;
							
							КонецЕсли;
							
						КонецЦикла;
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	

КонецПроцедуры



&НаСервере
Процедура ВыполнитьЗадачуПроверкаКонтрольнойДаты() Экспорт

	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаПривязкаДолжника.Ссылка КАК Ссылка,
			|	ЗадачаПривязкаДолжника.БизнесПроцесс КАК БизнесПроцесс
			|ИЗ
			|	Задача.ЗадачаПривязкаДолжника КАК ЗадачаПривязкаДолжника
			|ГДЕ
			|	ЗадачаПривязкаДолжника.Выполнена = &Выполнена
			|	И ЗадачаПривязкаДолжника.ТочкаМаршрута = &ТочкаМаршрута";
		
		
		Запрос.УстановитьПараметр("Выполнена", Ложь);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.БизнесПроцесс_Делопроизводство.ТочкиМаршрута.ПроверкаКонтрольнойДаты);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			    задачаТ=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		        задачаТ.ВыполнитьЗадачу(); 
			
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА



	

КонецПроцедуры


&НаСервере
Функция СудебныйСтатусВр(долж,дог,датаотч) Экспорт

	
	         строкаИз="";
		   
              		
			
	  Попытка
	     			    					
								             	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
								// Данный фрагмент построен конструктором.
								// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
								
								Запрос = Новый Запрос;
								Запрос.Текст = 
									"ВЫБРАТЬ ПЕРВЫЕ 1
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.Договор КАК Договор,
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.Должник КАК Должник,
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.СудебныйСтатус КАК СудебныйСтатус,
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.Период КАК Период
                                    |   ИЗ
	                                | РегистрСведений.ДоговорыСудебныеСтатусыРег.СрезПоследних(
			                        | &МоментВремени,
		                            | Договор = &Договор
			                        | И Должник = &Должник) КАК ДоговорыСудебныеСтатусыРегСрезПоследних
                                    | УПОРЯДОЧИТЬ ПО
	                                | Период УБЫВ";
								
								Запрос.УстановитьПараметр("Договор", дог);
								Запрос.УстановитьПараметр("Должник", долж);
								Запрос.УстановитьПараметр("МоментВремени", датаотч);
								
								РезультатЗапроса = Запрос.Выполнить();
								
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									// Вставить обработку выборки ВыборкаДетальныеЗаписи
									
									//строкаИз=ВыборкаДетальныеЗаписи.Договор.НомерДоговора+" - "+ ВыборкаДетальныеЗаписи.СудебныйСтатус.Наименование+" ";
									строкаИз=ВыборкаДетальныеЗаписи.СудебныйСтатус.Наименование+" ";
									
								КонецЦикла;
								
								//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
  
	  	
	  
	  Исключение
		      Сообщить(дог);
			  Сообщить(ОписаниеОшибки());
			  
		    
		  
	  КонецПопытки;
	
	    					
			  
	
	 Возврат строкаИз;

КонецФункции // ()



&НаСервере
Функция СудебныйСтатусВрОбщ(долж,дог,датаотч) Экспорт

	
	         строкаИз="";
			 
			 
              		
			
	  Попытка
	     			    					
								             	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
								// Данный фрагмент построен конструктором.
								// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
								
								Запрос = Новый Запрос;
								Запрос.Текст = 
									"ВЫБРАТЬ ПЕРВЫЕ 1
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.Договор КАК Договор,
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.Должник КАК Должник,
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.СудебныйСтатус КАК СудебныйСтатус,
	                                | ДоговорыСудебныеСтатусыРегСрезПоследних.Период КАК Период
                                    |   ИЗ
	                                | РегистрСведений.ДоговорыСудебныеСтатусыРег.СрезПоследних(
			                        | &МоментВремени,
		                            | Договор = &Договор
			                        | И Должник = &Должник) КАК ДоговорыСудебныеСтатусыРегСрезПоследних
                                    | УПОРЯДОЧИТЬ ПО
	                                | Период УБЫВ";
								
								Запрос.УстановитьПараметр("Договор", дог);
								Запрос.УстановитьПараметр("Должник", долж);
								Запрос.УстановитьПараметр("МоментВремени", датаотч);
								
								РезультатЗапроса = Запрос.Выполнить();
								
								ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
								
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									// Вставить обработку выборки ВыборкаДетальныеЗаписи
									
									строкаИз=ВыборкаДетальныеЗаписи.СудебныйСтатус.Наименование;
									
								КонецЦикла;
								
								//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
  
	  	
	  
	  Исключение
		      Сообщить(дог);
			  Сообщить(ОписаниеОшибки());
			  
		    
		  
	  КонецПопытки;
	
	    					
	  
						//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						// Данный фрагмент построен конструктором.
						// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	Должники.СудебныйСтатус КАК СудебныйСтатус
							|ИЗ
							|	Справочник.Должники КАК Должники
							|ГДЕ
							|	Должники.Ссылка = &Ссылка";
						
						Запрос.УстановитьПараметр("Ссылка", долж);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							
							строкаИз=Строка(ВыборкаДетальныеЗаписи.СудебныйСтатус)+"  "+ строкаИз;
							
						КонецЦикла;
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

						  
	  
	  
	
	 Возврат строкаИз;

КонецФункции // ()


Функция ПолучитьИДБанкрота(долж)  Экспорт

	идБанкрот="";
	
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Банкроты.IDDebitor КАК IDDebitor
						|ИЗ
						|	Справочник.Банкроты КАК Банкроты
						|ГДЕ
						|	Банкроты.Владелец = &Владелец";
					
					Запрос.УстановитьПараметр("Владелец", долж);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
			             идБанкрот= ВыборкаДетальныеЗаписи.IDDebitor;   			
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат идБанкрот;				

КонецФункции // ()


&НаСервере
Функция ПолучитьФайлИзХран(видДокумента) Экспорт
	
	 
	   НайтиШабл = Справочники.ШаблоныЮристы.НайтиПоНаименованию(видДокумента,ИСТИНА);
	 
	     Двоичные=Неопределено;
		 
		 Если НайтиШабл<>Неопределено Тогда
		 
		 	 Если НЕ НайтиШабл.ПУСТАЯ() Тогда  
 
        		Хран=НайтиШабл.ФайлШаблона;
        		Двоичные=Хран.Получить(); 
    			
    		КонецЕсли;
			

		 
		 КонецЕсли; 
    	
			
	  Возврат Двоичные;		
	 

КонецФункции // ()





&НаСервере
Процедура СписокДелКредитногоДоговораУстановитьДатаПоследнегоПлатежа() Экспорт

				//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	СписокДелКредитногоДоговора.Ссылка КАК Ссылка,
					|	СписокДелКредитногоДоговора.Владелец КАК Владелец
					|ИЗ
					|	Справочник.СписокДелКредитногоДоговора КАК СписокДелКредитногоДоговора";
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					  об= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					  об.Заблокировать(); 
					  об.ДатаПоследнегоПлатежа=ДатаПоследнегоПлатежаСписокДел(ВыборкаДетальныеЗаписи.Владелец);
                      об.Записать();  
					  
					  
					
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА



	  
	
	

КонецПроцедуры





&НаСервере
Функция ДатаПоследнегоПлатежаСписокДел(дог) 

	        датаПослПлат=Дата(1, 1, 1, 0, 0, 0); 
	
					             	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
					// Данный фрагмент построен конструктором.
					// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	Платежи.Период КАК Период,
						|	Платежи.Договор КАК Договор
						|ИЗ
						|	РегистрНакопления.Платежи КАК Платежи
						|ГДЕ
						|	Платежи.Договор = &Договор
						|
						|УПОРЯДОЧИТЬ ПО
						|	Период УБЫВ";
					
					Запрос.УстановитьПараметр("Договор", дог);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						// Вставить обработку выборки ВыборкаДетальныеЗаписи
						датаПослПлат=ВыборкаДетальныеЗаписи.Период;
					КонецЦикла;
					
					//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	       Возврат датаПослПлат;

	   КонецФункции // ()
	   
	   
&НаСервере
Процедура ДанныеПоследнегоДокументаПоДоговоруОдному(дог) Экспорт
	   
	            названиеДокументаВходящего=Неопределено;
						  ДатаРегистрацииВходящего=Неопределено;
						  РегистрационныйНомерВходящего=Неопределено;
						  ШифрВходящего=Неопределено;
						  ТипДокументаВходящего=Неопределено;
						  СтадияДокументаВходящего=Неопределено;
						  
						  
						  
						  
						  названиеДокументаИcходящего=Неопределено;
						  ДатаРегистрацииИcходящего=Неопределено;
						  РегистрационныйНомерИcходящего=Неопределено;
						  ШифрИcходящего=Неопределено;
						  ТипДокументаИcходящего=Неопределено;
						  СтадияДокументаИcходящего=Неопределено;
						  
						  
						  
						  СтадияДела=Неопределено;
						  
						  
						  
						  
						  
		
											 // последний документ 
											 
											   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						// Данный фрагмент построен конструктором.
						// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ ПЕРВЫЕ 1
							|	ДокументВходящий.НазваниеДокумента КАК НазваниеДокумента,
							|	ДокументВходящий.НазваниеДокументаСправочник КАК НазваниеДокументаСправочник,
							|	ДокументВходящий.РегистрационныйНомер КАК РегистрационныйНомер,
							|	ДокументВходящий.ДатаРегистрации КАК ДатаРегистрации,
							|	ДокументВходящий.ШифрНазвания КАК ШифрНазвания,
							|	ДокументВходящий.НазваниеДокументаСправочник.ТипДокумента КАК ТипДокументаСправочник,
							|	НазванияДокументов.ТипДокумента КАК ТипДокумента,
							|	ДокументВходящий.Стадия КАК Стадия
							|ИЗ
							|	Справочник.ДокументВходящий КАК ДокументВходящий
							|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазванияДокументов КАК НазванияДокументов
							|		ПО ДокументВходящий.ШифрНазвания = НазванияДокументов.ШифрНазвания
							|ГДЕ
							|	ДокументВходящий.Договор = &Договор
							|
							|УПОРЯДОЧИТЬ ПО
							|	ДатаРегистрации УБЫВ";
						
						Запрос.УстановитьПараметр("Договор", дог);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДокументВходящий = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДокументВходящий.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							
							названиеДокументаВходящего=ВыборкаДокументВходящий.НазваниеДокумента;
							ДатаРегистрацииВходящего=ВыборкаДокументВходящий.ДатаРегистрации;
							РегистрационныйНомерВходящего=ВыборкаДокументВходящий.РегистрационныйНомер;
							ШифрВходящего=ВыборкаДокументВходящий.ШифрНазвания;
							ТипДокументаВходящего=ВыборкаДокументВходящий.ТипДокумента;
							СтадияДокументаВходящего=ВыборкаДокументВходящий.Стадия;
							
						КонецЦикла;
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

						
						
						  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ ПЕРВЫЕ 1
								|	ДокументИсходящий.НазваниеДокумента КАК НазваниеДокумента,
								|	ДокументИсходящий.РегистрационныйНомер КАК РегистрационныйНомер,
								|	ДокументИсходящий.ДатаРегистрации КАК ДатаРегистрации,
								|	ДокументИсходящий.ШифрНазвания КАК ШифрНазвания,
								|	НазванияДокументов.ТипДокумента КАК ТипДокумента,
								|	ДокументИсходящий.Стадия КАК Стадия
								|ИЗ
								|	Справочник.ДокументИсходящий КАК ДокументИсходящий
								|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазванияДокументов КАК НазванияДокументов
								|		ПО ДокументИсходящий.ШифрНазвания = НазванияДокументов.ШифрНазвания
								|ГДЕ
								|	ДокументИсходящий.Договор = &Договор
								|
								|УПОРЯДОЧИТЬ ПО
								|	ДатаРегистрации УБЫВ";
							
							Запрос.УстановитьПараметр("Договор", дог);
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДокументИсходящий = РезультатЗапроса.Выбрать();
							
							Пока ВыборкаДокументИсходящий.Следующий() Цикл
								
									названиеДокументаИcходящего=ВыборкаДокументИсходящий.НазваниеДокумента;
									ДатаРегистрацииИcходящего=ВыборкаДокументИсходящий.ДатаРегистрации;
									РегистрационныйНомерИcходящего=ВыборкаДокументИсходящий.РегистрационныйНомер;
									ШифрИcходящего=ВыборкаДокументИсходящий.ШифрНазвания;
									ТипДокументаИcходящего=ВыборкаДокументИсходящий.ТипДокумента;
                                    СтадияДокументаИcходящего=ВыборкаДокументВходящий.Стадия; 
									
							
								
							КонецЦикла;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

							
								//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ ПЕРВЫЕ 1
								|	СписокДелКредитногоДоговора.Ссылка КАК Ссылка,
								|	СписокДелКредитногоДоговора.СтадияДела КАК СтадияДела,
								|	СписокДелКредитногоДоговора.ДатаДела КАК ДатаДела
								|ИЗ
								|	Справочник.СписокДелКредитногоДоговора КАК СписокДелКредитногоДоговора
								|ГДЕ
								|	СписокДелКредитногоДоговора.Владелец = &Владелец
								|
								|УПОРЯДОЧИТЬ ПО
								|	ДатаДела УБЫВ";
							
							Запрос.УстановитьПараметр("Владелец", дог);

							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
								СтадияДела=ВыборкаДетальныеЗаписи.СтадияДела;
							КонецЦикла;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

							
							
							
							
							
						Если  ДатаРегистрацииИcходящего<>Неопределено  Тогда
						    Если ДатаРегистрацииВходящего<>Неопределено Тогда
								
								Если ДатаРегистрацииИcходящего>ДатаРегистрацииВходящего Тогда
									  					
						                    МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							                МенеджерЗаписи.КредитныйДоговор = дог;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаИcходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаИcходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииИcходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрИcходящего;
											
											МенеджерЗаписи.СтадияДела=СтадияДела;
											
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаИcходящего;
											
						
							                 МенеджерЗаписи.Записать();

									
									
								Иначе	
									
									    МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							                МенеджерЗаписи.КредитныйДоговор = дог;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаВходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаВходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииВходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрВходящего;
											МенеджерЗаписи.СтадияДела=СтадияДела;
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаВходящего;
											
						
							                 МенеджерЗаписи.Записать();
    
									           
									
								
								КонецЕсли; 
								
								
								
								
							Иначе 	
								
								    МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							                МенеджерЗаписи.КредитныйДоговор = дог;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаИcходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаИcходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииИcходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрИcходящего;
											МенеджерЗаписи.СтадияДела=СтадияДела;
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаИcходящего;
						
							                 МенеджерЗаписи.Записать();

								
								
							
							КонецЕсли;
							
						Иначе
							
							Если ДатаРегистрацииВходящего<>Неопределено Тогда
								
								  МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							      МенеджерЗаписи.КредитныйДоговор = дог;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаВходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаВходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииВходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрВходящего;
											МенеджерЗаписи.СтадияДела=СтадияДела;
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаВходящего;
											
							                 МенеджерЗаписи.Записать();

								
							 КонецЕсли;	
							 
							 
										 
										 
							
						
						КонецЕсли;
						
							
						
						Если ДатаРегистрацииВходящего=Неопределено И ДатаРегистрацииИcходящего=Неопределено Тогда
						            МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							      МенеджерЗаписи.КредитныйДоговор = дог;
								  МенеджерЗаписи.СтадияДела=СтадияДела;
							       МенеджерЗаписи.Записать();
						
						КонецЕсли;
							
							
					 		
							
	
	
КонецПроцедуры	
	   
&НаСервере
Процедура ДанныеПоследнегоДокументаПоДоговору() Экспорт
	
	   // Пройдусь по базе договоров
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Договоры КАК Договоры";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДоговора = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДоговора.Следующий() Цикл
		
		                  названиеДокументаВходящего=Неопределено;
						  ДатаРегистрацииВходящего=Неопределено;
						  РегистрационныйНомерВходящего=Неопределено;
						  ШифрВходящего=Неопределено;
						  ТипДокументаВходящего=Неопределено;
						  СтадияДокументаВходящего=Неопределено;
						  
						  
						  
						  
						  названиеДокументаИcходящего=Неопределено;
						  ДатаРегистрацииИcходящего=Неопределено;
						  РегистрационныйНомерИcходящего=Неопределено;
						  ШифрИcходящего=Неопределено;
						  ТипДокументаИcходящего=Неопределено;
						  СтадияДокументаИcходящего=Неопределено;
						  
						  
						  
						  СтадияДела=Неопределено;
						  
						  
						  
						  
						  
		
											 // последний документ 
											 
											   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
						// Данный фрагмент построен конструктором.
						// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ ПЕРВЫЕ 1
							|	ДокументВходящий.НазваниеДокумента КАК НазваниеДокумента,
							|	ДокументВходящий.НазваниеДокументаСправочник КАК НазваниеДокументаСправочник,
							|	ДокументВходящий.РегистрационныйНомер КАК РегистрационныйНомер,
							|	ДокументВходящий.ДатаРегистрации КАК ДатаРегистрации,
							|	ДокументВходящий.ШифрНазвания КАК ШифрНазвания,
							|	ДокументВходящий.НазваниеДокументаСправочник.ТипДокумента КАК ТипДокументаСправочник,
							|	НазванияДокументов.ТипДокумента КАК ТипДокумента,
							|	ДокументВходящий.Стадия КАК Стадия,
							|	ДокументВходящий.НазваниеДокументаСправочник.НазваниеДокумента КАК НазваниеДокументаСправочникНазваниеДокумента
							|ИЗ
							|	Справочник.ДокументВходящий КАК ДокументВходящий
							|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазванияДокументов КАК НазванияДокументов
							|		ПО ДокументВходящий.ШифрНазвания = НазванияДокументов.ШифрНазвания
							|ГДЕ
							|	ДокументВходящий.Договор = &Договор
							|
							|УПОРЯДОЧИТЬ ПО
							|	ДатаРегистрации УБЫВ";
						
						Запрос.УстановитьПараметр("Договор", ВыборкаДоговора.Ссылка);
						
						РезультатЗапроса = Запрос.Выполнить();
						
						ВыборкаДокументВходящий = РезультатЗапроса.Выбрать();
						
						Пока ВыборкаДокументВходящий.Следующий() Цикл
							// Вставить обработку выборки ВыборкаДетальныеЗаписи
							
							названиеДокументаВходящего=ВыборкаДокументВходящий.НазваниеДокументаСправочникНазваниеДокумента;
							ДатаРегистрацииВходящего=ВыборкаДокументВходящий.ДатаРегистрации;
							РегистрационныйНомерВходящего=ВыборкаДокументВходящий.РегистрационныйНомер;
							ШифрВходящего=ВыборкаДокументВходящий.ШифрНазвания;
							ТипДокументаВходящего=ВыборкаДокументВходящий.ТипДокумента;
							СтадияДокументаВходящего=ВыборкаДокументВходящий.Стадия;
							
						КонецЦикла;
						
						//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

						
						
						  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ ПЕРВЫЕ 1
								|	ДокументИсходящий.НазваниеДокумента КАК НазваниеДокумента,
								|	ДокументИсходящий.РегистрационныйНомер КАК РегистрационныйНомер,
								|	ДокументИсходящий.ДатаРегистрации КАК ДатаРегистрации,
								|	ДокументИсходящий.ШифрНазвания КАК ШифрНазвания,
								|	НазванияДокументов.ТипДокумента КАК ТипДокумента,
								|	ДокументИсходящий.Стадия КАК Стадия
								|ИЗ
								|	Справочник.ДокументИсходящий КАК ДокументИсходящий
								|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазванияДокументов КАК НазванияДокументов
								|		ПО ДокументИсходящий.ШифрНазвания = НазванияДокументов.ШифрНазвания
								|ГДЕ
								|	ДокументИсходящий.Договор = &Договор
								|
								|УПОРЯДОЧИТЬ ПО
								|	ДатаРегистрации УБЫВ";
							
							Запрос.УстановитьПараметр("Договор", ВыборкаДоговора.Ссылка);
							
							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДокументИсходящий = РезультатЗапроса.Выбрать();
							
							Пока ВыборкаДокументИсходящий.Следующий() Цикл
								
									названиеДокументаИcходящего=ВыборкаДокументИсходящий.НазваниеДокумента;
									ДатаРегистрацииИcходящего=ВыборкаДокументИсходящий.ДатаРегистрации;
									РегистрационныйНомерИcходящего=ВыборкаДокументИсходящий.РегистрационныйНомер;
									ШифрИcходящего=ВыборкаДокументИсходящий.ШифрНазвания;
									ТипДокументаИcходящего=ВыборкаДокументИсходящий.ТипДокумента;
                                    СтадияДокументаИcходящего=ВыборкаДокументВходящий.Стадия; 
									
							
								
							КонецЦикла;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

							
								//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
							// Данный фрагмент построен конструктором.
							// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
							
							Запрос = Новый Запрос;
							Запрос.Текст = 
								"ВЫБРАТЬ ПЕРВЫЕ 1
								|	СписокДелКредитногоДоговора.Ссылка КАК Ссылка,
								|	СписокДелКредитногоДоговора.СтадияДела КАК СтадияДела,
								|	СписокДелКредитногоДоговора.ДатаДела КАК ДатаДела
								|ИЗ
								|	Справочник.СписокДелКредитногоДоговора КАК СписокДелКредитногоДоговора
								|ГДЕ
								|	СписокДелКредитногоДоговора.Владелец = &Владелец
								|
								|УПОРЯДОЧИТЬ ПО
								|	ДатаДела УБЫВ";
							
							Запрос.УстановитьПараметр("Владелец", ВыборкаДоговора.Ссылка);

							РезультатЗапроса = Запрос.Выполнить();
							
							ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
							
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								// Вставить обработку выборки ВыборкаДетальныеЗаписи
								СтадияДела=ВыборкаДетальныеЗаписи.СтадияДела;
							КонецЦикла;
							
							//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

							
							
							
							
							
						Если  ДатаРегистрацииИcходящего<>Неопределено  Тогда
						    Если ДатаРегистрацииВходящего<>Неопределено Тогда
								
								Если ДатаРегистрацииИcходящего>ДатаРегистрацииВходящего Тогда
									  					
						                    МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							                МенеджерЗаписи.КредитныйДоговор = ВыборкаДоговора.Ссылка;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаИcходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаИcходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииИcходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрИcходящего;
											
											МенеджерЗаписи.СтадияДела=СтадияДела;
											
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаИcходящего;
											
						
							                 МенеджерЗаписи.Записать();

									
									
								Иначе	
									
									    МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							                МенеджерЗаписи.КредитныйДоговор = ВыборкаДоговора.Ссылка;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаВходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаВходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииВходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрВходящего;
											МенеджерЗаписи.СтадияДела=СтадияДела;
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаВходящего;
											
						
							                 МенеджерЗаписи.Записать();
    
									           
									
								
								КонецЕсли; 
								
								
								
								
							Иначе 	
								
								    МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							                МенеджерЗаписи.КредитныйДоговор = ВыборкаДоговора.Ссылка;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаИcходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаИcходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииИcходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрИcходящего;
											МенеджерЗаписи.СтадияДела=СтадияДела;
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаИcходящего;
						
							                 МенеджерЗаписи.Записать();

								
								
							
							КонецЕсли;
							
						Иначе
							
							Если ДатаРегистрацииВходящего<>Неопределено Тогда
								
								  МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							      МенеджерЗаписи.КредитныйДоговор = ВыборкаДоговора.Ссылка;
											
											МенеджерЗаписи.ТипДокумента=ТипДокументаВходящего;
											
											МенеджерЗаписи.НазваниеДокумента=названиеДокументаВходящего;
											
											МенеджерЗаписи.ДатаРегистрации=ДатаРегистрацииВходящего;
											
											МенеджерЗаписи.ШифрНазвания=ШифрВходящего;
											МенеджерЗаписи.СтадияДела=СтадияДела;
											МенеджерЗаписи.СтадияДокумента=СтадияДокументаВходящего;
											
							                 МенеджерЗаписи.Записать();

								
							 КонецЕсли;	
							 
							 
										 
										 
							
						
						КонецЕсли;
						
							
						
						Если ДатаРегистрацииВходящего=Неопределено И ДатаРегистрацииИcходящего=Неопределено Тогда
						            МенеджерЗаписи = РегистрыСведений.РегистрСведенийПоследнийДокументКредитногоДоговора.СоздатьМенеджерЗаписи();
	
							      МенеджерЗаписи.КредитныйДоговор = ВыборкаДоговора.Ссылка;
								  МенеджерЗаписи.СтадияДела=СтадияДела;
							       МенеджерЗаписи.Записать();
						
						КонецЕсли;
							
							
					 		
								
												////////////////
					
					
					
					
		
		
	КонецЦикла;
	
	
	
	
	 
	
	
	
	
	
	
	
	
	

КонецПроцедуры


&НаСервере
Функция ВсегоЗадолженностьСрезПоследних(датаЗапрос,дог) Экспорт

	   структураДанных=Новый Структура;
	   
	   
	       	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДоговоровСрезПоследних.Период КАК Период,
		|	ДанныеДоговоровСрезПоследних.ВсегоЗадолженность КАК ВсегоЗадолженность,
		|	ДанныеДоговоровСрезПоследних.ТекущийОсновнойДолг КАК ТекущийОсновнойДолг,
		|	ДанныеДоговоровСрезПоследних.ПросроченныйОсновнойДолг КАК ПросроченныйОсновнойДолг,
		|	ДанныеДоговоровСрезПоследних.Неустойка КАК Неустойка,
		|	ДанныеДоговоровСрезПоследних.ДатаРасчетаЗадолженности КАК ДатаРасчетаЗадолженности,
		|	ДанныеДоговоровСрезПоследних.ДнейПросрочки КАК ДнейПросрочки,
		|	ДанныеДоговоровСрезПоследних.ТекущиеПроценты КАК ТекущиеПроценты,
		|	ДанныеДоговоровСрезПоследних.Госпошлина КАК Госпошлина,
		|	ДанныеДоговоровСрезПоследних.Прочее КАК Прочее,
		|	ДанныеДоговоровСрезПоследних.ПросроченныеПроценты КАК ПросроченныеПроценты
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&МоментВремени, ) КАК ДанныеДоговоровСрезПоследних
		|ГДЕ
		|	ДанныеДоговоровСрезПоследних.Договор = &Договор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Договор", дог);
	Запрос.УстановитьПараметр("МоментВремени", датаЗапрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		   структураДанных.Вставить("ВсегоЗадолженность",ВыборкаДетальныеЗаписи.ВсегоЗадолженность);
		   структураДанных.Вставить("ТекущийОсновнойДолг",ВыборкаДетальныеЗаписи.ТекущийОсновнойДолг);
		   структураДанных.Вставить("ПросроченныйОсновнойДолг",ВыборкаДетальныеЗаписи.ПросроченныйОсновнойДолг);
		   структураДанных.Вставить("Неустойка",ВыборкаДетальныеЗаписи.Неустойка);
		   структураДанных.Вставить("ТекущиеПроценты",ВыборкаДетальныеЗаписи.ТекущиеПроценты);
		   структураДанных.Вставить("Госпошлина",ВыборкаДетальныеЗаписи.Госпошлина);
		   структураДанных.Вставить("Прочее",ВыборкаДетальныеЗаписи.Прочее);
		   структураДанных.Вставить("ПросроченныеПроценты",ВыборкаДетальныеЗаписи.ПросроченныеПроценты);
		   
		   структураДанных.Вставить("ТекущаяЗадолженностьВсего",ВыборкаДетальныеЗаписи.ТекущиеПроценты+ВыборкаДетальныеЗаписи.ТекущийОсновнойДолг);
		   структураДанных.Вставить("ПросроченнаяЗадолженностьВсего",ВыборкаДетальныеЗаписи.ПросроченныйОсновнойДолг+ВыборкаДетальныеЗаписи.ПросроченныеПроценты+ВыборкаДетальныеЗаписи.Госпошлина+ВыборкаДетальныеЗаписи.Неустойка+ВыборкаДетальныеЗаписи.Прочее);
		   
		   структураДанных.Вставить("ПросроченоВсегоПроценты",ВыборкаДетальныеЗаписи.ПросроченныйОсновнойДолг+ВыборкаДетальныеЗаписи.ПросроченныеПроценты+ВыборкаДетальныеЗаписи.Неустойка+ВыборкаДетальныеЗаписи.Госпошлина+ВыборкаДетальныеЗаписи.Прочее);
		   
		   
		   структураДанных.Вставить("ВсегоЗадолженность",ВыборкаДетальныеЗаписи.ВсегоЗадолженность);
		   
		
		
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	Возврат  структураДанных;

КонецФункции // ()


&НаСервере
Функция ТипАдресаРегистрация(ссылкаВладелец) Экспорт

	   адресСтрока="";
	
	 ссылкаСправочник=Справочники.ТипыАдресов.НайтиПоНаименованию("Регион текст");
			 
			     	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Адреса.Адрес КАК Адрес
				|ИЗ
				|	Справочник.Адреса КАК Адреса
				|ГДЕ
				|	Адреса.Владелец = &Владелец
				|	И Адреса.Тип = &Тип";
			
			Запрос.УстановитьПараметр("Владелец", ссылкаВладелец);
			Запрос.УстановитьПараметр("Тип",  ссылкаСправочник);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				 адресСтрока=ВыборкаДетальныеЗаписи.Адрес;
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	 
	 
	 
	 Возврат адресСтрока;

КонецФункции // ()




&НаСервере
Процедура ФоновоеЗаданиеСозданиеДелаИзВходящих() Экспорт
	
		
		  
	  датаПоследнейОбработки=Неопределено; 
	       	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрСведенийДатаОбработкиВходящих.ДатаОбработки КАК ДатаОбработки
		|ИЗ
		|	РегистрСведений.РегистрСведенийДатаОбработкиВходящих КАК РегистрСведенийДатаОбработкиВходящих
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОбработки УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		датаПоследнейОбработки=ВыборкаДетальныеЗаписи.ДатаОбработки;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	   
	 Если датаПоследнейОбработки=Неопределено Тогда
		 
		            	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДокументВходящий.НомерДела КАК НомерДела,
				|	ДокументВходящий.Договор КАК Договор,
				|	ДокументВходящий.Стадия КАК Стадия
				|ИЗ
				|	Справочник.ДокументВходящий КАК ДокументВходящий
				|ГДЕ
				|	ДокументВходящий.ПометкаУдаления = &ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);

			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// Вставить обработку выборки ВыборкаДетальныеЗаписи
				
				Если ВыборкаДетальныеЗаписи.НомерДела<>"" И  (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор)) Тогда
				
					       Если  НЕ ЕстьЛиДелоПоДоговору(ВыборкаДетальныеЗаписи.Договор,ПеречислениеСтадяДела(ВыборкаДетальныеЗаписи.Стадия),ВыборкаДетальныеЗаписи.НомерДела) Тогда
					   
					               НачатьТранзакцию();
	
                               	Попытка

					             
					   
					             структураЦессия=НайтиНомерЦессии(ВыборкаДетальныеЗаписи.Договор);
 
					   
					             новыйЭлементСпискадел=Справочники.СписокДелКредитногоДоговора.СоздатьЭлемент();
								 
								 новыйЭлементСпискадел.Банк=ВыборкаДетальныеЗаписи.Договор.Банк;
								 новыйЭлементСпискадел.Владелец=ВыборкаДетальныеЗаписи.Договор;
								 новыйЭлементСпискадел.ДатаКредитногоДоговора=ВыборкаДетальныеЗаписи.Договор.ДатаФинансирования;
							     новыйЭлементСпискадел.ДатаЦессии=структураЦессия.ДатаЦессии;
								 
								 новыйЭлементСпискадел.НомерДела=ВыборкаДетальныеЗаписи.НомерДела;
								 
							     новыйЭлементСпискадел.Должник=ВыборкаДетальныеЗаписи.Договор.Владелец;
							     новыйЭлементСпискадел.КредитныйДоговор=ВыборкаДетальныеЗаписи.Договор;
								 новыйЭлементСпискадел.НомерЦессии=структураЦессия.НомерДоговора;
							   //  новыйЭлементСпискадел.ОтветственныйСотрудник=ПользовательТк;
							   
							      новыйЭлементСпискадел.СтадияДела=ПеречислениеСтадяДела(ВыборкаДетальныеЗаписи.Стадия);
								  
							      новыйЭлементСпискадел.ДатаСоздания=ТекущаяДата();
								  новыйЭлементСпискадел.СуммаЗадолженностиПереданная=СуммаЗадолженностиПереданнаяИзРегистра(ВыборкаДетальныеЗаписи.Договор);
							      новыйЭлементСпискадел.ТипКредита=ВыборкаДетальныеЗаписи.Договор.ТипКредита;
							    							   
								  новыйЭлементСпискадел.Записать();
								 
								 
								 	 структураСуд= ЕстьлиСудКДоговору(ВыборкаДетальныеЗаписи.Договор);
										 
										 Если структураСуд.Суд<>Неопределено Тогда
											 
											  новаяЗаписьСудВкладка=Справочники.ВкладкаСудСудебнаяСтадияСписокДел.СоздатьЭлемент();
											  
											  новаяЗаписьСудВкладка.Владелец=новыйЭлементСпискадел.Ссылка;
											  
											  новаяЗаписьСудВкладка.НазваниеСуда=структураСуд.Суд;
											  новаяЗаписьСудВкладка.АдресСудаВкладка=структураСуд.Суд.Адрес;
											  новаяЗаписьСудВкладка.ТипСуда= Строка(структураСуд.Суд.ТипСуда);
											  
											  новаяЗаписьСудВкладка.Записать();
											  
											 
											 
										 
										 КонецЕсли;

								 ЗафиксироватьТранзакцию();
								Исключение
									
									 
									
									ОтменитьТранзакцию();
									
									ТекстОшибки = ОписаниеОшибки();
									Сообщить(ТекстОшибки);
									
								КонецПопытки;

					   
				   
				   КонецЕсли;  
				   

				
				КонецЕсли;
				
								
				
				
			КонецЦикла;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		 
			
		  МенеджерЗаписи = РегистрыСведений.РегистрСведенийДатаОбработкиВходящих.СоздатьМенеджерЗаписи();
		  МенеджерЗаписи.ДатаОбработки = ТекущаяДата();
		  МенеджерЗаписи.ДатаРесурс = ТекущаяДата();
		  МенеджерЗаписи.Записать();
		  
	 	
	 
	 КонецЕсли;
	
	 
	  Если датаПоследнейОбработки<>Неопределено Тогда
		  
		       датаПоследнейОбработки = датаПоследнейОбработки - 60 * 60 * 24;
		  
					   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДокументВходящий.НомерДела КАК НомерДела,
					|	ДокументВходящий.Договор КАК Договор,
					|	ДокументВходящий.Стадия КАК Стадия
					|ИЗ
					|	Справочник.ДокументВходящий КАК ДокументВходящий
					|ГДЕ
					|	ДокументВходящий.ДатаСоздания >= &ДатаСоздания
					|	И ДокументВходящий.ПометкаУдаления = &ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ДатаСоздания", датаПоследнейОбработки);
				Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					// Вставить обработку выборки ВыборкаДетальныеЗаписи
					
				Если ВыборкаДетальныеЗаписи.НомерДела<>"" И  (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор)) Тогда

					
					      Если  НЕ ЕстьЛиДелоПоДоговору(ВыборкаДетальныеЗаписи.Договор,ПеречислениеСтадяДела(ВыборкаДетальныеЗаписи.Стадия),ВыборкаДетальныеЗаписи.НомерДела) Тогда
					   
					   
					             структураЦессия=НайтиНомерЦессии(ВыборкаДетальныеЗаписи.Договор);
 
					   
					             новыйЭлементСпискадел=Справочники.СписокДелКредитногоДоговора.СоздатьЭлемент();
								 
								  новыйЭлементСпискадел.НомерДела=ВыборкаДетальныеЗаписи.НомерДела;
								 
								 новыйЭлементСпискадел.Банк=ВыборкаДетальныеЗаписи.Договор.Банк;
								 новыйЭлементСпискадел.Владелец=ВыборкаДетальныеЗаписи.Договор;
								 новыйЭлементСпискадел.ДатаКредитногоДоговора=ВыборкаДетальныеЗаписи.Договор.ДатаФинансирования;
							     новыйЭлементСпискадел.ДатаЦессии=структураЦессия.ДатаЦессии;
							     новыйЭлементСпискадел.Должник=ВыборкаДетальныеЗаписи.Договор.Владелец;
							     новыйЭлементСпискадел.КредитныйДоговор=ВыборкаДетальныеЗаписи.Договор;
								 новыйЭлементСпискадел.НомерЦессии=структураЦессия.НомерДоговора;
							   //  новыйЭлементСпискадел.ОтветственныйСотрудник=ПользовательТк;
							   
							     новыйЭлементСпискадел.СтадияДела=ПеречислениеСтадяДела(ВыборкаДетальныеЗаписи.Стадия);
								  
							      новыйЭлементСпискадел.ДатаСоздания=ТекущаяДата();
								  новыйЭлементСпискадел.СуммаЗадолженностиПереданная=СуммаЗадолженностиПереданнаяИзРегистра(ВыборкаДетальныеЗаписи.Договор);
							      новыйЭлементСпискадел.ТипКредита=ВыборкаДетальныеЗаписи.Договор.ТипКредита;
							    							   
								  новыйЭлементСпискадел.Записать();
								 
								 
								 	 структураСуд= ЕстьлиСудКДоговору(ВыборкаДетальныеЗаписи.Договор);
										 
										 Если структураСуд.Суд<>Неопределено Тогда
											 
											  новаяЗаписьСудВкладка=Справочники.ВкладкаСудСудебнаяСтадияСписокДел.СоздатьЭлемент();
											  новаяЗаписьСудВкладка.Владелец=новыйЭлементСпискадел.Ссылка;
											  
											  новаяЗаписьСудВкладка.НазваниеСуда=структураСуд.Суд;
											  новаяЗаписьСудВкладка.АдресСудаВкладка=структураСуд.Суд.Адрес;
											  новаяЗаписьСудВкладка.ТипСуда= Строка(структураСуд.Суд.ТипСуда);
											  
											  новаяЗаписьСудВкладка.Записать();
											  
											 
											 
										 
										 КонецЕсли;

					   
					   
				   
				    КонецЕсли;  

					
				 КонецЕсли;	
					
					
					
				КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

		  МенеджерЗаписи = РегистрыСведений.РегистрСведенийДатаОбработкиВходящих.СоздатьМенеджерЗаписи();
		  МенеджерЗаписи.ДатаОбработки = ТекущаяДата();
		  МенеджерЗаписи.ДатаРесурс = ТекущаяДата();
		  МенеджерЗаписи.Записать();
		  
		  
		  
	  КонецЕсли;
	
	

		
		
		
		

КонецПроцедуры


&НаСервере
Функция ПеречислениеСтадяДела(стадДок)

	 Если стадДок=Перечисления.СтадияДокумента.СудебноеПроизводство Тогда
	 
	 	 Возврат  Перечисления.СтадияДела.СудебноеПроизводство;
	 
	 КонецЕсли;
	 
	 
	 Если стадДок=Перечисления.СтадияДокумента.ИсполнительноеПроизводство Тогда
	 
	 	 Возврат  Перечисления.СтадияДела.ИсполнительноеПроизводство;
	 
	 КонецЕсли;
	 
	 
	 Если стадДок=Перечисления.СтадияДокумента.Банкротство Тогда
	 
	 	 Возврат  Перечисления.СтадияДела.Банкротство;
	 
	 КонецЕсли;
	 
	 
	

КонецФункции // ()

  


&НаСервере
Функция СуммаЗадолженностиПереданнаяИзРегистра(дог)

	СуммаЗадолженностиПереданная=0;
	  
	         	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачальныеДанныеДоговораСрезПоследних.СуммаЗадолженности КАК СуммаЗадолженности,
		|	НачальныеДанныеДоговораСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.НачальныеДанныеДоговора.СрезПоследних(&МоментВремени, Договор = &Договор) КАК НачальныеДанныеДоговораСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Договор", дог);
	Запрос.УстановитьПараметр("МоментВремени", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		   СуммаЗадолженностиПереданная= ВыборкаДетальныеЗаписи.СуммаЗадолженности;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	 Возврат СуммаЗадолженностиПереданная;

КонецФункции // ()


 
 


&НаСервере
Функция НайтиНомерЦессии(дог)

	   структураДанные=Новый Структура;
	   
	   //структураДанные=Неопределено;
	   
				    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДоговорЦессии.НомерДоговора КАК НомерДоговора,
					|	ДоговорЦессии.ДатаЦессии КАК ДатаЦессии
					|ИЗ
					|	Справочник.ДоговорЦессии КАК ДоговорЦессии
					|ГДЕ
					|	ДоговорЦессии.Владелец = &Владелец";
				
				Запрос.УстановитьПараметр("Владелец", дог);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
				
					    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
							
							структураДанные.Вставить("НомерДоговора",ВыборкаДетальныеЗаписи.НомерДоговора);
							структураДанные.Вставить("ДатаЦессии",ВыборкаДетальныеЗаписи.ДатаЦессии);
							
							
							 
				        КонецЦикла;

				
				Иначе
				
					  структураДанные.Вставить("НомерДоговора","");
					  структураДанные.Вставить("ДатаЦессии","");
							

					
				
				КонецЕсли;
				
								
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				
       Возврат  структураДанные;
	

КонецФункции // ()






&НаСервере
Функция  ЕстьЛиДелоПоДоговору(дог,стадияДела,номерДела)

	           	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	СписокДелКредитногоДоговора.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.СписокДелКредитногоДоговора КАК СписокДелКредитногоДоговора
					|ГДЕ
					|	СписокДелКредитногоДоговора.Владелец = &Владелец
					|	И СписокДелКредитногоДоговора.СтадияДела = &СтадияДела
					|	И СписокДелКредитногоДоговора.НомерДела = &НомерДела";
				
				Запрос.УстановитьПараметр("Владелец", дог);
				Запрос.УстановитьПараметр("СтадияДела", стадияДела);
				Запрос.УстановитьПараметр("НомерДела", номерДела);
				
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
				
				  Возврат Истина;	
				
				Иначе
				
			      Возврат Ложь;		
				
				КонецЕсли;
				
				
				//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
				//КонецЦикла;
				
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	

КонецФункции // ()


&НаСервере
Функция ЕстьлиСудКДоговору(дог)
	
	        структураСуд=Новый Структура;
	   
	          	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
				// Данный фрагмент построен конструктором.
				// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	РегистрСведенийСоответствиеСудДоговорИзФайла.Договор КАК Договор,
					|	РегистрСведенийСоответствиеСудДоговорИзФайла.Суд КАК Суд,
					|	РегистрСведенийСоответствиеСудДоговорИзФайла.ДатаЗагрузки КАК ДатаЗагрузки
					|ИЗ
					|	РегистрСведений.РегистрСведенийСоответствиеСудДоговорИзФайла КАК РегистрСведенийСоответствиеСудДоговорИзФайла
					|ГДЕ
					|	РегистрСведенийСоответствиеСудДоговорИзФайла.Договор = &Договор
					|
					|УПОРЯДОЧИТЬ ПО
					|	ДатаЗагрузки УБЫВ";
				
				Запрос.УстановитьПараметр("Договор", дог);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Если ВыборкаДетальныеЗаписи.Количество()>0  Тогда
				     Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					     структураСуд.Вставить("Суд",ВыборкаДетальныеЗаписи.Суд);
					
					
				    КонецЦикла;

				
				Иначе
					
					   структураСуд.Вставить("Суд",Неопределено);
					
				
				КонецЕсли;
				
				
				
								
				//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	              
				
	Возврат структураСуд;			
				
				
	

КонецФункции // ()



&НаСервере
Функция СтатусДолжникаИзКонтакт(долж, датаПериод) Экспорт

	 статусКонтакт=Неопределено;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыДолжниковСрезПоследних.Статус КАК Статус,
		|	СтатусыДолжниковСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.СтатусыДолжников.СрезПоследних(&МоментВремени, Должник = &Должник) КАК СтатусыДолжниковСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Должник", долж);
	Запрос.УстановитьПараметр("МоментВремени", датаПериод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		
		статусКонтакт=ВыборкаДетальныеЗаписи.Статус;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	Возврат  статусКонтакт;
	
	
	

КонецФункции // ()





			
			

	



