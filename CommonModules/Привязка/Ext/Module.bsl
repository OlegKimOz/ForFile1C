Функция ПолучитьПроцентыВознаграждения(Банк, Дата) Экспорт
	Перем Запрос, ПроцентВознаграждения;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПроцентыВознагражденияСрезПоследних.Процент = NULL
	|			ТОГДА 0
	|		ИНАЧЕ ПроцентыВознагражденияСрезПоследних.Процент
	|	КОНЕЦ КАК ПроцентВознаграждения,
	|	ПроцентыВознагражденияСрезПоследних.ДнейПросрочки
	|ИЗ
	|	РегистрСведений.ПроцентыВознаграждения.СрезПоследних(&ДатаЗапроса, Банк = &Банк) КАК ПроцентыВознагражденияСрезПоследних";
	
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("ДатаЗапроса", Дата);
	
	ПроцентыВознаграждения = Запрос.Выполнить().Выгрузить();
	
	ПроцентыВознаграждения.Сортировать("ДнейПросрочки Возр");
	
	Возврат ПроцентыВознаграждения;
КонецФункции // ПолучитьПроцентыВознаграждения()

Функция НайтиПроцентВознаграждения(ПроцентыВознаграждения, ДнейПросрочки) Экспорт
	Перем ТекПроцент;
	
	ТекПроцент = 0;
	Для каждого СтрокаТЗ Из ПроцентыВознаграждения Цикл
		ТекПроцент = СтрокаТЗ.ПроцентВознаграждения;
		Если ДнейПросрочки < СтрокаТЗ.ДнейПросрочки Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла; 

	Возврат ТекПроцент;
КонецФункции // НайтиПроцентВознаграждения()

Функция ПолучитьОтветственного(Должник, Момент) Экспорт
	Перем Запрос, Ответственный;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПривязкаСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ПривязкаОтветственный.СрезПоследних(&Момент, Должник = &Должник) КАК ПривязкаСрезПоследних";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Момент", Момент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответственный = Выборка.Ответственный;
	КонецЕсли; 
	
	Возврат Ответственный;
КонецФункции // ПолучитьОтветственного

Функция ПолучитьОтдел(Должник, Момент) Экспорт
	Отдел = Справочники.Отделы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПривязкаСрезПоследних.Отдел КАК Отдел
	|ИЗ
	|	РегистрСведений.ПривязкаОтдел.СрезПоследних(&Момент, Должник = &Должник) КАК ПривязкаСрезПоследних";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Момент", Момент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Отдел = Выборка.Отдел;
	КонецЕсли; 
	
	Возврат Отдел;
КонецФункции // ПолучитьОтдел

Функция ПолучитьСотрудника(Должник, Момент) Экспорт
	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПривязкаСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ПривязкаСотрудник.СрезПоследних(&Момент, Должник = &Должник) КАК ПривязкаСрезПоследних";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Момент", Момент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сотрудник = Выборка.Сотрудник;
	КонецЕсли;
	
	Возврат Сотрудник;
КонецФункции // ПолучитьСотрудника

Функция ПолучитьСотрудникаАктивного(Должник, Момент) Экспорт
	Перем Запрос, Сотрудник;
	
	СпрАрхив = Справочники.Сотрудники.НайтиПоНаименованию("Архив");
	СпрПредархив = Справочники.Сотрудники.НайтиПоНаименованию("Предархив");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПривязкаСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.ПривязкаСотрудник.СрезПоследних(
	|			&Момент,
	|			Должник = &Должник
	|				И Сотрудник <> &СпрАрхив
	|				И Сотрудник <> &СпрПредархив) КАК ПривязкаСрезПоследних";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Момент", Момент);
	Запрос.УстановитьПараметр("СпрАрхив",СпрАрхив);
	Запрос.УстановитьПараметр("СпрПредархив",СпрПредархив);
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Если тз.Количество() > 0 Тогда
		Сотрудник = тз[тз.Количество()-1].Сотрудник;
	Иначе
		Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли; 
	
	Возврат Сотрудник;
КонецФункции // ПолучитьСотрудника

Функция ПолучитьСотрМенеджера(Должник, Момент) Экспорт
	СотрМенеджер = Справочники.Сотрудники.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПривязкаСрезПоследних.СотрМенеджер КАК СотрМенеджер
	|ИЗ
	|	РегистрСведений.ПривязкаСотрудник.СрезПоследних(&Момент, Должник = &Должник) КАК ПривязкаСрезПоследних";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Момент", Момент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СотрМенеджер = Выборка.СотрМенеджер;
	КонецЕсли; 
	
	Возврат СотрМенеджер;
КонецФункции // ПолучитьСотрудника

Функция ПолучитьОтделСотрудника(Сотрудник, Момент) Экспорт
	Отдел = Справочники.Отделы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СотрудникиОтделов.Отдел КАК Отдел
	               |ИЗ
	               |	РегистрСведений.СотрудникиОтделов.СрезПоследних(&Момент, Сотрудник = &Сотрудник) КАК СотрудникиОтделов";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Момент", Момент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Отдел = Выборка.Отдел;
	КонецЕсли; 
	
	Возврат Отдел;
КонецФункции // ПолучитьОтделСотрудника

Функция ПолучитьСтатусДолжника(Должник, Момент) Экспорт
	Статус = Справочники.Статусы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтатусыДолжников.Статус КАК Статус
	               |ИЗ
	               |	РегистрСведений.СтатусыДолжников.СрезПоследних(&Момент, Должник = &Должник) КАК СтатусыДолжников";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	Запрос.УстановитьПараметр("Момент", Момент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Статус = Выборка.Статус;
	КонецЕсли; 
	
	Возврат Статус;
КонецФункции // ПолучитьСтатусДолжника

Функция ПолучитьТаблицуДолжниковСотрудника(Сотрудник, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПривязкаСотрудникСрезПоследних.Сотрудник,
	|	ПривязкаСотрудникСрезПоследних.Должник
	|ИЗ
	|	РегистрСведений.ПривязкаСотрудник.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК ПривязкаСотрудникСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат тзРезультат;
КонецФункции // ПолучитьТаблицуДолжниковСотрудника()

Функция ПолучитьСписокТиповКонтактовСотрудника(Сотрудник, Дата) Экспорт
    Перем Отдел, Список;
	
	Отдел = ПолучитьОтделСотрудника(Сотрудник, Дата);
	Отдел = Отдел.ПолучитьОбъект(); // Получить из БД
	
	Список = Отдел.ВозможныеТипыКонтактов.ВыгрузитьКолонку("ТипКонтакта");
	
	Возврат Список;
КонецФункции // ПолучитьСписокТиповКонтактовСотрудника()

Функция ПолучитьТаблицуСвободногоПула(Отдел, Дата) Экспорт
    Перем Запрос, тзРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПривязкаОтделСрезПоследних.Должник,
	|	ПривязкаОтделСрезПоследних.Отдел
	|ИЗ
	|	РегистрСведений.ПривязкаОтдел.СрезПоследних(&Дата, ) КАК ПривязкаОтделСрезПоследних
	|ГДЕ
	|	ПривязкаОтделСрезПоследних.СвободныйПул = Истина
	|	И Отдел = &Отдел";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Отдел", Отдел);
	
    тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат тзРезультат;
КонецФункции // ПолучитьТаблицуСвободногоПула()

Функция ПолучитьНовогоДолжника() Экспорт
    Перем Запрос, тзРезультат;
    Перем Передача;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПривязкаОтделСрезПоследних.Должник,
	|	ПривязкаОтделСрезПоследних.Отдел
	|ИЗ
	|	РегистрСведений.ПривязкаОтдел.СрезПоследних(&Дата, ) КАК ПривязкаОтделСрезПоследних
	|ГДЕ
	|	ПривязкаОтделСрезПоследних.СвободныйПул = ИСТИНА
	|	И ПривязкаОтделСрезПоследних.Отдел = &Отдел";
	
	Дата = ТекущаяДата();
	
	Запрос.УстановитьПараметр("Дата", 	Дата);
	Запрос.УстановитьПараметр("Отдел", 	ПараметрыСеанса.Отдел);
	
    тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Если тзРезультат.Количество() = 0 Тогда
		Сообщить("Нет свободных должников.", СтатусСообщения.Информация);
		Возврат Справочники.Должники.ПустаяСсылка();
	КонецЕсли; 
	
	Должник 	= тзРезультат[0].Должник;
	Передача 	= Документы.ПередачаДолжников.СоздатьДокумент();
	
	Попытка
	    Передача.Дата			= Дата;
		Передача.Отдел 			= ПараметрыСеанса.Отдел;
		Передача.Сотрудник		= ПараметрыСеанса.Пользователь;
		Передача.СотрМенеджер		= ПараметрыСеанса.Пользователь;
	    Передача.Подписан		= Истина;
	    Передача.Комментарий	= "#Авто: получить нового должника.";
		
		НоваяСтрока = Передача.Должники.Добавить();
		НоваяСтрока.Должник = Должник;
		
		Передача.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Новый должник " + Должник.Наименование, СтатусСообщения.Информация);
	Исключение
		Сообщить("Не удалось передать должника. " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат Справочники.Должники.ПустаяСсылка();
	КонецПопытки;
	
    Возврат Должник;
КонецФункции // ПолучитьНовогоДолжника()

Функция ПолучитьРасширенныеДанныеПоТаблицеДолжников(МенеджерВременныхТаблиц, НазваниеВременнойТаблицыДолжников, Дата) Экспорт
    Перем Запрос, тзРезультат;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должники.Должник КАК Должник,
	|	Договоры.Ссылка КАК Договор
	|ИЗ
	|	" + НазваниеВременнойТаблицыДолжников + " КАК Должники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
	|		ПО Должники.Должник = Договоры.Владелец.Ссылка";
	
	тзДолжники = Запрос.Выполнить().Выгрузить();
	
    СписокДоговоров = тзДолжники.ВыгрузитьКолонку("Договор");
    СписокДолжников = тзДолжники.ВыгрузитьКолонку("Должник");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДоговоровСрезПоследних.ТекущийОсновнойДолг,
	|	ДанныеДоговоровСрезПоследних.ВсегоЗадолженность,
	|	ДанныеДоговоровСрезПоследних.ДнейПросрочки,
	|	ДанныеДоговоровСрезПоследних.Договор.Банк КАК Банк,
	|	ДанныеДоговоровСрезПоследних.Договор.ТипКредита КАК ТипКредита,
	|	ДанныеДоговоровСрезПоследних.Договор.Владелец.Регион КАК Регион,
	|	СтатусыДолжниковСрезПоследних.Статус КАК Статус,
	|	Должники.Должник КАК Должник,
	|	Должники.Должник.Направление КАК Направление,
	|	Должники.Должник.Район КАК Район,
	|	ПланированиеКонтактовСрезПервых.ДатаПланирования КАК СледующийКонтакт,
	|	ОбещанияОбороты.СуммаОборот КАК СуммаОбещания,
	|	ПлатежиОбороты.СуммаОборот КАК ОплатилВсего
	|ИЗ
	|	" + НазваниеВременнойТаблицыДолжников + " КАК Должники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДоговоров.СрезПоследних(&Дата, Договор В (&СписокДоговоров)) КАК ДанныеДоговоровСрезПоследних
	|		ПО Должники.Должник = ДанныеДоговоровСрезПоследних.Договор.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланированиеКонтактов.СрезПоследних(&Дата, Должник В (&СписокДолжников)) КАК ПланированиеКонтактовСрезПервых
	|		ПО Должники.Должник = ПланированиеКонтактовСрезПервых.Должник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДолжников.СрезПоследних(&Дата, Должник В (&СписокДолжников)) КАК СтатусыДолжниковСрезПоследних
	|		ПО Должники.Должник = СтатусыДолжниковСрезПоследних.Должник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Обещания.Обороты КАК ОбещанияОбороты
	|		ПО Должники.Должник = ОбещанияОбороты.Должник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Платежи.Обороты КАК ПлатежиОбороты
	|		ПО Должники.Должник = ПлатежиОбороты.Должник";
	
	
	//|	ВЫБОР       " + НазваниеВременнойТаблицыДолжников + "
	//|		КОГДА ПланированиеКонтактовСрезПервых.ДатаПланирования = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|			ТОГДА ""1) Пустая дата""
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ПланированиеКонтактовСрезПервых.ДатаПланирования < &Дата
	//|					ТОГДА ""2) Просрочен""
	//|				ИНАЧЕ ВЫБОР
	//|						КОГДА ПланированиеКонтактовСрезПервых.ДатаПланирования = &Дата
	//|							ТОГДА ""3) Сегодня""
	//|						ИНАЧЕ ""4) Запланирован далее""
	//|					КОНЕЦ
	//|			КОНЕЦ
	//|	КОНЕЦ КАК Планирование
	//" + НазваниеВременнойТаблицыДолжников + "
	
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("СписокДоговоров", 	СписокДоговоров);
	Запрос.УстановитьПараметр("СписокДолжников", 	СписокДолжников);
	
    тзРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат тзРезультат;
КонецФункции // ПолучитьТаблицуДолжниковСотрудника()

Функция ПолучитьРасширенныеДанныеПоТаблицеДолжниковР(МенеджерВременныхТаблиц, НазваниеВременнойТаблицыДолжников, Дата, Менеджер) Экспорт
	Перем Запрос, тзРезультат;
	
	Если ПараметрыСеанса.Пользователь.КоллективнаяРабота Тогда
		
		#Если Клиент Тогда
			ФормаПрогресс = ПолучитьОбщуюФорму("Прогресс");
			ФормаПрогресс.Открыть();
		#КонецЕсли
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ТекущийСотрудник", Менеджер);
		Запрос.УстановитьПараметр("ТекДата", НачалоДня(ТекущаяДата()));
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		#Если Клиент Тогда
			ВремяНачало = ТекущаяДата();
			ФормаПрогресс.ТекущаяВыборка = "Выбор должников из реестров...";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеестрДолжники.Должник КАК Должник,
		|	РеестрДолжники.Договор КАК Договор,
		|	РеестрДолжники.Ссылка КАК Реестр
		|ПОМЕСТИТЬ ВТ_ДолжникиРеестры
		|ИЗ
		|	Документ.Реестр.Должники КАК РеестрДолжники
		|ГДЕ
		|	РеестрДолжники.Ссылка.Проведен
		|	И РеестрДолжники.Ссылка.ДатаНачалаУчета <= &ТекДата
		|	И РеестрДолжники.Ссылка.ДатаОкончанияУчета >= &ТекДата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник,
		|	Договор";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор сотрудников... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПривязкаСрезПоследних.Должник КАК Должник,
		|	ПривязкаСрезПоследних.СотрМенеджер
		|ПОМЕСТИТЬ ВТ_Сотрудники
		|ИЗ
		|	РегистрСведений.ПривязкаСотрудник.СрезПоследних(
		|			&Дата,
		|			Должник В
		|				(ВЫБРАТЬ
		|					ВТ_ДолжникиРеестры.Должник
		|				ИЗ
		|					ВТ_ДолжникиРеестры)) КАК ПривязкаСрезПоследних
		|ГДЕ
		|	(ПривязкаСрезПоследних.СотрМенеджер = &ТекущийСотрудник
		|			ИЛИ ПривязкаСрезПоследних.СотрМенеджер ЕСТЬ NULL )
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор сотрудников должников... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должники.Должник КАК Должник,
		|	Должники.Договор КАК Договор,
		|	Должники.Реестр КАК Реестр,
		|	ВТ_Сотрудники.СотрМенеджер КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_Должники
		|ИЗ
		|	ВТ_ДолжникиРеестры КАК Должники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
		|		ПО Должники.Должник = ВТ_Сотрудники.Должник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник,
		|	Договор";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Должники.Должник,
		|	ВТ_Должники.Реестр,
		|	ВТ_Должники.Сотрудник
		|ПОМЕСТИТЬ ВТ_ДолжникиБезДоговора
		|ИЗ
		|	ВТ_Должники КАК ВТ_Должники
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Должники.Сотрудник,
		|	ВТ_Должники.Реестр,
		|	ВТ_Должники.Должник";
		Запрос.Выполнить();

		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор групп... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДолжников.Ссылка КАК Группа,
		|	ВЫБОР
		|		КОГДА ГруппыДолжниковРеестры.Реестр ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НетРеестров,
		|	ВЫБОР
		|		КОГДА ГруппыДолжниковСотрудники.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НетСотрудников,
		|	ВЫБОР
		|		КОГДА ГруппыДолжниковБанки.Банк ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НетБанков,
		|	ГруппыДолжников.Статус КАК Статус,
		|	ГруппыДолжников.УсловиеОтбора КАК УсловиеОтбора,
		|	ГруппыДолжников.Приоритет,
		|	ГруппыДолжников.ГруппаПоСуммеДолга КАК ГруппаПоСуммеДолга,
		|	ГруппыДолжников.ГруппаПоСрокуПросрочки КАК ГруппаПоСрокуПросрочки
		|ПОМЕСТИТЬ ВТ_Группы
		|ИЗ
		|	Справочник.ГруппыДолжников КАК ГруппыДолжников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДолжников.Реестры КАК ГруппыДолжниковРеестры
		|		ПО ГруппыДолжников.Ссылка = ГруппыДолжниковРеестры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДолжников.Сотрудники КАК ГруппыДолжниковСотрудники
		|		ПО ГруппыДолжников.Ссылка = ГруппыДолжниковСотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДолжников.Банки КАК ГруппыДолжниковБанки
		|		ПО ГруппыДолжников.Ссылка = ГруппыДолжниковБанки.Ссылка
		|ГДЕ
		|	(НЕ ГруппыДолжников.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыДолжников.Ссылка,
		|	ВЫБОР
		|		КОГДА ГруппыДолжниковРеестры.Реестр ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ГруппыДолжниковСотрудники.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ГруппыДолжниковБанки.Банк ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ГруппыДолжников.Статус,
		|	ГруппыДолжников.УсловиеОтбора,
		|	ГруппыДолжников.Приоритет,
		|	ГруппыДолжников.ГруппаПоСуммеДолга,
		|	ГруппыДолжников.ГруппаПоСрокуПросрочки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Группа,
		|	Статус,
		|	УсловиеОтбора,
		|	ГруппаПоСуммеДолга,
		|	ГруппаПоСрокуПросрочки";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор реестров групп... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДолжниковРеестры.Реестр КАК Реестр,
		|	ГруппыДолжниковРеестры.Ссылка КАК Группа
		|ПОМЕСТИТЬ ВТ_ГруппыРеестры
		|ИЗ
		|	Справочник.ГруппыДолжников.Реестры КАК ГруппыДолжниковРеестры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Реестр,
		|	Группа";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор банков групп... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДолжниковБанки.Банк КАК Банк,
		|	ГруппыДолжниковБанки.Ссылка КАК Группа
		|ПОМЕСТИТЬ ВТ_ГруппыБанки
		|ИЗ
		|	Справочник.ГруппыДолжников.Банки КАК ГруппыДолжниковБанки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Банк,
		|	Группа";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор сотрудников групп... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДолжниковСотрудники.Сотрудник КАК Сотрудник,
		|	ГруппыДолжниковСотрудники.Ссылка КАК Группа
		|ПОМЕСТИТЬ ВТ_ГруппыСотрудники
		|ИЗ
		|	Справочник.ГруппыДолжников.Сотрудники КАК ГруппыДолжниковСотрудники
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Группа";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор периодов банков должников... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеДоговоровСрезПоследних.Период) КАК Период,
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец КАК Должник
		|ПОМЕСТИТЬ ВТ_ПериодыБанков
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(
		|			&Дата,
		|			Договор В
		|				(ВЫБРАТЬ
		|					ВТ_Должники.Договор
		|				ИЗ
		|					ВТ_Должники)) КАК ДанныеДоговоровСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Должник";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выбор банков должников... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_ПериодыБанков.Должник КАК Должник,
		|	ДанныеДоговоровСрезПоследних.Договор.Банк КАК Банк
		|ПОМЕСТИТЬ ВТ_БанкиДолжников
		|ИЗ
		|	ВТ_ПериодыБанков КАК ВТ_ПериодыБанков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДоговоров.СрезПоследних(
		|				&Дата,
		|				Договор В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Договор
		|					ИЗ
		|						ВТ_Должники)) КАК ДанныеДоговоровСрезПоследних
		|		ПО ВТ_ПериодыБанков.Период = ДанныеДоговоровСрезПоследних.Период
		|			И ВТ_ПериодыБанков.Должник = ДанныеДоговоровСрезПоследних.Договор.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выборка данных договора... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец КАК Должник,
		|	ДанныеДоговоровСрезПоследних.Договор.ТипКредита КАК ТипКредита,
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец.Регион КАК Регион,
		|	ПРЕДСТАВЛЕНИЕ(ДанныеДоговоровСрезПоследних.Договор.Владелец) КАК НаименованиеД,
		|	ДанныеДоговоровСрезПоследних.ТекущийОсновнойДолг,
		|	ДанныеДоговоровСрезПоследних.ВсегоЗадолженность,
		|	ДанныеДоговоровСрезПоследних.ДнейПросрочки
		|ПОМЕСТИТЬ ВТ_ДанныеДоговора
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(
		|			&Дата,
		|			Договор В
		|				(ВЫБРАТЬ
		|					ВТ_Должники.Договор
		|				ИЗ
		|					ВТ_Должники)) КАК ДанныеДоговоровСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник";
		Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Итоговая выборка... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВТ_ДанныеДоговора.ТекущийОсновнойДолг) КАК ТекущийОсновнойДолг,
		|	СУММА(ВТ_ДанныеДоговора.ВсегоЗадолженность) КАК ВсегоЗадолженность,
		|	МАКСИМУМ(ВТ_ДанныеДоговора.ДнейПросрочки) КАК ДнейПросрочки,
		|	ВТ_БанкиДолжников.Банк КАК Банк,
		|	Должники.Должник.Новый КАК Новый,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеДоговора.ТипКредита) КАК ТипКредита,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеДоговора.Регион) КАК Регион,
		|	ЕСТЬNULL(СтатусыДолжниковСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.Статусы.ПустаяСсылка)) КАК Статус,
		|	Должники.Должник КАК Должник,
		|	Должники.Должник.Направление КАК Направление,
		|	Должники.Должник.Район КАК Район,
		|	ПланированиеКонтактовСрезПервых.ДатаПланирования КАК СледующийКонтакт,
		|	МАКСИМУМ(ОбещанияОбороты.Период) КАК Обещание,
		|	СУММА(ОбещанияОбороты.СуммаОборот) КАК СуммаОбещания,
		|	МАКСИМУМ(ПлатежиОбороты.СуммаОборот) КАК ОплатилВсего,
		|	ВТ_ДанныеДоговора.НаименованиеД,
		|	Должники.Сотрудник КАК Сотрудник,
		|	СотрудникиОтделов.Отдел КАК Отдел,
		|	МИНИМУМ(ГруппыДолжников.Группа.Приоритет) КАК Приоритет,
		|	МИНИМУМ(ГруппыДолжников.Группа) КАК Группа
		|ИЗ
		|	ВТ_ДолжникиБезДоговора КАК Должники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговора КАК ВТ_ДанныеДоговора
		|		ПО Должники.Должник = ВТ_ДанныеДоговора.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БалансДолжников.Остатки(
		|				&Дата,
		|				(Должник, Договор) В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник,
		|						ВТ_Должники.Договор
		|					ИЗ
		|						ВТ_Должники)) КАК Баланс
		|		ПО Должники.Должник = Баланс.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланированиеКонтактов.СрезПоследних(
		|				&Дата,
		|				Должник В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник
		|					ИЗ
		|						ВТ_Должники)) КАК ПланированиеКонтактовСрезПервых
		|		ПО Должники.Должник = ПланированиеКонтактовСрезПервых.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДолжников.СрезПоследних(
		|				&Дата,
		|				Должник В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник
		|					ИЗ
		|						ВТ_Должники)) КАК СтатусыДолжниковСрезПоследних
		|		ПО Должники.Должник = СтатусыДолжниковСрезПоследних.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОбещанияОбороты.Должник КАК Должник,
		|			МАКСИМУМ(ОбещанияОбороты.Период) КАК Период,
		|			СУММА(ОбещанияОбороты.СуммаОборот) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.Обещания.Обороты(
		|					,
		|					,
		|					День,
		|					(Должник, Договор) В
		|						(ВЫБРАТЬ
		|							ВТ_Должники.Должник,
		|							ВТ_Должники.Договор
		|						ИЗ
		|							ВТ_Должники)) КАК ОбещанияОбороты
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОбещанияОбороты.Должник) КАК ОбещанияОбороты
		|		ПО Должники.Должник = ОбещанияОбороты.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Платежи.Обороты(
		|				,
		|				,
		|				,
		|				(Должник, Договор) В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник,
		|						ВТ_Должники.Договор
		|					ИЗ
		|						ВТ_Должники)) КАК ПлатежиОбороты
		|		ПО Должники.Должник = ПлатежиОбороты.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанкиДолжников КАК ВТ_БанкиДолжников
		|		ПО Должники.Должник = ВТ_БанкиДолжников.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиОтделов.СрезПоследних(
		|				&Дата,
		|				Сотрудник В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Сотрудник
		|					ИЗ
		|						ВТ_Должники)) КАК СотрудникиОтделов
		|		ПО Должники.Сотрудник = СотрудникиОтделов.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Группы КАК ГруппыДолжников
		|		ПО (ЕСТЬNULL(СтатусыДолжниковСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.Статусы.ПустаяСсылка)) = ГруппыДолжников.Статус)
		|			И (ВЫБОР
		|				КОГДА ГруппыДолжников.УсловиеОтбора = ЗНАЧЕНИЕ(Перечисление.УсловияОтбораГруппДолжников.ТекущаяДата)
		|					ТОГДА ПланированиеКонтактовСрезПервых.ДатаПланирования = &ТекДата
		|							И Должники.Сотрудник = &ТекущийСотрудник
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ГруппыДолжников.УсловиеОтбора = ЗНАЧЕНИЕ(Перечисление.УсловияОтбораГруппДолжников.Просроченные)
		|							ТОГДА НАЧАЛОПЕРИОДА(ПланированиеКонтактовСрезПервых.ДатаПланирования, ДЕНЬ) < &ТекДата
		|									И Должники.Сотрудник = &ТекущийСотрудник
		|						ИНАЧЕ ВЫБОР
		|								КОГДА ГруппыДолжников.УсловиеОтбора = ЗНАЧЕНИЕ(Перечисление.УсловияОтбораГруппДолжников.Будущие)
		|									ТОГДА НАЧАЛОПЕРИОДА(ПланированиеКонтактовСрезПервых.ДатаПланирования, ДЕНЬ) > &ТекДата
		|											И Должники.Сотрудник = &ТекущийСотрудник
		|								ИНАЧЕ ВЫБОР
		|										КОГДА ГруппыДолжников.УсловиеОтбора = ЗНАЧЕНИЕ(Перечисление.УсловияОтбораГруппДолжников.Незакрепленные)
		|											ТОГДА Должники.Сотрудник ЕСТЬ NULL 
		|													И (ГруппыДолжников.НетСотрудников
		|														ИЛИ (ГруппыДолжников.Группа, &ТекущийСотрудник) В
		|															(ВЫБРАТЬ
		|																ВТ_ГруппыСотрудники.Группа,
		|																ВТ_ГруппыСотрудники.Сотрудник
		|															ИЗ
		|																ВТ_ГруппыСотрудники))
		|													И (ГруппыДолжников.НетРеестров
		|														ИЛИ (ГруппыДолжников.Группа, Должники.Реестр) В
		|															(ВЫБРАТЬ
		|																ВТ_ГруппыРеестры.Группа,
		|																ВТ_ГруппыРеестры.Реестр
		|															ИЗ
		|																ВТ_ГруппыРеестры))
		|													И (ГруппыДолжников.НетРеестров
		|														ИЛИ ГруппыДолжников.НетБанков
		|														ИЛИ (ГруппыДолжников.Группа, Должники.Реестр.Банк) В
		|															(ВЫБРАТЬ
		|																ВТ_ГруппыБанки.Группа,
		|																ВТ_ГруппыБанки.Банк
		|															ИЗ
		|																ВТ_ГруппыБанки))
		|										ИНАЧЕ ЛОЖЬ
		|									КОНЕЦ
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ)
		|ГДЕ
		|	(НЕ ГруппыДолжников.Группа ЕСТЬ NULL )
		|	И ВЫБОР
		|			КОГДА ГруппыДолжников.ГруппаПоСуммеДолга = ЗНАЧЕНИЕ(Справочник.ГруппыПоСуммеДолга.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЕСТЬNULL(Баланс.СуммаОстаток, 0) >= ГруппыДолжников.ГруппаПоСуммеДолга.МинимальноеЗначение
		|					И ЕСТЬNULL(Баланс.СуммаОстаток, 0) <= ГруппыДолжников.ГруппаПоСуммеДолга.МаксимальноеЗначение
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ГруппыДолжников.ГруппаПоСрокуПросрочки = ЗНАЧЕНИЕ(Справочник.ГруппыПоСрокуПросрочки.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЕСТЬNULL(ВТ_ДанныеДоговора.ДнейПросрочки, 0) >= ГруппыДолжников.ГруппаПоСрокуПросрочки.МинимальноеЗначение
		|					И ЕСТЬNULL(ВТ_ДанныеДоговора.ДнейПросрочки, 0) <= ГруппыДолжников.ГруппаПоСрокуПросрочки.МаксимальноеЗначение
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыДолжниковСрезПоследних.Статус,
		|	Должники.Должник,
		|	Должники.Должник.Новый,
		|	ВТ_БанкиДолжников.Банк,
		|	Должники.Сотрудник,
		|	СотрудникиОтделов.Отдел,
		|	Должники.Должник.Направление,
		|	Должники.Должник.Район,
		|	ПланированиеКонтактовСрезПервых.ДатаПланирования,
		|	ВТ_ДанныеДоговора.НаименованиеД,
		|	ЕСТЬNULL(СтатусыДолжниковСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.Статусы.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Вывод результата... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		
		тзРезультат = РезультатЗапроса.Выгрузить();
		
		#Если Клиент Тогда
			ФормаПрогресс.ТекущаяВыборка = "Выборка должников на сегодня... (прошло " + Строка(ТекущаяДата() - ВремяНачало) + " сек.)";
			ФормаПрогресс.Индикатор = ФормаПрогресс.Индикатор + 1;
		#КонецЕсли
		
		// получить должников на сегодня
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВТ_ДанныеДоговора.ТекущийОсновнойДолг) КАК ТекущийОсновнойДолг,
		|	СУММА(ВТ_ДанныеДоговора.ВсегоЗадолженность) КАК ВсегоЗадолженность,
		|	МАКСИМУМ(ВТ_ДанныеДоговора.ДнейПросрочки) КАК ДнейПросрочки,
		|	ВТ_БанкиДолжников.Банк КАК Банк,
		|	Должники.Должник.Новый КАК Новый,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеДоговора.ТипКредита) КАК ТипКредита,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДанныеДоговора.Регион) КАК Регион,
		|	ЕСТЬNULL(СтатусыДолжниковСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.Статусы.ПустаяСсылка)) КАК Статус,
		|	Должники.Должник КАК Должник,
		|	Должники.Должник.Направление КАК Направление,
		|	Должники.Должник.Район КАК Район,
		|	ПланированиеКонтактовСрезПервых.ДатаПланирования КАК СледующийКонтакт,
		|	МАКСИМУМ(ОбещанияОбороты.Период) КАК Обещание,
		|	СУММА(ОбещанияОбороты.СуммаОборот) КАК СуммаОбещания,
		|	МАКСИМУМ(ПлатежиОбороты.СуммаОборот) КАК ОплатилВсего,
		|	ВТ_ДанныеДоговора.НаименованиеД КАК НаименованиеД,
		|	Должники.Сотрудник КАК Сотрудник,
		|	СотрудникиОтделов.Отдел КАК Отдел
		|ИЗ
		|	ВТ_ДолжникиБезДоговора КАК Должники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговора КАК ВТ_ДанныеДоговора
		|		ПО Должники.Должник = ВТ_ДанныеДоговора.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БалансДолжников.Остатки(
		|				&Дата,
		|				(Должник, Договор) В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник,
		|						ВТ_Должники.Договор
		|					ИЗ
		|						ВТ_Должники)) КАК Баланс
		|		ПО Должники.Должник = Баланс.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланированиеКонтактов.СрезПоследних(
		|				&Дата,
		|				Должник В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник
		|					ИЗ
		|						ВТ_Должники)) КАК ПланированиеКонтактовСрезПервых
		|		ПО Должники.Должник = ПланированиеКонтактовСрезПервых.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДолжников.СрезПоследних(
		|				&Дата,
		|				Должник В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник
		|					ИЗ
		|						ВТ_Должники)) КАК СтатусыДолжниковСрезПоследних
		|		ПО Должники.Должник = СтатусыДолжниковСрезПоследних.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОбещанияОбороты.Должник КАК Должник,
		|			МАКСИМУМ(ОбещанияОбороты.Период) КАК Период,
		|			СУММА(ОбещанияОбороты.СуммаОборот) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.Обещания.Обороты(
		|					,
		|					,
		|					День,
		|					(Должник, Договор) В
		|						(ВЫБРАТЬ
		|							ВТ_Должники.Должник,
		|							ВТ_Должники.Договор
		|						ИЗ
		|							ВТ_Должники)) КАК ОбещанияОбороты
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОбещанияОбороты.Должник) КАК ОбещанияОбороты
		|		ПО Должники.Должник = ОбещанияОбороты.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Платежи.Обороты(
		|				,
		|				,
		|				,
		|				(Должник, Договор) В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Должник,
		|						ВТ_Должники.Договор
		|					ИЗ
		|						ВТ_Должники)) КАК ПлатежиОбороты
		|		ПО Должники.Должник = ПлатежиОбороты.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанкиДолжников КАК ВТ_БанкиДолжников
		|		ПО Должники.Должник = ВТ_БанкиДолжников.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиОтделов.СрезПоследних(
		|				&Дата,
		|				Сотрудник В
		|					(ВЫБРАТЬ
		|						ВТ_Должники.Сотрудник
		|					ИЗ
		|						ВТ_Должники)) КАК СотрудникиОтделов
		|		ПО Должники.Сотрудник = СотрудникиОтделов.Сотрудник
		|ГДЕ
		|	ПланированиеКонтактовСрезПервых.ДатаПланирования = &ТекДата
		|	И Должники.Сотрудник = &ТекущийСотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыДолжниковСрезПоследних.Статус,
		|	Должники.Должник,
		|	Должники.Должник.Новый,
		|	ВТ_БанкиДолжников.Банк,
		|	Должники.Сотрудник,
		|	СотрудникиОтделов.Отдел,
		|	Должники.Должник.Направление,
		|	Должники.Должник.Район,
		|	ПланированиеКонтактовСрезПервых.ДатаПланирования,
		|	ВТ_ДанныеДоговора.НаименованиеД";
		тзРезультатДолжникиНаСегодня = Запрос.Выполнить().Выгрузить();
		
		#Если Клиент Тогда
			ФормаПрогресс.Закрыть();
		#КонецЕсли
		
		Возврат (Новый Структура("Должники, ДолжникиНаСегодня", тзРезультат, тзРезультатДолжникиНаСегодня));
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Должники.Должник КАК Должник,
		               |	Договоры.Ссылка КАК Договор,
		               |	Должники.СотрМенеджер КАК Менеджер,
		               |	ПривязкаСотрудникСрезПоследних.СотрМенеджер КАК ТекМенеджер
		               |ИЗ
		               |	ВТ_Должники КАК Должники
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
		               |		ПО Должники.Должник = Договоры.Владелец
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаСотрудник.СрезПоследних(&ДатаОтчета, ) КАК ПривязкаСотрудникСрезПоследних
		               |		ПО Должники.Должник = ПривязкаСотрудникСрезПоследних.Должник
		               |ГДЕ
		               |	Должники.СотрМенеджер = ПривязкаСотрудникСрезПоследних.СотрМенеджер";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_Должники", НазваниеВременнойТаблицыДолжников);
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаОтчета", Дата);
		РезультатЗапроса = Запрос.Выполнить();
		
		тзДолжники = РезультатЗапроса.Выгрузить();
		массивДолжников = тзДолжники.ВыгрузитьКолонку("Должник");
		массивДоговоров = тзДолжники.ВыгрузитьКолонку("Договор");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДанныеДоговоровСрезПоследних.Период) КАК Период,
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец КАК Должник,
		|	СУММА(ДанныеДоговоровСрезПоследних.ВсегоЗадолженность) КАК ВсегоЗадолженность,
		|	СУММА(ДанныеДоговоровСрезПоследних.ТекущийОсновнойДолг) КАК ТекущийОсновнойДолг
		|ПОМЕСТИТЬ ВТ_ПериодыБанков
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров.СрезПоследних(&Дата, Договор В (&СписокДоговоров)) КАК ДанныеДоговоровСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыБанков.Должник КАК Должник,
		|	ДанныеДоговоровСрезПоследних.Договор.Банк КАК Банк,
		|	ВТ_ПериодыБанков.ВсегоЗадолженность КАК ВсегоЗадолженность,
		|	ВТ_ПериодыБанков.ТекущийОсновнойДолг КАК ТекущийОсновнойДолг
		|ПОМЕСТИТЬ ВТ_БанкиДолжников
		|ИЗ
		|	ВТ_ПериодыБанков КАК ВТ_ПериодыБанков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДоговоров.СрезПоследних(&Дата, Договор В (&СписокДоговоров)) КАК ДанныеДоговоровСрезПоследних
		|		ПО ВТ_ПериодыБанков.Период = ДанныеДоговоровСрезПоследних.Период
		|			И ВТ_ПериодыБанков.Должник = ДанныеДоговоровСрезПоследних.Договор.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(ДанныеДоговоровСрезПоследних.ДнейПросрочки) КАК ДнейПросрочки,
		|	ВТ_БанкиДолжников.Банк КАК Банк,
		|	Должники.Должник.Новый КАК Новый,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеДоговоровСрезПоследних.Договор.ТипКредита) КАК ТипКредита,
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец.Регион КАК Регион,
		|	СтатусыДолжниковСрезПоследних.Статус КАК Статус,
		|	Должники.Должник КАК Должник,
		|	Должники.Должник.Направление КАК Направление,
		|	Должники.Должник.Район КАК Район,
		|	ПланированиеКонтактовСрезПервых.ДатаПланирования КАК СледующийКонтакт,
		|	МАКСИМУМ(ОбещанияОбороты.Период) КАК Обещание,
		|	СУММА(ОбещанияОбороты.СуммаОборот) КАК СуммаОбещания,
		|	МАКСИМУМ(ПлатежиОбороты.СуммаОборот) КАК ОплатилВсего,
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец.Наименование КАК НаименованиеД,
		|	ВТ_БанкиДолжников.ВсегоЗадолженность КАК ВсегоЗадолженность,
		|	ВТ_БанкиДолжников.ТекущийОсновнойДолг КАК ТекущийОсновнойДолг,
		|	ПривязкаОтделСрезПоследних.Отдел КАК Отдел,
		|	ПривязкаОтветственныйСрезПоследних.Ответственный КАК Сотрудник
		|ИЗ
		|	ДолжникиСотрудника КАК Должники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДоговоров.СрезПоследних(&Дата, Договор В (&СписокДоговоров)) КАК ДанныеДоговоровСрезПоследних
		|		ПО Должники.Должник = ДанныеДоговоровСрезПоследних.Договор.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланированиеКонтактов.СрезПоследних(&Дата, Должник В (&СписокДолжников)) КАК ПланированиеКонтактовСрезПервых
		|		ПО Должники.Должник = ПланированиеКонтактовСрезПервых.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДолжников.СрезПоследних(&Дата, Должник В (&СписокДолжников)) КАК СтатусыДолжниковСрезПоследних
		|		ПО Должники.Должник = СтатусыДолжниковСрезПоследних.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОбещанияОбороты.Должник КАК Должник,
		|			МАКСИМУМ(ОбещанияОбороты.Период) КАК Период,
		|			СУММА(ОбещанияОбороты.СуммаОборот) КАК СуммаОборот
		|		ИЗ
		|			РегистрНакопления.Обещания.Обороты(, , День, ) КАК ОбещанияОбороты
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОбещанияОбороты.Должник) КАК ОбещанияОбороты
		|		ПО Должники.Должник = ОбещанияОбороты.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Платежи.Обороты КАК ПлатежиОбороты
		|		ПО Должники.Должник = ПлатежиОбороты.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанкиДолжников КАК ВТ_БанкиДолжников
		|		ПО Должники.Должник = ВТ_БанкиДолжников.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаОтдел.СрезПоследних КАК ПривязкаОтделСрезПоследних
		|		ПО Должники.Должник = ПривязкаОтделСрезПоследних.Должник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПривязкаОтветственный.СрезПоследних КАК ПривязкаОтветственныйСрезПоследних
		|		ПО Должники.Должник = ПривязкаОтветственныйСрезПоследних.Должник
		|ГДЕ
		|	Должники.Должник В(&СписокДолжников)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыДолжниковСрезПоследних.Статус,
		|	Должники.Должник,
		|	Должники.Должник.Новый,
		|	ВТ_БанкиДолжников.Банк,
		|	Должники.Должник.Направление,
		|	Должники.Должник.Район,
		|	ПланированиеКонтактовСрезПервых.ДатаПланирования,
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец.Наименование,
		|	ДанныеДоговоровСрезПоследних.Договор.Владелец.Регион,
		|	ВТ_БанкиДолжников.ВсегоЗадолженность,
		|	ВТ_БанкиДолжников.ТекущийОсновнойДолг,
		|	ПривязкаОтделСрезПоследних.Отдел,
		|	ПривязкаОтветственныйСрезПоследних.Ответственный
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеД
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("СписокДоговоров", массивДоговоров);
		Запрос.УстановитьПараметр("СписокДолжников", массивДолжников);
		
		тзРезультат = Запрос.Выполнить().Выгрузить();
		
		Возврат тзРезультат;
	КонецЕсли;
КонецФункции // ПолучитьТаблицуДолжниковСотрудника()
